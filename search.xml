<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>钩子方法</title>
      <link href="/2022/03/08/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E9%92%A9%E5%AD%90%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/08/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/%E9%92%A9%E5%AD%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://www.jb51.net/article/180164.htm">https://www.jb51.net/article/180164.htm</a></p><h1 id="抽象模板类"><a href="#抽象模板类" class="headerlink" title="抽象模板类"></a>抽象模板类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类 定义一些模板子方法 （模板）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体方法 抽象类中声明并实现，继承此抽象类一般不需实现此方法（当然也可以选择覆写）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">concreteMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 抽象类中仅声明，实现类继承时需要进行具体实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 钩子方法 在抽象类中是一般是一个空实现异或跟具体方法一样有个默认实现 实现类继承时可选择进行方法扩展</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法 集成了一系列的方法调用（完成一个完整业务）一般模板方法不会在实现类中覆写 其调用逻辑已成型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        concreteMethod();</span><br><span class="line">        abstractMethod();</span><br><span class="line">        hookMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h1><h2 id="ClassA"><a href="#ClassA" class="headerlink" title="ClassA"></a>ClassA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法A实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">concreteMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.concreteMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;在原具体方法基础上增加额外业务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassA的钩子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ClassB"><a href="#ClassB" class="headerlink" title="ClassB"></a>ClassB</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法B实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassB的钩子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass abstractClassA = <span class="keyword">new</span> ClassA();</span><br><span class="line">        AbstractClass abstractClassB = <span class="keyword">new</span> ClassB();</span><br><span class="line">        abstractClassA.templateMethod();</span><br><span class="line">        abstractClassB.templateMethod();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">具体方法</span><br><span class="line">在原具体方法基础上增加额外业务</span><br><span class="line">抽象方法A实现</span><br><span class="line">ClassA的钩子方法</span><br><span class="line">具体方法</span><br><span class="line">抽象方法B实现</span><br><span class="line">ClassB的钩子方法</span><br></pre></td></tr></table></figure><h1 id="源码体现"><a href="#源码体现" class="headerlink" title="源码体现"></a>源码体现</h1><p>jdk中HashMap中定义了许多空方法（其实就是钩子方法），并在get、put等方法上进行调用，而LinkedHash继承了HashMap，并重写了那些空方法，并且LinkedHashMap不会再去重写get、put等方法，而是直接使用从HashMap中继承而来的方法，与原实现的区别就在于这些空方法的实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 钩子方法 </tag>
            
            <tag> 模板模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap</title>
      <link href="/2022/03/07/%E6%BA%90%E7%A0%81/jdk%E6%BA%90%E7%A0%81/LinkedHashMap/"/>
      <url>/2022/03/07/%E6%BA%90%E7%A0%81/jdk%E6%BA%90%E7%A0%81/LinkedHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h1><p>在HashMap的基础上维护了一个双向链表，其定义了迭代顺序，通常是插入顺序，相同的key重新插入覆写不会影响原有顺序</p><p><code>Map copy = new LinkedHashMap(m)</code> 可保证与原有map的元素顺序一致</p><p>有个构造方法<code>LinkedHashMap(int,float,boolean)</code>很适合用来构建一个LRU缓存[最远到最近被访问的访问顺序]</p><p><code>put</code><br><code>putIfAbsent</code><br><code>get</code><br><code>getOrDefault</code><br><code>compute</code><br><code>computeIfAbsent</code><br><code>computeIfPresent</code><br><code>merge</code><br><code>replace</code> (仅发生值改变才会认为最近访问)<br><code>putAll</code> (为每个映射认为最近访问)<br>当添加新映射时，可以通过覆写<code>removeEldestEntry</code>方法来选择是否删除最老的键值对，默认实现是不删除（在利用该类实现LRU时可通过该方法来限制最大缓存数量）</p><p>性能略逊于<code>HashMap</code>因为要维护双向链表</p><p>LinkedHashMap和HashMap一样都是非同步的，同步化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map m = Collections.synchronizedMap(<span class="keyword">new</span> LinkedHashMap(...));</span><br></pre></td></tr></table></figure><p>在access-order（访问顺序）的LinkedHashMap中，仅仅是用get方法查询map就是一种结构上的修改。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双链表 头结点</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="comment">// 双链表 尾结点</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"><span class="comment">// 访问顺序flag  true-基于访问顺序 false-基于插入顺序</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>在HashMap的Node节点基础上增加前后指针的声明 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="内部工具方法"><a href="#内部工具方法" class="headerlink" title="内部工具方法"></a>内部工具方法</h1><h2 id="linkNodeLast"><a href="#linkNodeLast" class="headerlink" title="linkNodeLast"></a>linkNodeLast</h2><p>将节点连接在链表末端，尾插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="comment">// 首次链接</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前前置节点为原尾结点</span></span><br><span class="line">            p.before = last;</span><br><span class="line">            <span class="comment">// 原尾结点置位当前结点</span></span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="transferLinks"><a href="#transferLinks" class="headerlink" title="transferLinks"></a>transferLinks</h2><p>在替换节点的时候，需要对LinkedHashMap 中的双向链表进维护</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferLinks</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; src,</span></span></span><br><span class="line"><span class="function"><span class="params">                               LinkedHashMap.Entry&lt;K,V&gt; dst)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; b = dst.before = src.before;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; a = dst.after = src.after;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = dst;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = dst;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">            tail = dst;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a.before = dst;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="覆写钩子方法"><a href="#覆写钩子方法" class="headerlink" title="覆写钩子方法"></a>覆写钩子方法</h1><h2 id="reinitialize"><a href="#reinitialize" class="headerlink" title="reinitialize"></a>reinitialize</h2><p>重置map，额外需要置空双链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reinitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.reinitialize();</span><br><span class="line">        head = tail = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newNode"><a href="#newNode" class="headerlink" title="newNode"></a>newNode</h2><p>覆写新建节点方法，将节点维护的双向链表的尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        linkNodeLast(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="replacementNode"><a href="#replacementNode" class="headerlink" title="replacementNode"></a>replacementNode</h2><p>// 树型节点退化普通链表节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; t =</span><br><span class="line">            <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(q.hash, q.key, q.value, next);</span><br><span class="line">        <span class="comment">// 增加对双向链表的维护</span></span><br><span class="line">        transferLinks(q, t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="newTreeNode"><a href="#newTreeNode" class="headerlink" title="newTreeNode"></a>newTreeNode</h2><p>新建树型节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(hash, key, value, next);</span><br><span class="line">        linkNodeLast(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="replacementTreeNode"><a href="#replacementTreeNode" class="headerlink" title="replacementTreeNode"></a>replacementTreeNode</h2><p>将原节点转成树型节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</span><br><span class="line">        TreeNode&lt;K,V&gt; t = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(q.hash, q.key, q.value, next);</span><br><span class="line">        transferLinks(q, t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="afterNodeRemoval"><a href="#afterNodeRemoval" class="headerlink" title="afterNodeRemoval"></a>afterNodeRemoval</h2><p>移除节点时维护双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.before = p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">            tail = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a.before = b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="afterNodeInsertion"><a href="#afterNodeInsertion" class="headerlink" title="afterNodeInsertion"></a>afterNodeInsertion</h2><p>evict这个变量当在map构造器传入指定map初始化的时候是false，其他情况为true，也即其他构造器创建map之后再调用put方法，该参数则为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="comment">// 选择性移除</span></span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            K key = first.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="afterNodeAccess"><a href="#afterNodeAccess" class="headerlink" title="afterNodeAccess"></a>afterNodeAccess</h2><p>如果按访问顺序排列，则将访问的节点放置来双向链表最后（最新的缓存）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">        <span class="comment">// 访问的节点不是最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            <span class="comment">// b前节点 a后节点</span></span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            <span class="comment">// 当前节点后节点置空</span></span><br><span class="line">            p.after = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 前节点若为空，则头结点就是后节点；否则前节点的后置节点为后节点</span></span><br><span class="line">            <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="comment">// 设置后节点的前节点,若后节点为空 则双向链表尾部节点就是当前节点的前节点</span></span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="comment">// 最后将当前节点连在链表尾部</span></span><br><span class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 尾结点置为当前节点</span></span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>其它构造函数与HashMap的类似</p><p>这里提供了一个设置accessOrder的入口，可用该构造函数实现LRU，记得重写<code>removeEldestEntry</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票指标</title>
      <link href="/2022/03/06/%E5%B8%B8%E8%AF%86/%E8%82%A1%E7%A5%A8%E6%8C%87%E6%A0%87/"/>
      <url>/2022/03/06/%E5%B8%B8%E8%AF%86/%E8%82%A1%E7%A5%A8%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="MA"><a href="#MA" class="headerlink" title="MA"></a>MA</h1><p>简单移动平均线(Moving Average)，MA(N)表示N个单位周期的平均值，如MA5、MA10、MA20。短线ma指标结合长线ma指标判断走势</p><h1 id="EMA"><a href="#EMA" class="headerlink" title="EMA"></a>EMA</h1><p>时间权值+MA</p><p>指数移动平均值(Exponential Moving Average),以指数式递减加权的移动平均，是一种均线的衍生指标，但要比MA指标更加灵敏。里面加进了时间作平滑因子的权数，对时间距当前最近的赋给相对大的权重，而较远的权重较小，也就是说最近的股价对当前的影响最大</p><h1 id="BOLL"><a href="#BOLL" class="headerlink" title="BOLL"></a>BOLL</h1><p>存在滞后性</p><p>布林指标參考：<a href="https://baijiahao.baidu.com/s?id=1724852951910697226">https://baijiahao.baidu.com/s?id=1724852951910697226</a></p><p>价格在中轨和上轨（压力位）之间，表明价格强势，趋向多头，适合做多，越靠近上轨，越需要注意超买回调。</p><p>价格在中轨和下轨（支撑位）之间，表明价格弱势，趋向空头，适合做空，越靠近下轨，越需要注意超卖回调。</p><p>遇见收口多观察（横盘），遇见开口定方向（涨or跌）</p><p>开口</p><ul><li>三条布林线同时向上，并逐渐走宽，多头行情</li><li>上轨快速向上，下轨快速向下，中轨上行也是一种股价转强的征兆</li><li>向下开口，上轨向下或者快速向上，下轨向下运行，中轨掉头向下，是一种非常明显的股价走弱状态，空头行情</li></ul><p>收口：</p><p>逐渐横盘，此轮行情稳定下来，关注下次开口方向</p><h1 id="SAR"><a href="#SAR" class="headerlink" title="SAR"></a>SAR</h1><p>价格移动平均线，参考：<a href="https://www.aniu.tv/gp_article_515059.shtml">https://www.aniu.tv/gp_article_515059.shtml</a></p><p>每次价格触及SAR指标则进行SAR涨跌趋向的反转</p><h1 id="vloume"><a href="#vloume" class="headerlink" title="vloume"></a>vloume</h1><p>成交量指标 参考：<a href="https://www.jianshu.com/p/6be44c4143b9/">https://www.jianshu.com/p/6be44c4143b9/</a></p><p>持续上涨+成交量突然急增+股价上涨乏力   后续空头趋势</p><p>持续下跌+成交量突然急增+股价下跌幅度偏小 后续多头趋势</p><p>股票长期成交量减少,就是股票走势开始低迷的信号,</p><h1 id="MACD-12-26-9"><a href="#MACD-12-26-9" class="headerlink" title="MACD(12,26,9)"></a>MACD(12,26,9)</h1><p>趋势性指标</p><p>參考：<a href="https://www.zhihu.com/question/29954111">https://www.zhihu.com/question/29954111</a></p><p>三大要素：DIF、DEA和红柱绿柱</p><blockquote><p>DIF</p></blockquote><p>DIF=12日EMA-26日EMA 其绝对值大小，代表着长短期均线距离（开口）的大小</p><p>在趋势行情中，金叉与死叉是有效的买卖信号，但在震荡行情中，金叉与死叉基本上都是假信号。</p><p>上涨趋势中出现顶背离[<strong>股价在上涨，但DIF却在不断下跌，即随着股价上涨，两条均线之间的距离未能创出新高</strong>]，意味着短期可能出现下跌。</p><p>下跌趋势中出现低背离[<strong>股价在下跌，但DIF却在不断下跌，即随着股价下跌，两条均线之间的距离未能创出新高</strong>]，意味着短期可能出现上漲。</p><blockquote><p>DEA</p></blockquote><p>DIF值的移动平均线，一般是软件默认是9日平均线</p><ul><li><p>当DIF在零轴之上时</p><p>DIF与DEA金叉，意味着DIF正在变大，即股价的长短期均线距离在变大，股价上涨势头越来越猛。</p><p>DIF与DEA死叉，意味着DIF正在变小，即股价的长短期均线的距离正在变小，股价目前上涨势头正在变弱。</p></li><li><p>当DIF在零轴之下时</p></li></ul><p>​      DIF与DEA金叉，意味着DIF正在变小，即股价的长短期均线的距离正在变小，股价目前下跌势头正在变弱。</p><p>​      DIF与DEA死叉，此时DIF是负值，也就是说DIF的绝对值在变大，即股价的长短期均线距离在变大，股价下跌势头越来越强。</p><blockquote><p>红柱绿柱</p></blockquote><p>红涨 绿跌</p><p>（DIF-DEA）*2即是柱子的数值，红柱为正值，绿柱为负值</p><p>红绿柱越长，代表DIF与DEA的距离越大，也就是上涨或下跌的力度越大。</p><p>当红柱变为绿柱时，对应着DIF与DEA的死叉；当绿柱变为红柱时，对应着DIF与DEA的金叉</p><h1 id="KDJ"><a href="#KDJ" class="headerlink" title="KDJ"></a>KDJ</h1><p>参考：</p><p><a href="https://www.jianshu.com/p/4baead60c9c2">https://www.jianshu.com/p/4baead60c9c2</a></p><p><a href="http://www.360doc.com/content/17/0407/14/2522716_643616018.shtml">http://www.360doc.com/content/17/0407/14/2522716_643616018.shtml</a></p><p>超买超卖型指标 （适合短中期交易）</p><p>KDJ(9,3,3) </p><p>三条曲线 K(白) D(黄) J(紫)</p><p>J线数值变化最快，又被称之为超快线，或称确认线。主要用来确认K线与D线所发出的买卖信号，作为辅助观察线。k线数值变化速度在三条曲线中属于中等，但与D线比起来速度稍快于D线，因此，K线又被称之为快线。D线在三条曲线中变化速度最慢，所以D线又被称之为慢线。</p><blockquote><p>KDJ超买信号</p></blockquote><p>K&gt;90 D&gt;80 J&gt;100(持续3天) kdj超买 短期回调概率大</p><blockquote><p>KDJ超卖信号</p></blockquote><p>K&lt;10 D&lt;20 J&lt;0(持续3天) kdj超卖 下跌能力减弱 反弹概率大</p><blockquote><p>KDJ买卖原则</p></blockquote><p>就取值而言,一般来说,KD超过80就应该考虑卖出,低于20就应该考虑买入</p><blockquote><p>KDJ金叉</p></blockquote><p>​        当K线向上突破D线时，快线K值从慢线D值的下方向上穿越慢线D值形成交叉，同是超快确认线J值从KD值的下方一次向上穿越KD线，即三线同时交叉向上发散时，即称之为KDJ金叉二者就形成了KDJ指标的金叉形态。这个形态说明股价短期内的上涨动能有增强趋势，是看涨买入信号。</p><blockquote><p>KDJ死叉</p></blockquote><p>​        K线和D线高位死叉。当KDJ指标中的K线自上向下跌破D线时，二者就形成了死叉形态。这样的形态如果出现在50上方的高位，就被称为高位死叉。K线和D线的死叉形态说明市场上的多方力量越来越弱，空方力量逐渐增强，这是看跌卖出信号。若KDJ三线的死叉属于K值大于90，D值大于80，J值大于100，三线在超买区形成的死叉时，股价短期下跌的概率较高</p><blockquote><p>D线进入超买区间</p></blockquote><p>​            当D线突破80时，就是行情进入超买区间的信号。这个信号说明市场上的多方力量已经达到极度强势的状态，不过这种强势状态可能难以持续。一旦多方力量开始衰退，空方力量增强，股价就将见顶下跌，因此这是看跌卖出信号。</p><blockquote><p>J线进入超买区间</p></blockquote><p>​            当KDJ指标中的J线突破100时，就是进入了超买区间。这样的形态说明股价在短期内快速上涨，市场上的多方力量已经强势到极致。一旦多方力量盛极而衰，空方力量复苏，股价即将见顶下跌。</p><h1 id="RSI"><a href="#RSI" class="headerlink" title="RSI"></a>RSI</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/141142436">https://zhuanlan.zhihu.com/p/141142436</a></p><p>RSI(6,12,24) 范围 [0,100]</p><ul><li>80-100 极强 卖出</li><li>50-80 强 买入</li><li>20-50 弱 观望</li><li>0-20 极弱 买入</li></ul><blockquote><p>常见买入点</p></blockquote><p>RSI6向上突破RSI12时，形成<strong>金叉</strong>，是买入点</p><p>当RSI6在20以下，同时出现拐点，突破20时，是买入点</p><p>趋势线，在RSI上做出一条趋势线，当向上突破趋势线，是买入信号</p><blockquote><p>常见卖出点</p></blockquote><p>RSI6向下突破RSI12时，形成<strong>死叉</strong>，是卖出点</p><p>当RSI6在80以上，同时出现拐点，跌破80时，是卖出点</p><p>双肩顶。在高位，且形成双肩的形态，是卖出信号</p><p><strong>RSI注意事项</strong><br>RSI 6指标是一个短线技术指标，适合分析较短周期内股价的走势。在反应市场上短线的背离现象方面，RSI 6线会比较灵敏；而在反应市场上的超买超卖状况方面，KDJ指标要更加灵敏。对于一些热点股票，RSI 6波动较大，买入卖出的参考性不大</p><h1 id="OBV"><a href="#OBV" class="headerlink" title="OBV"></a>OBV</h1><p>能量潮指标 参考：<a href="https://www.sohu.com/a/140938204_110955">https://www.sohu.com/a/140938204_110955</a></p><p>一条线为MAOBV线：MAOBV线其实就是指OBV指标的30天的平均量的线</p><p>一条线为OBV线：是由近体的收盘价减去上个交易日的收盘价形成的，如果这个差是正数的话，就取正量值，如果是负数就取负量值，如果是0的话，就代表OBV线没有波动</p><p>如果MAOBV线向上弯曲，并且OBV线是正值并且上破了MAOBV线的话，就说明目前股价成交量在扩增，并且股价会上涨。相反，股价下跌的时候，OBV线会渐渐的变低，最后下破MVOBV线，呈空头趋势。</p><p>1、如果OBV指标波动情况为N字形，持续上攻的时候，投资人应该继续持股。如果OBV指标呈小N上攻，并且在某段时间内迅速的上涨，一般都意味着行情会出现反转。</p><p>2、OBV线长时间内横向运动，但是某天却快速上涨，并且突破MAOBV线，这种情况一般就代表着大行情的到来。</p><h1 id="WR"><a href="#WR" class="headerlink" title="WR"></a>WR</h1><p>威廉指标</p><p>WR指标会在0-100区间波动，其中0-20这一区间是超买区。而20这一线为超买线;80-100这一区间是超卖区，而80线为超卖线;50线为多空平衡线。</p><p>1.低于20，超买，即将见顶，应及时卖出<br>2.高于80，超卖，即将见底，应伺机买进</p><h1 id="CCI"><a href="#CCI" class="headerlink" title="CCI"></a>CCI</h1><p>参考：<a href="https://blog.csdn.net/sjpljr/article/details/70169333">https://blog.csdn.net/sjpljr/article/details/70169333</a></p><p><a href="https://zhuanlan.zhihu.com/p/80812911">https://zhuanlan.zhihu.com/p/80812911</a></p><p>CCI指标就是专门针对极端情况设计的，也就是说，在一般常态行情下，CCI指标不会发生作用，当CCI扫描到异常股价波动时，立求速战速决，胜负瞬间立即分晓，赌输了也必须立刻了结。</p><p>CCI指标上穿-100时可买入，反之跌破+100时卖出</p><p>1、做中、长线的话：首先看周线，然后结合MACD、BOLL、OBV，结合30天、60天、120天均线比较好；</p><p>2、如果是中、短线：则以日线为主，同时可以看30分钟线，再结合RSI、KDJ 、WR、结合5天、10天、30天均线，则灵活；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 股票指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知名英文</title>
      <link href="/2022/03/02/%E7%BF%BB%E8%AF%91/%E7%9F%A5%E5%90%8D%E8%8B%B1%E6%96%87/"/>
      <url>/2022/03/02/%E7%BF%BB%E8%AF%91/%E7%9F%A5%E5%90%8D%E8%8B%B1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p><code>dormant</code>:休眠的；暂时不活动的；（线程休眠）</p><p><code>erroneous use</code>:错误使用</p><p><code>in such circumstances</code>:在这种情形下</p><p><code>chaotic</code>: 混乱的</p><p><code>incurring</code>:招致</p><p><code>derived from</code>:来源于</p>]]></content>
      
      
      
        <tags>
            
            <tag> 词汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="/2022/02/25/%E6%BA%90%E7%A0%81/jdk%E6%BA%90%E7%A0%81/HashMap/"/>
      <url>/2022/02/25/%E6%BA%90%E7%A0%81/jdk%E6%BA%90%E7%A0%81/HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h1><p>基于哈希表实现，支持key为null，value为null，与HashTable类似（区别就是hashMap是unsynchronized的和支持null值，不保证元素的顺序及其顺序固定。如果假定hash函数能够将所有元素均匀地分布在所有bucket中，那么<code>get</code>和<code>put</code>基础操作的时间消耗将为常数项时间O(1),性能最大化。在该集合上的迭代性能与其容量和键值对的数量成正比，因此若要保证较高的迭代性能，初始化时不要将初始容量设置的过大（同理也不要将负载因子设置的太小）。HashMap的性能主要受两个属性影响：</p><p><code>initial capacity</code> 初始容量(创建哈希表时的bucket数量)</p><p><code>load factor</code> 负载因子(度量哈希表在下一次扩容前能装多满)</p><p>当在哈希表中的键值对数量超过了 当前容量和负载因子之积，当前哈希表重新进行哈希映射（即内部已存数据会被重构）</p><p>通常 负载因子默认为0.75，是时间和空间的一个较好权衡；太高确实可以减少空间开销但是会增加检索消耗（影响HashMap的大部分操作如<code>get</code>和<code>put</code>）；在设置HashMap的初始容量时应当考虑预期的键值对数量和负载因子，这样可以最小化扩容次数，即减少rehash次数。如果初始容量大于最大键值对除以负载因子，则不会发送<code>rehash</code>（因为不会发生扩容）</p><p>当需要存储较多键值对时，初始时就设置充足的容量比起让hashMap自动扩容要好得多。注意当使用相同<code>hashCode()</code>的key会降低哈希表的性能，为了改善这一影响，建议key实现<code>Comparable</code>接口（todo 具体原因待查）。</p><p>其实现不是同步的，当多个线程对其进行结构性修改时 必须在外部进行同步处理：如<code>Collections.synchronizedMap</code>,最后在创建时就进行该操作</p><p><code>Map m = Collections.synchronizedMap(new HashMap(...));</code></p><p>其迭代器是<strong>快速失败</strong>的：当迭代器创建之后，在该map上的任何结构性修改处理迭代器自身的<code>remove</code>方法都会抛出<code>ConcurrentModificationException</code>;当存在非同步的并发修改时，不能保证迭代器的快速失败行为， 快速失败迭代器 是尽最大努力抛出<code>ConcurrentModificationException</code>异常。 迭代器的快速失败行为应该只被用于检测bug</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认初始容量为16 必须是2的倍数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 最大容量限制 2^30  在java中1&lt;&lt;31已经是负数了</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 默认的负载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 树化链表(转化为红黑树)的节点数阈值（一个bucket内的节点数）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 树退化的节点数阈值（一个bucket内的节点数）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 发升树化的最小节点总数（否则应该是扩容减少冲突而不是树化）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>bin可以理解为表的槽</p><h2 id="基础bin节点内部类（普通节点）"><a href="#基础bin节点内部类（普通节点）" class="headerlink" title="基础bin节点内部类（普通节点）"></a>基础bin节点内部类（普通节点）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="树型bin节点内部类（红黑树待研究）"><a href="#树型bin节点内部类（红黑树待研究）" class="headerlink" title="树型bin节点内部类（红黑树待研究）"></a>树型bin节点内部类（红黑树待研究）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  &#x2F;&#x2F; red-black tree links</span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    &#x2F;&#x2F; needed to unlink next upon deletion</span><br><span class="line">        boolean red;</span><br><span class="line">        TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            super(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Returns root of tree containing this node.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final TreeNode&lt;K,V&gt; root() &#123;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; r &#x3D; this, p;;) &#123;</span><br><span class="line">                if ((p &#x3D; r.parent) &#x3D;&#x3D; null)</span><br><span class="line">                    return r;</span><br><span class="line">                r &#x3D; p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Ensures that the given root is the first node of its bin.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        static &lt;K,V&gt; void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) &#123;</span><br><span class="line">            int n;</span><br><span class="line">            if (root !&#x3D; null &amp;&amp; tab !&#x3D; null &amp;&amp; (n &#x3D; tab.length) &gt; 0) &#123;</span><br><span class="line">                int index &#x3D; (n - 1) &amp; root.hash;</span><br><span class="line">                TreeNode&lt;K,V&gt; first &#x3D; (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">                if (root !&#x3D; first) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; rn;</span><br><span class="line">                    tab[index] &#x3D; root;</span><br><span class="line">                    TreeNode&lt;K,V&gt; rp &#x3D; root.prev;</span><br><span class="line">                    if ((rn &#x3D; root.next) !&#x3D; null)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)rn).prev &#x3D; rp;</span><br><span class="line">                    if (rp !&#x3D; null)</span><br><span class="line">                        rp.next &#x3D; rn;</span><br><span class="line">                    if (first !&#x3D; null)</span><br><span class="line">                        first.prev &#x3D; root;</span><br><span class="line">                    root.next &#x3D; first;</span><br><span class="line">                    root.prev &#x3D; null;</span><br><span class="line">                &#125;</span><br><span class="line">                assert checkInvariants(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Finds the node starting at root p with the given hash and key.</span><br><span class="line">         * The kc argument caches comparableClassFor(key) upon first use</span><br><span class="line">         * comparing keys.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final TreeNode&lt;K,V&gt; find(int h, Object k, Class&lt;?&gt; kc) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p &#x3D; this;</span><br><span class="line">            do &#123;</span><br><span class="line">                int ph, dir; K pk;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl &#x3D; p.left, pr &#x3D; p.right, q;</span><br><span class="line">                if ((ph &#x3D; p.hash) &gt; h)</span><br><span class="line">                    p &#x3D; pl;</span><br><span class="line">                else if (ph &lt; h)</span><br><span class="line">                    p &#x3D; pr;</span><br><span class="line">                else if ((pk &#x3D; p.key) &#x3D;&#x3D; k || (k !&#x3D; null &amp;&amp; k.equals(pk)))</span><br><span class="line">                    return p;</span><br><span class="line">                else if (pl &#x3D;&#x3D; null)</span><br><span class="line">                    p &#x3D; pr;</span><br><span class="line">                else if (pr &#x3D;&#x3D; null)</span><br><span class="line">                    p &#x3D; pl;</span><br><span class="line">                else if ((kc !&#x3D; null ||</span><br><span class="line">                          (kc &#x3D; comparableClassFor(k)) !&#x3D; null) &amp;&amp;</span><br><span class="line">                         (dir &#x3D; compareComparables(kc, k, pk)) !&#x3D; 0)</span><br><span class="line">                    p &#x3D; (dir &lt; 0) ? pl : pr;</span><br><span class="line">                else if ((q &#x3D; pr.find(h, k, kc)) !&#x3D; null)</span><br><span class="line">                    return q;</span><br><span class="line">                else</span><br><span class="line">                    p &#x3D; pl;</span><br><span class="line">            &#125; while (p !&#x3D; null);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Calls find for root node.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final TreeNode&lt;K,V&gt; getTreeNode(int h, Object k) &#123;</span><br><span class="line">            return ((parent !&#x3D; null) ? root() : this).find(h, k, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Tie-breaking utility for ordering insertions when equal</span><br><span class="line">         * hashCodes and non-comparable. We don&#39;t require a total</span><br><span class="line">         * order, just a consistent insertion rule to maintain</span><br><span class="line">         * equivalence across rebalancings. Tie-breaking further than</span><br><span class="line">         * necessary simplifies testing a bit.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        static int tieBreakOrder(Object a, Object b) &#123;</span><br><span class="line">            int d;</span><br><span class="line">            if (a &#x3D;&#x3D; null || b &#x3D;&#x3D; null ||</span><br><span class="line">                (d &#x3D; a.getClass().getName().</span><br><span class="line">                 compareTo(b.getClass().getName())) &#x3D;&#x3D; 0)</span><br><span class="line">                d &#x3D; (System.identityHashCode(a) &lt;&#x3D; System.identityHashCode(b) ?</span><br><span class="line">                     -1 : 1);</span><br><span class="line">            return d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Forms tree of the nodes linked from this node.</span><br><span class="line">         * @return root of tree</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final void treeify(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; root &#x3D; null;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; x &#x3D; this, next; x !&#x3D; null; x &#x3D; next) &#123;</span><br><span class="line">                next &#x3D; (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left &#x3D; x.right &#x3D; null;</span><br><span class="line">                if (root &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    x.parent &#x3D; null;</span><br><span class="line">                    x.red &#x3D; false;</span><br><span class="line">                    root &#x3D; x;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    K k &#x3D; x.key;</span><br><span class="line">                    int h &#x3D; x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc &#x3D; null;</span><br><span class="line">                    for (TreeNode&lt;K,V&gt; p &#x3D; root;;) &#123;</span><br><span class="line">                        int dir, ph;</span><br><span class="line">                        K pk &#x3D; p.key;</span><br><span class="line">                        if ((ph &#x3D; p.hash) &gt; h)</span><br><span class="line">                            dir &#x3D; -1;</span><br><span class="line">                        else if (ph &lt; h)</span><br><span class="line">                            dir &#x3D; 1;</span><br><span class="line">                        else if ((kc &#x3D;&#x3D; null &amp;&amp;</span><br><span class="line">                                  (kc &#x3D; comparableClassFor(k)) &#x3D;&#x3D; null) ||</span><br><span class="line">                                 (dir &#x3D; compareComparables(kc, k, pk)) &#x3D;&#x3D; 0)</span><br><span class="line">                            dir &#x3D; tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                        TreeNode&lt;K,V&gt; xp &#x3D; p;</span><br><span class="line">                        if ((p &#x3D; (dir &lt;&#x3D; 0) ? p.left : p.right) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                            x.parent &#x3D; xp;</span><br><span class="line">                            if (dir &lt;&#x3D; 0)</span><br><span class="line">                                xp.left &#x3D; x;</span><br><span class="line">                            else</span><br><span class="line">                                xp.right &#x3D; x;</span><br><span class="line">                            root &#x3D; balanceInsertion(root, x);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveRootToFront(tab, root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Returns a list of non-TreeNodes replacing those linked from</span><br><span class="line">         * this node.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final Node&lt;K,V&gt; untreeify(HashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            Node&lt;K,V&gt; hd &#x3D; null, tl &#x3D; null;</span><br><span class="line">            for (Node&lt;K,V&gt; q &#x3D; this; q !&#x3D; null; q &#x3D; q.next) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p &#x3D; map.replacementNode(q, null);</span><br><span class="line">                if (tl &#x3D;&#x3D; null)</span><br><span class="line">                    hd &#x3D; p;</span><br><span class="line">                else</span><br><span class="line">                    tl.next &#x3D; p;</span><br><span class="line">                tl &#x3D; p;</span><br><span class="line">            &#125;</span><br><span class="line">            return hd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Tree version of putVal.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final TreeNode&lt;K,V&gt; putTreeVal(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span><br><span class="line">                                       int h, K k, V v) &#123;</span><br><span class="line">            Class&lt;?&gt; kc &#x3D; null;</span><br><span class="line">            boolean searched &#x3D; false;</span><br><span class="line">            TreeNode&lt;K,V&gt; root &#x3D; (parent !&#x3D; null) ? root() : this;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; p &#x3D; root;;) &#123;</span><br><span class="line">                int dir, ph; K pk;</span><br><span class="line">                if ((ph &#x3D; p.hash) &gt; h)</span><br><span class="line">                    dir &#x3D; -1;</span><br><span class="line">                else if (ph &lt; h)</span><br><span class="line">                    dir &#x3D; 1;</span><br><span class="line">                else if ((pk &#x3D; p.key) &#x3D;&#x3D; k || (k !&#x3D; null &amp;&amp; k.equals(pk)))</span><br><span class="line">                    return p;</span><br><span class="line">                else if ((kc &#x3D;&#x3D; null &amp;&amp;</span><br><span class="line">                          (kc &#x3D; comparableClassFor(k)) &#x3D;&#x3D; null) ||</span><br><span class="line">                         (dir &#x3D; compareComparables(kc, k, pk)) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    if (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched &#x3D; true;</span><br><span class="line">                        if (((ch &#x3D; p.left) !&#x3D; null &amp;&amp;</span><br><span class="line">                             (q &#x3D; ch.find(h, k, kc)) !&#x3D; null) ||</span><br><span class="line">                            ((ch &#x3D; p.right) !&#x3D; null &amp;&amp;</span><br><span class="line">                             (q &#x3D; ch.find(h, k, kc)) !&#x3D; null))</span><br><span class="line">                            return q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir &#x3D; tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp &#x3D; p;</span><br><span class="line">                if ((p &#x3D; (dir &lt;&#x3D; 0) ? p.left : p.right) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; xpn &#x3D; xp.next;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x &#x3D; map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    if (dir &lt;&#x3D; 0)</span><br><span class="line">                        xp.left &#x3D; x;</span><br><span class="line">                    else</span><br><span class="line">                        xp.right &#x3D; x;</span><br><span class="line">                    xp.next &#x3D; x;</span><br><span class="line">                    x.parent &#x3D; x.prev &#x3D; xp;</span><br><span class="line">                    if (xpn !&#x3D; null)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)xpn).prev &#x3D; x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Removes the given node, that must be present before this call.</span><br><span class="line">         * This is messier than typical red-black deletion code because we</span><br><span class="line">         * cannot swap the contents of an interior node with a leaf</span><br><span class="line">         * successor that is pinned by &quot;next&quot; pointers that are accessible</span><br><span class="line">         * independently during traversal. So instead we swap the tree</span><br><span class="line">         * linkages. If the current tree appears to have too few nodes,</span><br><span class="line">         * the bin is converted back to a plain bin. (The test triggers</span><br><span class="line">         * somewhere between 2 and 6 nodes, depending on tree structure).</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final void removeTreeNode(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span><br><span class="line">                                  boolean movable) &#123;</span><br><span class="line">            int n;</span><br><span class="line">            if (tab &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)</span><br><span class="line">                return;</span><br><span class="line">            int index &#x3D; (n - 1) &amp; hash;</span><br><span class="line">            TreeNode&lt;K,V&gt; first &#x3D; (TreeNode&lt;K,V&gt;)tab[index], root &#x3D; first, rl;</span><br><span class="line">            TreeNode&lt;K,V&gt; succ &#x3D; (TreeNode&lt;K,V&gt;)next, pred &#x3D; prev;</span><br><span class="line">            if (pred &#x3D;&#x3D; null)</span><br><span class="line">                tab[index] &#x3D; first &#x3D; succ;</span><br><span class="line">            else</span><br><span class="line">                pred.next &#x3D; succ;</span><br><span class="line">            if (succ !&#x3D; null)</span><br><span class="line">                succ.prev &#x3D; pred;</span><br><span class="line">            if (first &#x3D;&#x3D; null)</span><br><span class="line">                return;</span><br><span class="line">            if (root.parent !&#x3D; null)</span><br><span class="line">                root &#x3D; root.root();</span><br><span class="line">            if (root &#x3D;&#x3D; null || root.right &#x3D;&#x3D; null ||</span><br><span class="line">                (rl &#x3D; root.left) &#x3D;&#x3D; null || rl.left &#x3D;&#x3D; null) &#123;</span><br><span class="line">                tab[index] &#x3D; first.untreeify(map);  &#x2F;&#x2F; too small</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode&lt;K,V&gt; p &#x3D; this, pl &#x3D; left, pr &#x3D; right, replacement;</span><br><span class="line">            if (pl !&#x3D; null &amp;&amp; pr !&#x3D; null) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; s &#x3D; pr, sl;</span><br><span class="line">                while ((sl &#x3D; s.left) !&#x3D; null) &#x2F;&#x2F; find successor</span><br><span class="line">                    s &#x3D; sl;</span><br><span class="line">                boolean c &#x3D; s.red; s.red &#x3D; p.red; p.red &#x3D; c; &#x2F;&#x2F; swap colors</span><br><span class="line">                TreeNode&lt;K,V&gt; sr &#x3D; s.right;</span><br><span class="line">                TreeNode&lt;K,V&gt; pp &#x3D; p.parent;</span><br><span class="line">                if (s &#x3D;&#x3D; pr) &#123; &#x2F;&#x2F; p was s&#39;s direct parent</span><br><span class="line">                    p.parent &#x3D; s;</span><br><span class="line">                    s.right &#x3D; p;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; sp &#x3D; s.parent;</span><br><span class="line">                    if ((p.parent &#x3D; sp) !&#x3D; null) &#123;</span><br><span class="line">                        if (s &#x3D;&#x3D; sp.left)</span><br><span class="line">                            sp.left &#x3D; p;</span><br><span class="line">                        else</span><br><span class="line">                            sp.right &#x3D; p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if ((s.right &#x3D; pr) !&#x3D; null)</span><br><span class="line">                        pr.parent &#x3D; s;</span><br><span class="line">                &#125;</span><br><span class="line">                p.left &#x3D; null;</span><br><span class="line">                if ((p.right &#x3D; sr) !&#x3D; null)</span><br><span class="line">                    sr.parent &#x3D; p;</span><br><span class="line">                if ((s.left &#x3D; pl) !&#x3D; null)</span><br><span class="line">                    pl.parent &#x3D; s;</span><br><span class="line">                if ((s.parent &#x3D; pp) &#x3D;&#x3D; null)</span><br><span class="line">                    root &#x3D; s;</span><br><span class="line">                else if (p &#x3D;&#x3D; pp.left)</span><br><span class="line">                    pp.left &#x3D; s;</span><br><span class="line">                else</span><br><span class="line">                    pp.right &#x3D; s;</span><br><span class="line">                if (sr !&#x3D; null)</span><br><span class="line">                    replacement &#x3D; sr;</span><br><span class="line">                else</span><br><span class="line">                    replacement &#x3D; p;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (pl !&#x3D; null)</span><br><span class="line">                replacement &#x3D; pl;</span><br><span class="line">            else if (pr !&#x3D; null)</span><br><span class="line">                replacement &#x3D; pr;</span><br><span class="line">            else</span><br><span class="line">                replacement &#x3D; p;</span><br><span class="line">            if (replacement !&#x3D; p) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; pp &#x3D; replacement.parent &#x3D; p.parent;</span><br><span class="line">                if (pp &#x3D;&#x3D; null)</span><br><span class="line">                    root &#x3D; replacement;</span><br><span class="line">                else if (p &#x3D;&#x3D; pp.left)</span><br><span class="line">                    pp.left &#x3D; replacement;</span><br><span class="line">                else</span><br><span class="line">                    pp.right &#x3D; replacement;</span><br><span class="line">                p.left &#x3D; p.right &#x3D; p.parent &#x3D; null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode&lt;K,V&gt; r &#x3D; p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">            if (replacement &#x3D;&#x3D; p) &#123;  &#x2F;&#x2F; detach</span><br><span class="line">                TreeNode&lt;K,V&gt; pp &#x3D; p.parent;</span><br><span class="line">                p.parent &#x3D; null;</span><br><span class="line">                if (pp !&#x3D; null) &#123;</span><br><span class="line">                    if (p &#x3D;&#x3D; pp.left)</span><br><span class="line">                        pp.left &#x3D; null;</span><br><span class="line">                    else if (p &#x3D;&#x3D; pp.right)</span><br><span class="line">                        pp.right &#x3D; null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (movable)</span><br><span class="line">                moveRootToFront(tab, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Splits nodes in a tree bin into lower and upper tree bins,</span><br><span class="line">         * or untreeifies if now too small. Called only from resize;</span><br><span class="line">         * see above discussion about split bits and indices.</span><br><span class="line">         *</span><br><span class="line">         * @param map the map</span><br><span class="line">         * @param tab the table for recording bin heads</span><br><span class="line">         * @param index the index of the table being split</span><br><span class="line">         * @param bit the bit of hash to split on</span><br><span class="line">         *&#x2F;</span><br><span class="line">        final void split(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int index, int bit) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; b &#x3D; this;</span><br><span class="line">            &#x2F;&#x2F; Relink into lo and hi lists, preserving order</span><br><span class="line">            TreeNode&lt;K,V&gt; loHead &#x3D; null, loTail &#x3D; null;</span><br><span class="line">            TreeNode&lt;K,V&gt; hiHead &#x3D; null, hiTail &#x3D; null;</span><br><span class="line">            int lc &#x3D; 0, hc &#x3D; 0;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; e &#x3D; b, next; e !&#x3D; null; e &#x3D; next) &#123;</span><br><span class="line">                next &#x3D; (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">                e.next &#x3D; null;</span><br><span class="line">                if ((e.hash &amp; bit) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    if ((e.prev &#x3D; loTail) &#x3D;&#x3D; null)</span><br><span class="line">                        loHead &#x3D; e;</span><br><span class="line">                    else</span><br><span class="line">                        loTail.next &#x3D; e;</span><br><span class="line">                    loTail &#x3D; e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    if ((e.prev &#x3D; hiTail) &#x3D;&#x3D; null)</span><br><span class="line">                        hiHead &#x3D; e;</span><br><span class="line">                    else</span><br><span class="line">                        hiTail.next &#x3D; e;</span><br><span class="line">                    hiTail &#x3D; e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (loHead !&#x3D; null) &#123;</span><br><span class="line">                if (lc &lt;&#x3D; UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] &#x3D; loHead.untreeify(map);</span><br><span class="line">                else &#123;</span><br><span class="line">                    tab[index] &#x3D; loHead;</span><br><span class="line">                    if (hiHead !&#x3D; null) &#x2F;&#x2F; (else is already treeified)</span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (hiHead !&#x3D; null) &#123;</span><br><span class="line">                if (hc &lt;&#x3D; UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] &#x3D; hiHead.untreeify(map);</span><br><span class="line">                else &#123;</span><br><span class="line">                    tab[index + bit] &#x3D; hiHead;</span><br><span class="line">                    if (loHead !&#x3D; null)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;* ------------------------------------------------------------ *&#x2F;</span><br><span class="line">        &#x2F;&#x2F; Red-black tree methods, all adapted from CLR</span><br><span class="line"></span><br><span class="line">        static &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateLeft(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                              TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">            if (p !&#x3D; null &amp;&amp; (r &#x3D; p.right) !&#x3D; null) &#123;</span><br><span class="line">                if ((rl &#x3D; p.right &#x3D; r.left) !&#x3D; null)</span><br><span class="line">                    rl.parent &#x3D; p;</span><br><span class="line">                if ((pp &#x3D; r.parent &#x3D; p.parent) &#x3D;&#x3D; null)</span><br><span class="line">                    (root &#x3D; r).red &#x3D; false;</span><br><span class="line">                else if (pp.left &#x3D;&#x3D; p)</span><br><span class="line">                    pp.left &#x3D; r;</span><br><span class="line">                else</span><br><span class="line">                    pp.right &#x3D; r;</span><br><span class="line">                r.left &#x3D; p;</span><br><span class="line">                p.parent &#x3D; r;</span><br><span class="line">            &#125;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateRight(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                               TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            if (p !&#x3D; null &amp;&amp; (l &#x3D; p.left) !&#x3D; null) &#123;</span><br><span class="line">                if ((lr &#x3D; p.left &#x3D; l.right) !&#x3D; null)</span><br><span class="line">                    lr.parent &#x3D; p;</span><br><span class="line">                if ((pp &#x3D; l.parent &#x3D; p.parent) &#x3D;&#x3D; null)</span><br><span class="line">                    (root &#x3D; l).red &#x3D; false;</span><br><span class="line">                else if (pp.right &#x3D;&#x3D; p)</span><br><span class="line">                    pp.right &#x3D; l;</span><br><span class="line">                else</span><br><span class="line">                    pp.left &#x3D; l;</span><br><span class="line">                l.right &#x3D; p;</span><br><span class="line">                p.parent &#x3D; l;</span><br><span class="line">            &#125;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                                    TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">            x.red &#x3D; true;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                if ((xp &#x3D; x.parent) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    x.red &#x3D; false;</span><br><span class="line">                    return x;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (!xp.red || (xpp &#x3D; xp.parent) &#x3D;&#x3D; null)</span><br><span class="line">                    return root;</span><br><span class="line">                if (xp &#x3D;&#x3D; (xppl &#x3D; xpp.left)) &#123;</span><br><span class="line">                    if ((xppr &#x3D; xpp.right) !&#x3D; null &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.red &#x3D; false;</span><br><span class="line">                        xp.red &#x3D; false;</span><br><span class="line">                        xpp.red &#x3D; true;</span><br><span class="line">                        x &#x3D; xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (x &#x3D;&#x3D; xp.right) &#123;</span><br><span class="line">                            root &#x3D; rotateLeft(root, x &#x3D; xp);</span><br><span class="line">                            xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (xp !&#x3D; null) &#123;</span><br><span class="line">                            xp.red &#x3D; false;</span><br><span class="line">                            if (xpp !&#x3D; null) &#123;</span><br><span class="line">                                xpp.red &#x3D; true;</span><br><span class="line">                                root &#x3D; rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    if (xppl !&#x3D; null &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.red &#x3D; false;</span><br><span class="line">                        xp.red &#x3D; false;</span><br><span class="line">                        xpp.red &#x3D; true;</span><br><span class="line">                        x &#x3D; xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (x &#x3D;&#x3D; xp.left) &#123;</span><br><span class="line">                            root &#x3D; rotateRight(root, x &#x3D; xp);</span><br><span class="line">                            xpp &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (xp !&#x3D; null) &#123;</span><br><span class="line">                            xp.red &#x3D; false;</span><br><span class="line">                            if (xpp !&#x3D; null) &#123;</span><br><span class="line">                                xpp.red &#x3D; true;</span><br><span class="line">                                root &#x3D; rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceDeletion(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                                   TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">                if (x &#x3D;&#x3D; null || x &#x3D;&#x3D; root)</span><br><span class="line">                    return root;</span><br><span class="line">                else if ((xp &#x3D; x.parent) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    x.red &#x3D; false;</span><br><span class="line">                    return x;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (x.red) &#123;</span><br><span class="line">                    x.red &#x3D; false;</span><br><span class="line">                    return root;</span><br><span class="line">                &#125;</span><br><span class="line">                else if ((xpl &#x3D; xp.left) &#x3D;&#x3D; x) &#123;</span><br><span class="line">                    if ((xpr &#x3D; xp.right) !&#x3D; null &amp;&amp; xpr.red) &#123;</span><br><span class="line">                        xpr.red &#x3D; false;</span><br><span class="line">                        xp.red &#x3D; true;</span><br><span class="line">                        root &#x3D; rotateLeft(root, xp);</span><br><span class="line">                        xpr &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (xpr &#x3D;&#x3D; null)</span><br><span class="line">                        x &#x3D; xp;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl &#x3D; xpr.left, sr &#x3D; xpr.right;</span><br><span class="line">                        if ((sr &#x3D;&#x3D; null || !sr.red) &amp;&amp;</span><br><span class="line">                            (sl &#x3D;&#x3D; null || !sl.red)) &#123;</span><br><span class="line">                            xpr.red &#x3D; true;</span><br><span class="line">                            x &#x3D; xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (sr &#x3D;&#x3D; null || !sr.red) &#123;</span><br><span class="line">                                if (sl !&#x3D; null)</span><br><span class="line">                                    sl.red &#x3D; false;</span><br><span class="line">                                xpr.red &#x3D; true;</span><br><span class="line">                                root &#x3D; rotateRight(root, xpr);</span><br><span class="line">                                xpr &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ?</span><br><span class="line">                                    null : xp.right;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if (xpr !&#x3D; null) &#123;</span><br><span class="line">                                xpr.red &#x3D; (xp &#x3D;&#x3D; null) ? false : xp.red;</span><br><span class="line">                                if ((sr &#x3D; xpr.right) !&#x3D; null)</span><br><span class="line">                                    sr.red &#x3D; false;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if (xp !&#x3D; null) &#123;</span><br><span class="line">                                xp.red &#x3D; false;</span><br><span class="line">                                root &#x3D; rotateLeft(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x &#x3D; root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123; &#x2F;&#x2F; symmetric</span><br><span class="line">                    if (xpl !&#x3D; null &amp;&amp; xpl.red) &#123;</span><br><span class="line">                        xpl.red &#x3D; false;</span><br><span class="line">                        xp.red &#x3D; true;</span><br><span class="line">                        root &#x3D; rotateRight(root, xp);</span><br><span class="line">                        xpl &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ? null : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (xpl &#x3D;&#x3D; null)</span><br><span class="line">                        x &#x3D; xp;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl &#x3D; xpl.left, sr &#x3D; xpl.right;</span><br><span class="line">                        if ((sl &#x3D;&#x3D; null || !sl.red) &amp;&amp;</span><br><span class="line">                            (sr &#x3D;&#x3D; null || !sr.red)) &#123;</span><br><span class="line">                            xpl.red &#x3D; true;</span><br><span class="line">                            x &#x3D; xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (sl &#x3D;&#x3D; null || !sl.red) &#123;</span><br><span class="line">                                if (sr !&#x3D; null)</span><br><span class="line">                                    sr.red &#x3D; false;</span><br><span class="line">                                xpl.red &#x3D; true;</span><br><span class="line">                                root &#x3D; rotateLeft(root, xpl);</span><br><span class="line">                                xpl &#x3D; (xp &#x3D; x.parent) &#x3D;&#x3D; null ?</span><br><span class="line">                                    null : xp.left;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if (xpl !&#x3D; null) &#123;</span><br><span class="line">                                xpl.red &#x3D; (xp &#x3D;&#x3D; null) ? false : xp.red;</span><br><span class="line">                                if ((sl &#x3D; xpl.left) !&#x3D; null)</span><br><span class="line">                                    sl.red &#x3D; false;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if (xp !&#x3D; null) &#123;</span><br><span class="line">                                xp.red &#x3D; false;</span><br><span class="line">                                root &#x3D; rotateRight(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x &#x3D; root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Recursive invariant check</span><br><span class="line">         *&#x2F;</span><br><span class="line">        static &lt;K,V&gt; boolean checkInvariants(TreeNode&lt;K,V&gt; t) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; tp &#x3D; t.parent, tl &#x3D; t.left, tr &#x3D; t.right,</span><br><span class="line">                tb &#x3D; t.prev, tn &#x3D; (TreeNode&lt;K,V&gt;)t.next;</span><br><span class="line">            if (tb !&#x3D; null &amp;&amp; tb.next !&#x3D; t)</span><br><span class="line">                return false;</span><br><span class="line">            if (tn !&#x3D; null &amp;&amp; tn.prev !&#x3D; t)</span><br><span class="line">                return false;</span><br><span class="line">            if (tp !&#x3D; null &amp;&amp; t !&#x3D; tp.left &amp;&amp; t !&#x3D; tp.right)</span><br><span class="line">                return false;</span><br><span class="line">            if (tl !&#x3D; null &amp;&amp; (tl.parent !&#x3D; t || tl.hash &gt; t.hash))</span><br><span class="line">                return false;</span><br><span class="line">            if (tr !&#x3D; null &amp;&amp; (tr.parent !&#x3D; t || tr.hash &lt; t.hash))</span><br><span class="line">                return false;</span><br><span class="line">            if (t.red &amp;&amp; tl !&#x3D; null &amp;&amp; tl.red &amp;&amp; tr !&#x3D; null &amp;&amp; tr.red)</span><br><span class="line">                return false;</span><br><span class="line">            if (tl !&#x3D; null &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                return false;</span><br><span class="line">            if (tr !&#x3D; null &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                return false;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="KeySet-键的自定义Set集合"><a href="#KeySet-键的自定义Set集合" class="headerlink" title="KeySet(键的自定义Set集合)"></a>KeySet(键的自定义Set集合)</h2><p>主要用于keySet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="comment">// 内部类调用外部类的方法，这里HashMap.this是为了与AbstractCollection中的clear实现区分</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</span><br><span class="line">        <span class="comment">// 这个迭代器很关键 将其与map的元素关联起来了</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(); &#125;</span><br><span class="line">        <span class="comment">// 内部类调用外部类的方法 可以直接调</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分割迭代器 为了并行遍历元素而设计的一个迭代器(具体待深入研究)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据传入的行为进行迭代操作 会检验modCount</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Values-值的自定义集合"><a href="#Values-值的自定义集合" class="headerlink" title="Values(值的自定义集合)"></a>Values(值的自定义集合)</h2><p>类似于KeySet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> containsValue(o); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueSpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="KeyIterator-键的迭代器定义"><a href="#KeyIterator-键的迭代器定义" class="headerlink" title="KeyIterator(键的迭代器定义)"></a>KeyIterator(键的迭代器定义)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().key; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ValueIterator-值的迭代器定义"><a href="#ValueIterator-值的迭代器定义" class="headerlink" title="ValueIterator(值的迭代器定义)"></a>ValueIterator(值的迭代器定义)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().value; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="EntryIterator-键值对的迭代器定义"><a href="#EntryIterator-键值对的迭代器定义" class="headerlink" title="EntryIterator(键值对的迭代器定义)"></a>EntryIterator(键值对的迭代器定义)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h2><blockquote><p>计算哈希值</p></blockquote><p>赋值给h，然后在h的基础上向右位移16位得到h16,最后通过异或计算h与h16的结果就是最终key的hash值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断是否有实现Comparable接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;  <span class="comment">// 判断是否实现了Comparable接口</span></span><br><span class="line">            Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String.class) </span><br><span class="line">                <span class="keyword">return</span> c;   <span class="comment">// 如果是String类型，直接返回String.class</span></span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;  <span class="comment">// 判断是否有直接实现的接口</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;   <span class="comment">// 遍历直接实现的接口</span></span><br><span class="line">                    <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;   <span class="comment">// 该接口实现了泛型</span></span><br><span class="line">                        ((p = (ParameterizedType)t).getRawType() == <span class="comment">// 获取接口不带参数部分的类型对象</span></span><br><span class="line">                         Comparable.class) &amp;&amp;   //  该类型是Comparable</span><br><span class="line">                        (as = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;    <span class="comment">// 获取泛型参数数组</span></span><br><span class="line">                        as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c)   <span class="comment">// 只有一个泛型参数，且该实现类型是该类型本身</span></span><br><span class="line">                        <span class="keyword">return</span> c;   <span class="comment">// 返回该类型</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解读参考：<a href="https://blog.csdn.net/qpzkobe/article/details/79533237">https://blog.csdn.net/qpzkobe/article/details/79533237</a></p><blockquote><p>比较</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 如果x所属的类是kc，返回k.compareTo(x)的比较结果</span></span><br><span class="line"><span class="comment">* 如果x为空，或者其所属的类不是kc，返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span> <span class="comment">// for cast to Comparable</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>容量标准化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将传进来的参数n转变为2的n次方的数值</span></span><br><span class="line"><span class="comment"> * 返回大于输入参数且最近的2的整数次幂的数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>; <span class="comment">// 该算法让最高位的1后面的位全变为1</span></span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于 &lt;&lt; 、&gt;&gt;、&gt;&gt;&gt;的解释：<a href="https://www.cnblogs.com/chuijingjing/p/9405598.html">https://www.cnblogs.com/chuijingjing/p/9405598.html</a></p><p>该函数的解读：<a href="https://www.cnblogs.com/loading4/p/6239441.html">https://www.cnblogs.com/loading4/p/6239441.html</a></p><h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 指定初始容量和负载因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 仅指定初始容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 指定map构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p>（包）表示default方法权限</p><h4 id="putMapEntries-包"><a href="#putMapEntries-包" class="headerlink" title="putMapEntries(包)"></a>putMapEntries(包)</h4><p>详细解析参考：<a href="https://blog.csdn.net/anlian523/article/details/103639094">https://blog.csdn.net/anlian523/article/details/103639094</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">// 为了后续的int转换向上取整</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 放不下时 需要先进行扩容操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                resize();</span><br><span class="line">            <span class="comment">// 逐个放入键值</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       return (e &#x3D; getNode(hash(key), key)) &#x3D;&#x3D; null ? null : e.value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="getNode-包"><a href="#getNode-包" class="headerlink" title="getNode(包)"></a>getNode(包)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="comment">// 根据hash定位到bin槽</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查这个槽的第一个元素key是否匹配</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是树型节点 表示这个槽的节点列表已经树化 通过当前树节点查找</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="comment">// 否则就是普通的链表遍历查找</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>定位依据：<a href="https://www.yht7.com/news/11148">hash &amp; ( n - 1 ) = hash % n</a>  简单就是被除数的二进制 高位直接消 低位保留</p><h4 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同key重复put val值会被覆盖</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="putVal-包"><a href="#putVal-包" class="headerlink" title="putVal(包)"></a>putVal(包)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * onlyIfAbsent 是否仅在不存在时才插入</span></span><br><span class="line"><span class="comment"> * evict 如果为false，表示表处于创建模式</span></span><br><span class="line"><span class="comment"> * 返回之前的值 不存在则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// n---map的容量</span></span><br><span class="line">        <span class="comment">// i---对应槽的索引</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">// 初始化校验</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// 对应槽为null 直接新建bin并插入</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 存在hash冲突</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 以下就是去找要插入的那个bin</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 树型bin的插入</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 尾插法插入如果达到树化阈值则对链表进行树化</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 先插</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            <span class="comment">// 根据hash树化对应槽上的节点列表 </span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 已存在映射 则视情况替换</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="comment">// 这是个空方法 在LinkedHashMap会重写 这里为啥调用一下 暂不明天</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是替换 则就是新增一个bin 发生结构性修改</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 判断是否需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 也是空方法 在LinkedHashMap中才会用</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="resize-包"><a href="#resize-包" class="headerlink" title="resize(包)"></a>resize(包)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重新规整表格 一般初始化时 或者 扩容（size翻倍） 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算得出合理的newCap newThr</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 是否已无法扩容</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;<span class="comment">// 最大化实际可容纳元素个数 之后不会再扩容</span></span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 可以扩容（扩容后的size小于最大值大于等于默认值）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// 以默认配置初始化容量和阈值</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="comment">// 新建newCap大的数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123; <span class="comment">// 原表中的键值对移到新表当中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="comment">// 当前槽有节点</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 旧表槽点置空 方便gc</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">// 槽内只有一个节点情况下 直接转移到新表中的对应槽位</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">// 槽中节点为树型bin时 调用针对树型节点的调整方法</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// 转移原槽中的链表至新链表中</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// 低位节点链 &amp; N （二进制100...） </span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 高位节点链</span></span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 低位节点链 槽位不变</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 高位节点链 槽位右偏移一个原表长度</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="treeifyBin-包"><a href="#treeifyBin-包" class="headerlink" title="treeifyBin(包)"></a>treeifyBin(包)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将链表槽树化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="comment">// 达到树化的槽节点数阈值也不一定树化 还需要总容量不小于树化总容量阈值，此时选择扩容而非树化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 这里只是把链表中的节点封装成Tree型节点 还未进行树化</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 树化操作</span></span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="putAll"><a href="#putAll" class="headerlink" title="putAll"></a>putAll</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴露出来的批量put接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        putMapEntries(m, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据key移除元素 一个简单调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="removeNode-包"><a href="#removeNode-包" class="headerlink" title="removeNode(包)"></a>removeNode(包)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除节点操作 返回删除的那个节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="comment">// 存在性校验</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="comment">// 比对槽中第一个节点是不是要删除的那个节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 树型槽查找</span></span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="comment">// 单链表查找</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 根据入参条件最终判断要不要删</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="comment">// 树型节点移除</span></span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="comment">// 移除的是非树型节点且为第一个节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="comment">// 移除的是非树型节点且不是第一个节点 此时的p是指向要删除node的前一个节点</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                <span class="comment">// 空方法 在LinkedHash有用</span></span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 置空槽中元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="comment">// 结构性修改次数只加1次</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找是否有指定值 只能直接遍历的 无法利用红黑树的查找优势 即使转换为红黑树 其原链表的next关系也没有动</span></span><br><span class="line"><span class="comment">// 但是若本身已经是红黑树其next如何维护（待进一步理解）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                        (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="keySet"><a href="#keySet" class="headerlink" title="keySet"></a>keySet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回key的集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">            keySet = ks;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ks;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有个问题 这里的所有变量定义都没有涉及HashMap中的key封装成Set，那是怎么获取的HashMap中的key值 的？</p><p>是通过KeySet的重写迭代器实现关联的</p><p>keySet()方法返回一个内部引用，并指向一个内部类对象，该内部类重写了迭代器方法，当在增强for循环时才调用，并从外部类的table中取值。</p><p>Set.toString 也是通过迭代器遍历实现的，所以直接打印keySet()也是可以显示出所有键</p><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><p>分析同keySet类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">if</span> (vs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            vs = <span class="keyword">new</span> Values();</span><br><span class="line">            values = vs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h4><p>分析同keySet类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回键值对j集合</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> EntrySet()) : es;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="jdk8扩展方法"><a href="#jdk8扩展方法" class="headerlink" title="jdk8扩展方法"></a>jdk8扩展方法</h3><h4 id="getOrDefault"><a href="#getOrDefault" class="headerlink" title="getOrDefault"></a>getOrDefault</h4><p>取值，取不到返回给定的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? defaultValue : e.value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="putIfAbsent"><a href="#putIfAbsent" class="headerlink" title="putIfAbsent"></a>putIfAbsent</h4><p> map不存在对应key的映射，或者映射的value为null才进行put ，结果返回被替代的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="remove-k-v"><a href="#remove-k-v" class="headerlink" title="remove(k,v)"></a>remove(k,v)</h4><p>根据key val移除元素 均匹配才进行删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="replace-k-v-ov"><a href="#replace-k-v-ov" class="headerlink" title="replace(k,v,ov)"></a>replace(k,v,ov)</h4><p>根据key找到元素，若值不相等则进行替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e; V v;</span><br><span class="line">       <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">           ((v = e.value) == oldValue || (v != <span class="keyword">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class="line">           e.value = newValue;</span><br><span class="line">           <span class="comment">// 空方法 LinkedHashMap中有用</span></span><br><span class="line">           afterNodeAccess(e);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="replace-k-v"><a href="#replace-k-v" class="headerlink" title="replace(k,v)"></a>replace(k,v)</h4><p>根据key找到元素,直接替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           V oldValue = e.value;</span><br><span class="line">           e.value = value;</span><br><span class="line">           afterNodeAccess(e);</span><br><span class="line">           <span class="keyword">return</span> oldValue;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键值对 bin容器 Node数组</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">// 键值对的Set容器 Entry&lt;K,V&gt;set集合</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"><span class="comment">// map中键值对数量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 发生结构性修改次数 计数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"><span class="comment">// 下次resize的数量阈值=capacity*加载因子</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">// 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><blockquote><p>hashmap为什么规定容量是2的n次幂</p></blockquote><p>方便根据hash&amp;n-1定位所属槽</p><blockquote><p>hashmap中树化的阈值为什么是8</p></blockquote><p>理想情况下，在随机hashCodes下，节点频率遵循泊松分布，链表链表长度为8时，命中概率相对较低了，此时使用转化成红黑树，查询效率比较高</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的最佳实践---Redisson</title>
      <link href="/2022/02/20/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Redis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/02/20/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Redis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>单节点为例：</p><p>redis-single.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">singleServerConfig:</span></span><br><span class="line">  <span class="attr">idleConnectionTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">connectTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">retryAttempts:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">retryInterval:</span> <span class="number">1500</span></span><br><span class="line">  <span class="attr">password:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">subscriptionsPerConnection:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">clientName:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line">  <span class="attr">subscriptionConnectionMinimumIdleSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">subscriptionConnectionPoolSize:</span> <span class="number">50</span></span><br><span class="line">  <span class="attr">connectionMinimumIdleSize:</span> <span class="number">32</span></span><br><span class="line">  <span class="attr">connectionPoolSize:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">dnsMonitoringInterval:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">threads:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">nettyThreads:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">codec:</span> <span class="type">!&lt;org.redisson.codec.JsonJacksonCodec&gt;</span> &#123;&#125;</span><br><span class="line"><span class="attr">transportMode:</span> <span class="string">&quot;NIO&quot;</span></span><br></pre></td></tr></table></figure><p>bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">getSingleClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Config config = Config.fromYAML(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;config/redis-single.yml&quot;</span>).getInputStream());</span><br><span class="line">        config.useSingleServer();</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h1><blockquote><p>set缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RBucket&lt;String&gt; stringRBucket = redissonClient.getBucket(key);</span><br><span class="line">        stringRBucket.set(val);</span><br><span class="line">        stringRBucket.set(val, <span class="number">300L</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><blockquote><p>del缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RMap map = redissonClient.getMap(key);</span><br><span class="line">map.delete();</span><br></pre></td></tr></table></figure><h1 id="分布式对象"><a href="#分布式对象" class="headerlink" title="分布式对象"></a>分布式对象</h1><blockquote><p>RBinaryStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RBinaryStream stream = redissonClient.getBinaryStream(streamName);</span><br><span class="line">        OutputStream writeStream = stream.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] contentToWrite = <span class="string">&quot;hello,I am ztt&quot;</span>.getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 往redis中写入 （多次写入 会在其后附加append）</span></span><br><span class="line">            writeStream.write(contentToWrite);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        InputStream is = stream.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] readBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从redis中读出</span></span><br><span class="line">            is.read(readBuf);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(readBuf));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>RGeo</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对应key关联的地理空间成员</span></span><br><span class="line">      RGeo&lt;String&gt; geo = redissonClient.getGeo(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      <span class="comment">// 添加地理空间成员</span></span><br><span class="line">      geo.add(<span class="keyword">new</span> GeoEntry(<span class="number">13.361389</span>, <span class="number">38.115556</span>, <span class="string">&quot;Palermo&quot;</span>),</span><br><span class="line">              <span class="keyword">new</span> GeoEntry(<span class="number">15.087269</span>, <span class="number">37.502669</span>, <span class="string">&quot;Catania&quot;</span>));</span><br><span class="line">      <span class="comment">// 异步添加地理空间成员</span></span><br><span class="line">      geo.addAsync(<span class="number">37.618423</span>, <span class="number">55.751244</span>, <span class="string">&quot;Moscow&quot;</span>);</span><br><span class="line">      <span class="comment">// 两个成员间的距离</span></span><br><span class="line">      Double distance = geo.dist(<span class="string">&quot;Palermo&quot;</span>, <span class="string">&quot;Catania&quot;</span>, GeoUnit.METERS);</span><br><span class="line">      <span class="comment">// 异步哈希</span></span><br><span class="line">      geo.hashAsync(<span class="string">&quot;Palermo&quot;</span>, <span class="string">&quot;Catania&quot;</span>);</span><br><span class="line">      <span class="comment">// 获取指定成员的地理空间映射</span></span><br><span class="line">      Map&lt;String, GeoPosition&gt; positions = geo.pos(<span class="string">&quot;test2&quot;</span>, <span class="string">&quot;Palermo&quot;</span>, <span class="string">&quot;test3&quot;</span>, <span class="string">&quot;Catania&quot;</span>, <span class="string">&quot;test1&quot;</span>);</span><br><span class="line">      <span class="comment">// 指定位置的指定半径范围内的地理空间成员</span></span><br><span class="line">      List&lt;String&gt; cities = geo.radius(<span class="number">15</span>, <span class="number">37</span>, <span class="number">200</span>, GeoUnit.KILOMETERS);</span><br><span class="line">      <span class="comment">// 指定位置的指定半径范围内的地理空间成员映射</span></span><br><span class="line">      Map&lt;String, GeoPosition&gt; citiesWithPositions = geo.radiusWithPosition(<span class="number">15</span>, <span class="number">37</span>, <span class="number">200</span>, GeoUnit.KILOMETERS);</span><br></pre></td></tr></table></figure><blockquote><p>RAtomicLong</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RAtomicLong rAtomicLong = redissonClient.getAtomicLong(<span class="string">&quot;long-key&quot;</span>);</span><br><span class="line">        rAtomicLong.set(<span class="number">123L</span>);</span><br><span class="line">        rAtomicLong.incrementAndGet();</span><br><span class="line">        System.out.println(rAtomicLong.get());</span><br></pre></td></tr></table></figure><blockquote><p>RTopic</p></blockquote><p>话题（订阅分发） 与MQ的在该功能上的<a href="https://www.cnblogs.com/dengguangxue/p/11537466.html"><em>对比</em></a></p><p>可用于实现及时性，且可靠性低的功能</p><p>订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optForSetTopic</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        RTopic&lt;String&gt; rTopic = redissonClient.getTopic(topic);</span><br><span class="line">        rTopic.addListener((channel, msg) -&gt;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;监听到主题：%s,消息：%s&quot;</span>, topic, msg)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optForPubTopic</span><span class="params">(String topic, String msg)</span> </span>&#123;</span><br><span class="line">        RTopic&lt;String&gt; rTopic = redissonClient.getTopic(topic);</span><br><span class="line">        rTopic.publish(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>RBloomFilter</p></blockquote><p>布隆过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;bloomKey&quot;</span>);</span><br><span class="line">        <span class="comment">// 参数1：期望插入的元素总数 参数2：误识别率</span></span><br><span class="line">        bloomFilter.tryInit(<span class="number">1000000</span>, <span class="number">0.03</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">1000000</span> ; i++) &#123;</span><br><span class="line">            bloomFilter.add(IdUtil.fastSimpleUUID());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">// 这里输出9次false 1次true（当然这不是绝对的 有一次错误说明是存在误识别的）</span></span><br><span class="line"> System.out.println(bloomFilter.contains(IdUtil.fastSimpleUUID()));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>RHyperLogLog</p></blockquote><p>基数估计算法，基数：不同的总数。</p><p>应用：给定一个含有重复元素的有限集合，计算其不重复元素的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RHyperLogLog&lt;String&gt; stringRHyperLogLog = redissonClient.getHyperLogLog(<span class="string">&quot;hyperLog&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        stringRHyperLogLog.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(stringRHyperLogLog.count());<span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p>LongAdder</p></blockquote><p>与<code>java.util.concurrent.atomic.LongAdder</code>类似的接口，为分布式环境下递增和递减操作提供了很高得性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RLongAdder longAdder = redissonClient.getLongAdder(<span class="string">&quot;myLongAdder&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始值</span></span><br><span class="line">        longAdder.add(<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// +1</span></span><br><span class="line">            longAdder.increment();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 累计和</span></span><br><span class="line">        System.out.println(longAdder.sum());</span><br><span class="line">        <span class="comment">// 不使用时最好手动销毁</span></span><br><span class="line">        longAdder.destroy();</span><br></pre></td></tr></table></figure><blockquote><p>RRateLimiter</p></blockquote><p>分布式限流器</p><p>定义限流器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RRateLimiter rRateLimiter = redissonClient.getRateLimiter(<span class="string">&quot;limiter&quot;</span>);</span><br><span class="line">        <span class="comment">// 每10s产生30个令牌</span></span><br><span class="line">        rRateLimiter.trySetRate(RateType.OVERALL, <span class="number">30</span>, <span class="number">60</span>, RateIntervalUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>使用限流器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RRateLimiter rRateLimiter = redissonClient.getRateLimiter(<span class="string">&quot;limiter&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">60</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">// 需要1个令牌</span></span><br><span class="line">            <span class="keyword">if</span> (rRateLimiter.tryAcquire(<span class="number">1</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获得令牌：&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="分布式锁和同步器"><a href="#分布式锁和同步器" class="headerlink" title="分布式锁和同步器"></a>分布式锁和同步器</h1><h2 id="分布式可重入锁-RLock"><a href="#分布式可重入锁-RLock" class="headerlink" title="分布式可重入锁[RLock ]"></a>分布式可重入锁[RLock ]</h2><p>属于非公平锁</p><blockquote><p>未主动设置过期时间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redissonClient.getLock(<span class="string">&quot;lock-key&quot;</span>);</span><br><span class="line">      <span class="comment">// 这里即在获取锁,若获取不到则一直阻塞在此直至获取 (默认的过期时间30s)</span></span><br><span class="line">      lock.lock();</span><br><span class="line">      System.out.println(<span class="string">&quot;获取锁成功&quot;</span> + Thread.currentThread());</span><br><span class="line">      lock.lock();</span><br><span class="line">      System.out.println(<span class="string">&quot;重新获取锁成功[重入锁]&quot;</span> + Thread.currentThread());</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 模拟业务执行时间 每隔10s会进行锁续期 续至30s 不会因为业务时间过长导致锁被提前释放</span></span><br><span class="line">          Thread.sleep(<span class="number">40000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 最后一定需要手动解锁 否则看门狗会一直进行锁续期</span></span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>主动设置过期时间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redissonClient.getLock(<span class="string">&quot;lock-expire-key&quot;</span>);</span><br><span class="line">      <span class="comment">// 10s后自动释放</span></span><br><span class="line">      lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">      System.out.println(<span class="string">&quot;获取锁时间：&quot;</span> + DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 模拟业务执行时间 此时不会进行自动续期 若设置的锁自动过期时间小于业务执行时间 则锁会提前释放 实际生产中应当避免</span></span><br><span class="line">          Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 手动释放锁 避免多余的锁占用</span></span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><p>保证了当多个Redisson客户端线程同时请求加锁时，优先分配给先发出请求的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redissonClient.getFairLock(<span class="string">&quot;fair-lock-key&quot;</span>);</span><br></pre></td></tr></table></figure><p>其它操作与上一节的操作类似</p><h2 id="联锁（MultiLock）"><a href="#联锁（MultiLock）" class="headerlink" title="联锁（MultiLock）"></a>联锁（MultiLock）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可来自不同的redisson实例</span></span><br><span class="line">      RLock lock1 = redissonClient.getLock(<span class="string">&quot;multi-lock-1&quot;</span>);</span><br><span class="line">      RLock lock2 = redissonClient.getLock(<span class="string">&quot;multi-lock-2&quot;</span>);</span><br><span class="line">      RLock lock3 = redissonClient.getLock(<span class="string">&quot;multi-lock-3&quot;</span>);</span><br><span class="line">      RedissonMultiLock multiLock = <span class="keyword">new</span> RedissonMultiLock(lock1, lock2, lock3);</span><br><span class="line">      <span class="comment">// 同时所有锁都成功才算加锁成功</span></span><br><span class="line">      multiLock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 模拟业务执行时间 每隔10s会进行锁续期 续至30s 不会因为业务时间过长导致锁被提前释放</span></span><br><span class="line">          Thread.sleep(<span class="number">40000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 最后一定需要手动解锁 否则看门狗会一直进行锁续期</span></span><br><span class="line">          multiLock.unlock();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="红锁-RedissonRedLock"><a href="#红锁-RedissonRedLock" class="headerlink" title="红锁(RedissonRedLock)"></a>红锁(RedissonRedLock)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可来自不同的redisson实例</span></span><br><span class="line">      RLock lock1 = redissonClient.getLock(<span class="string">&quot;multi-lock-1&quot;</span>);</span><br><span class="line">      RLock lock2 = redissonClient.getLock(<span class="string">&quot;multi-lock-2&quot;</span>);</span><br><span class="line">      RLock lock3 = redissonClient.getLock(<span class="string">&quot;multi-lock-3&quot;</span>);</span><br><span class="line">      RedissonRedLock redLock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line">      <span class="comment">// 红锁在大部分节点上加锁成功就算成功</span></span><br><span class="line">      redLock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 模拟业务执行时间 每隔10s会进行锁续期 续至30s 不会因为业务时间过长导致锁被提前释放</span></span><br><span class="line">          Thread.sleep(<span class="number">40000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 最后一定需要手动解锁 否则看门狗会一直进行锁续期</span></span><br><span class="line">          redLock.unlock();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="读写锁-RReadWriteLock"><a href="#读写锁-RReadWriteLock" class="headerlink" title="读写锁(RReadWriteLock)"></a>读写锁(RReadWriteLock)</h2><blockquote><p>读锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RReadWriteLock lock = redissonClient.getReadWriteLock(<span class="string">&quot;read-write-lock&quot;</span>);</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取读锁成功&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟业务执行时间 每隔10s会进行锁续期 续至30s 不会因为业务时间过长导致锁被提前释放</span></span><br><span class="line">            Thread.sleep(<span class="number">40000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 最后一定需要手动解锁 否则看门狗会一直进行锁续期</span></span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>写锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RReadWriteLock lock = redissonClient.getReadWriteLock(<span class="string">&quot;read-write-lock&quot;</span>);</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取写锁成功&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟业务执行时间 每隔10s会进行锁续期 续至30s 不会因为业务时间过长导致锁被提前释放</span></span><br><span class="line">            Thread.sleep(<span class="number">40000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;业务异常&quot;</span>, e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 最后一定需要手动解锁 否则看门狗会一直进行锁续期</span></span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>当读写锁是写加锁状态时, 在这个锁被解锁之前, 所有试图对这个锁加锁的线程都会被阻塞；当读写锁在读加锁状态时, 所有试图以读模式对它进行加锁的线程都可以得到访问权, 但是如果线程希望以写模式对此锁进行加锁, 它必须直到所有的线程释放锁.</p><p>读写锁适合于对数据结构的读次数比写次数多得多的情况</p><h2 id="信号量-RSemaphore"><a href="#信号量-RSemaphore" class="headerlink" title="信号量(RSemaphore)"></a>信号量(RSemaphore)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RSemaphore semaphore = redissonClient.getSemaphore(<span class="string">&quot;sema-count&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置10个许可</span></span><br><span class="line">        semaphore.trySetPermits(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">30</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 消耗1个许可 若无许可 则一直阻塞</span></span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                <span class="comment">// 消耗1个许可 若无许可 则直接返回false</span></span><br><span class="line"><span class="comment">//                boolean res = semaphore.tryAcquire();</span></span><br><span class="line">                <span class="comment">// 消耗1个许可 若无许可 阻塞10s 若仍无直接返回false</span></span><br><span class="line"><span class="comment">//                boolean res = semaphore.tryAcquire(10, TimeUnit.SECONDS);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;获取信号量&quot;</span> + i + <span class="string">&quot;:&quot;</span>+DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="带过期时间的信号量"><a href="#带过期时间的信号量" class="headerlink" title="带过期时间的信号量"></a>带过期时间的信号量</h2><p>在<code>RSemaphore</code>对象的基础上，为每个信号增加了一个过期时间。每个信号可以通过独立的ID来辨识，释放时只能通过提交这个ID才能释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RPermitExpirableSemaphore semaphore = redissonClient.getPermitExpirableSemaphore(<span class="string">&quot;expire-sema&quot;</span>);</span><br><span class="line">        semaphore.trySetPermits(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">30</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 许可有效期3秒钟</span></span><br><span class="line">                String permitId = semaphore.acquire(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">                System.out.println(<span class="string">&quot;获取信号量&quot;</span> + i + <span class="string">&quot;:&quot;</span>+DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 释放许可需要获取许可时的id</span></span><br><span class="line">                    semaphore.release(permitId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h2><p>使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了</p><p>等待线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RCountDownLatch countDownLatch = redissonClient.getCountDownLatch(<span class="string">&quot;latch&quot;</span>);</span><br><span class="line">        countDownLatch.trySetCount(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;等待其它线程先执行&quot;</span>);</span><br><span class="line">            <span class="comment">// 在计数器的值未减至0前一直阻塞</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;其它线程均已执行，执行当前线程：&quot;</span>+Thread.currentThread());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其它前置任务执行完执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countDownLatch.countDown();<span class="comment">// 计数器减1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最佳实践 </tag>
            
            <tag> Redis </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq的最佳实践</title>
      <link href="/2022/02/20/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/RabbitMq%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/02/20/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/RabbitMq%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 最佳实践 </tag>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp的一些常识</title>
      <link href="/2022/02/19/%E5%B8%B8%E8%AF%86/tcp/"/>
      <url>/2022/02/19/%E5%B8%B8%E8%AF%86/tcp/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>TCP提供一种面向连接的、可靠的字节流服务</p><h1 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h1><p>可参考：<a href="https://blog.csdn.net/qq_32998153/article/details/79680704">https://blog.csdn.net/qq_32998153/article/details/79680704</a></p><p>序列号：</p><ul><li>解决网络包乱序问题</li></ul><p>确认序列号：</p><ul><li>解决不丢包的问题</li></ul><p>窗口值：</p><ul><li>滑动窗口机制中会用到，实现流量控制</li></ul><p>时间戳选项的作用：</p><ul><li>测量RTT</li><li>缓解序列号的快速回绕</li></ul><h1 id="连接与终止"><a href="#连接与终止" class="headerlink" title="连接与终止"></a>连接与终止</h1><p><img src="/2022/02/19/%E5%B8%B8%E8%AF%86/tcp/tcp_open_close.jpg" alt="img"></p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><blockquote><p>TCP的可靠性来源</p></blockquote><p>检验和、序列号、确认应答、重发控制、连接管理、窗口控制</p><blockquote><p>建立连接时的初始序列号特征</p></blockquote><p>随机且唯一，避免旧连接的包被新连接接收。必须使得迟到的TCP报文段的序号不处在新的连接中所使用的序号范围之中</p><blockquote><p>握手为什么需要三次</p></blockquote><p>为了同步两端的初始序列号信息，后续的数据传送都要依据这个初始序列号，是用于确认和排序的关键信息</p><blockquote><p>挥手为什么需要四次</p></blockquote><p>TCP是全双工的，发送方和接收方都需要FIN和ACK</p><blockquote><p>为什么TIME_WAIT的等待时间是2MSL？</p></blockquote><p>1)可靠地实现全双工连接的终止</p><p>2)保证本连接持续的时间所产生的所有分组都从网络中消失，也就是保证新建立一个TCP连接时，来自该连接老的重复分组都已经在网络中消失了</p><blockquote><p>滑动窗口与流量控制</p></blockquote><p>​            可以提高性能，发送端主机在发送一个段之后不要一直等待这个确认应答，而是继续发送（但是要在窗口大小之内），窗口大小即指无需等待确认应答即可继续发送数据的最大值（序列号的最大右偏移），窗口的大小一般都在动态变化，与每次接受应答时对端传来的窗口值相关。这也是实现流量控制的机制，考虑到接收端的处理速度，接收端缓冲区的空闲空间要与发送端要发送的数据量相匹配，否则过多，接收端无法处理。</p><blockquote><p>重发控制</p></blockquote><ul><li><p>超时重发</p><p>发送端发送包后，若在指定时间内（超时时间）未收到来自对端的确认应答则会进行超时重发，超时重发后的超时时间会以指数级增长，发送频率会降下来，但也不会无限制重发，重发一定次数后会关闭连接</p></li><li><p>快速重发</p><p>即发送端收到来自对端的连续三次确认应答均一样，即会对相应缺失数据立即进行重发。一般出现在窗口较大时，发生连续报文段发送时 中间某一报文段丢失的场景，需要注意的是：这种场景下，即使接收端主机收到的包序号并不连续，也不会丢弃而是暂时保存在缓冲区，这样已经发送的缺失段后面的段就不用重传了，待到缺失段接收后，统一返回实际已经接收的最大数据长度ACK</p></li></ul><blockquote><p>拥塞控制</p></blockquote><p>参考：<a href="https://blog.csdn.net/qq_41431406/article/details/97926927">https://blog.csdn.net/qq_41431406/article/details/97926927</a></p><ul><li><p>慢开始</p></li><li><p>拥塞避免</p></li><li><p>拥塞发生</p></li><li><p>快恢复</p></li></ul><p>目的尽可能地提高网络的传输效率</p>]]></content>
      
      
      
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>page</title>
      <link href="/2022/01/31/%E9%9D%A2%E7%AD%8B/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/31/%E9%9D%A2%E7%AD%8B/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务基础知识</title>
      <link href="/2022/01/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/basic/"/>
      <url>/2022/01/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/basic/</url>
      
        <content type="html"><![CDATA[<p>Cloud版本<code>2021.0.0</code> Boot版本<code>2.6.3</code></p><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>服务中心</p><ul><li><p>Eureka Server 提供服务注册和发现</p></li><li><p>Service Provider 服务提供者，供服务消费者调用</p></li><li><p>Service Consumer 服务消费者</p></li></ul><p>注册中心作为关键服务一定要保证高可用的，避免单节点故障影响全局，故通常需要集群部署保证高可用</p><p>可以通过运行多个eureka实例，并进行互相注册的方式来实现高可用的部署</p><h2 id="注册中心搭建"><a href="#注册中心搭建" class="headerlink" title="注册中心搭建"></a>注册中心搭建</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动类注解开启</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure><blockquote><p>配置(集群)</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">ztt.eureka</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eureka1</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://eureka2:8002/eureka/,http://eureka3:8003/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">ztt.eureka</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eureka2</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://eureka1:8001/eureka/,http://eureka3:8003/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">ztt.eureka</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8003</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eureka3</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://eureka1:8001/eureka/,http://eureka2:8002/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>启动成功界面</p></blockquote><p><img src="/2022/01/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/basic/image-20220203130626169.png" alt="image-20220203130626169"></p><h2 id="服务提供者搭建"><a href="#服务提供者搭建" class="headerlink" title="服务提供者搭建"></a>服务提供者搭建</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动类注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><p>项目开启服务注册的功能。启动工程后，就可以在注册中心的页面看到该服务</p><blockquote><p>配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-provider</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9000</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>暴露接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口可在消费者中调用</p><h2 id="服务消费者搭建"><a href="#服务消费者搭建" class="headerlink" title="服务消费者搭建"></a>服务消费者搭建</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动类注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p>@EnableDiscoveryClient :启用服务注册与发现<br>@EnableFeignClients：启用feign进行远程调用</p><blockquote><p>配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-invoke</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>远程接口封装（Fegin）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;spring-cloud-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IndexRemote</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">index</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装成为一个类似于Service的接口bean，其实现方式为远程服务实现，当前服务要使用时直接将其注入即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ztt.eurekaserviceinvoke.remote.IndexRemote;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IndexRemote indexRemote;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IndexController</span><span class="params">(IndexRemote indexRemote)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.indexRemote = indexRemote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexRemote.index(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><a href="http://127.0.0.1:9000/index?name=adawda">http://127.0.0.1:9000/index?name=adawda</a>  服务提供者本身的url</p><p><a href="http://127.0.0.1:9090/index/ztt">http://127.0.0.1:9090/index/ztt</a> 服务消费者通过远程调用的url</p><p>均可正常访问</p><p><img src="/2022/01/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/basic/image-20220203163128568.png" alt="image-20220203163128568"></p><p><strong>注：当有多个同名的服务提供者，Fegin会进行负载均衡，即会轮询调用远程服务</strong></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><blockquote><p>节点均在unavailable-replicas下</p></blockquote><p>参考：<a href="https://www.amd5.cn/atang_4357.html">https://www.amd5.cn/atang_4357.html</a></p><p>eureka.instance.prefer-ip-address 默认为false表示使用主机名<code>eureka.instance.hostname</code>,可以是主机名、域名等非IP地址</p><p>eureka.instance.prefer-ip-address若配置为true时则一定要使用具体的IP</p><blockquote><p>服务404</p></blockquote><p>OpenFeign FeignException$NotFound: [404]</p><p>原因：服务提供者的接口未被扫描，即本身不存在对应路径映射，调整后解决，可依次排查：先确认服务提供者本身是否可以正常访问：<a href="http://127.0.0.1:9000/index?name=adawda%EF%BC%8C%E5%86%8D%E7%A1%AE%E8%AE%A4%E5%90%84%E9%85%8D%E7%BD%AE%E6%AD%A3%E7%A1%AE%E6%80%A7">http://127.0.0.1:9000/index?name=adawda，再确认各配置正确性</a></p><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><p>参考：<a href="https://blog.csdn.net/loushuiyifan/article/details/82702522">https://blog.csdn.net/loushuiyifan/article/details/82702522</a></p><p>wiki: <a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些问题</title>
      <link href="/2022/01/03/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/01/03/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="解决SpringBoot打成jar运行后无法读取resources里的文件问题"><a href="#解决SpringBoot打成jar运行后无法读取resources里的文件问题" class="headerlink" title="解决SpringBoot打成jar运行后无法读取resources里的文件问题"></a>解决SpringBoot打成jar运行后无法读取resources里的文件问题</h1><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(name = &#123;&quot;redis.deploy.mode&quot;&#125;,havingValue = &quot;single&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">getSingleClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Config config = Config.fromYAML(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;config/redis-single.yml&quot;</span>).getFile());</span><br><span class="line">        config.useSingleServer();</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题描述</p></blockquote><p>正常在IDEA中启动没问题，但是打包成jar后启动服务时报错</p><p>java.io.FileNotFoundException: class path resource [config/redis-single.ym] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:….  提示文件找不到</p><p>Resource下的文件是存在于jar这个文件里面，在磁盘上是没有真实路径存在的，它其实是位于jar内部的一个路径。所以通过ResourceUtils.getFile或者this.getClass().getResource(“”)方法无法正确获取文件</p><blockquote><p>问题解决</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Config config &#x3D; Config.fromYAML(new ClassPathResource(&quot;config&#x2F;redis-single.yml&quot;).getInputStream());</span><br></pre></td></tr></table></figure><p>必须使用resource.getInputStream()</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>page</title>
      <link href="/2022/01/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/element-ui/basic/"/>
      <url>/2022/01/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/element-ui/basic/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/01/01/docker/basic/"/>
      <url>/2022/01/01/docker/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="windows-win10"><a href="#windows-win10" class="headerlink" title="windows[win10]"></a>windows[win10]</h2><p>1.启用虚拟化功能【Hyper-V】</p><p><img src="/2022/01/01/docker/basic/image-20220101174948609.png" alt="image-20220101174948609"></p><p>若存在…禁用 需要在bios中开启对虚拟化的支持</p><p>2.安装docker安装包【官网下载】</p><p>3.启动docker</p><p>报错 大概率是因为WSL2未安装 按照链接进行下载安装即可</p><p>4.测试</p><p><code>docker run hello-world</code></p><p>先会提示本地未找到镜像，然后会尝试从远程拉取，但是一般会拉不下来因为网络原因，故需要进行<a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">docker镜像加速</a></p><p>5.验证测试</p><p>成功标志</p><p><img src="/2022/01/01/docker/basic/image-20220101195624628.png" alt="image-20220101195624628"></p><h1 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/<span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure><p>Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><p>-t: 在新容器内指定一个伪终端或终端</p><p>-i: 允许你对容器内的标准输入 (STDIN) 进行交互</p><h2 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h2><p>创建一个以进程方式运行的容器：</p><p><code>docker run -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</code></p><p><img src="/2022/01/01/docker/basic/image-20220101201036303.png" alt="image-20220101201036303"></p><p>返回的是容器唯一id<code>332d9db9407cebde55b33a5cd32e5563d36de7297c6015539fb9199f4f7ff749</code></p><blockquote><p>容器状态查询</p></blockquote><p><code>docker ps</code> 只查询在运行的容器 加上<code>-a</code>参数会查询所有容器，包括之前停止的容器</p><p><strong>CONTAINER ID:</strong> 容器 ID。</p><p><strong>IMAGE:</strong> 使用的镜像。</p><p><strong>COMMAND:</strong> 启动容器时运行的命令。</p><p><strong>CREATED:</strong> 容器的创建时间。</p><p><strong>STATUS:</strong> 容器状态。</p><p>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running 或 Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p><p><strong>NAMES:</strong> 自动分配的容器名称。</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>容器内部的标准输出</p><p><code>docker logs 332d9db9407c</code>  后为容器id</p><p><code>docker logs magical_dirac</code> 后为容器名称</p><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p><code>docker stop 容器id或者容器名称</code></p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p><code>docker pull 镜像名称</code> 从远程拉取</p><h2 id="启动-重启"><a href="#启动-重启" class="headerlink" title="启动/重启"></a>启动/重启</h2><p><code>docker start 容器ID</code> 启动</p><p><code>docker restart 容器ID</code>    重启</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p><code>docker attach</code> 退出容器终端后会导致容器停止</p><p><code>docker attach 332d9db9407c</code></p><p><code>docker exec</code>退出容器终端后不会导致容器停止</p><p><code>docker exec 332d9db9407c /bin/bash</code></p><h2 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h2><p><code>docker export feb5d9fea6a5 &gt; a.tar</code></p><p>导出容器 332d9db9407c 快照到本地文件 a.tar</p><h2 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h2><p><code>cat b.tar | docker import - test/ubuntu:v2</code></p><p>以下实例将快照文件 b.tar 导入到镜像 test/ubuntu:v2</p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p><code> docker rm -f d5599e167569</code> 删除指定容器</p><p><code>docker container prune</code> 清理掉所有处于终止状态的容器</p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p><code>docker port 容器id或名称</code></p><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><p><code>docker top 容器id或名称</code></p><h2 id="应用检查"><a href="#应用检查" class="headerlink" title="应用检查"></a>应用检查</h2><p><code>docker inspect 容器id或名称</code></p><h2 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h2><p><code>-d</code>:后台运行</p><p><code>-P</code>:将容器内部使用的网络端口随机映射到我们使用的主机上</p><p><code>-p 5000:5000</code>:设置映射到宿主机上的端口(第一个端口容器上进程端口号，第二个宿主机上的端口)</p><p><code>-i</code>: 交互式操作</p><p><code>-t</code>: 终端</p><p><code>--name</code> :标识来命名容器</p><p><code>-d</code>：参数指定 Docker 网络类型，有 bridge、overlay</p><p><code>--rm</code>：容器退出时自动清理容器内部的文件系统</p><p><code>--dns=IP_ADDRESS</code>： 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名</p><p><code>-v</code>: 指定挂载主机目录到容器目录</p><h1 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h1><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载</p><h2 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h2><p><code>docker images </code> 本地主机上的镜像</p><h2 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h2><p><code>docker search kw</code> 搜寻指定关键词的镜像</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p><code> docker rmi hello-world</code> 删除 hello-world 镜像</p><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><blockquote><p>从已经创建的容器中更新镜像，并且提交这个镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:15.10 /bin/bash</span><br><span class="line">apt-get update</span><br><span class="line">docker commit -m=&quot;has update&quot; -a=&quot;tt&quot; 44f8778a6276 tt/ubuntu:v2</span><br><span class="line">docker images</span><br><span class="line">docker run -t -i tt/ubuntu:v2 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>使用 Dockerfile 指令来创建一个新的镜像 </p></blockquote><p>新建Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>    centos:<span class="number">6.7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span>      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     useradd runoob</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">22</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash">     /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure><h2 id="镜像标签"><a href="#镜像标签" class="headerlink" title="镜像标签"></a>镜像标签</h2><p><code> docker tag adf047e3db27 tt/ubuntu:v3</code></p><p><code>:</code>后面即使镜像标签</p><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p><code>docker push REPOSITORY:TAG </code></p><p>通过 docker push 命令将自己的镜像推送到 Docker Hub</p><h1 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h1><h2 id="两个容器互相ping通"><a href="#两个容器互相ping通" class="headerlink" title="两个容器互相ping通"></a>两个容器互相ping通</h2><blockquote><p>创建一个新的 Docker 网络</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge test-net</span><br></pre></td></tr></table></figure><blockquote><p>运行一个容器并连接到新建的 test-net 网络:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><blockquote><p>再运行一个容器并加入到 test-net 网络</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test2 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h2 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置DNS</h2><p>如果在容器启动时没有指定 <strong>–dns</strong> 和 <strong>–dns-search</strong>，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p>FROM</p></blockquote><p>定制的镜像都是基于 FROM 的镜像</p><blockquote><p>RUN</p></blockquote><ul><li>RUN &lt;命令行&gt; 等价于在终端操作的 shell 命令</li><li>RUN [“可执行文件”, “参数1”, “参数2”]</li></ul><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，如下面第二种更为合适</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot;</span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>COPY</p></blockquote><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</code></p><p>容器内的指定路径【目标路径】，该路径不用事先建好，路径不存在的话，会自动创建。</p><blockquote><p>ADD</p></blockquote><p>与COPY类似 不过在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;</p><blockquote><p>CMD</p></blockquote><p>为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效</p><blockquote><p>ENTRYPOINT</p></blockquote><p>类似于CMD</p><blockquote><p>ENV</p></blockquote><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;&#x3D;&lt;value1&gt; &lt;key2&gt;&#x3D;&lt;value2&gt;...</span><br></pre></td></tr></table></figure><blockquote><p>ARG</p></blockquote><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><blockquote><p>VOLUME</p></blockquote><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><blockquote><p>EXPOSE</p></blockquote><p>只是声明端口</p><blockquote><p>WORKDIR</p></blockquote><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）</p><blockquote><p>USER</p></blockquote><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）</p><h1 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h1><p>先把我们的镜像传到docker仓库中,再由目的地把docker仓库中的镜像拉过去</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h2><p>默认模式，需要端口映射,docker可以指定你想把容器内的某一个端口可以在容器所在主机上的某一个端口它俩之间做一个映射,当你在访问主机上的端口时,其实就是访问容器里面的端口.</p><h2 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h2><p>在启动容器的时候指定使用Host模式,那么这个容器将不会获得一个独立的network namespace,而是和主机共同使用一个,这个时候容器将不会虚拟出自己的网卡,配置出自己的ip.而是使用宿主机上的ip和端口.也就是说在docker上使用网络和在主机上使用网络是一样的</p><h2 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h2><p>还有一种网络类型是None.也就是没有网络,这种情况docker将不会和外界的任何东西进行通讯</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础学习</title>
      <link href="/2021/12/26/vue/basic/"/>
      <url>/2021/12/26/vue/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的一些小技巧</title>
      <link href="/2021/12/26/mysql/%E5%B0%8Ftips/"/>
      <url>/2021/12/26/mysql/%E5%B0%8Ftips/</url>
      
        <content type="html"><![CDATA[<p>1.在导出csv时若数字字符串过长，导致科学计数，且后几位数字归0</p><p>解决：<code>select concat(&#39;\r&#39;,column)</code></p><p>2.between优于data_format</p><p><code>data_format(x.data,%m-%d-%Y&#39;)=&#39;2021-01-01&#39;</code> 查询效率弱于<code>x.data between &#39;2021-01-01 00:00:00&#39; and &#39;2021-01-01 23:59:59&#39;</code></p><p>3.mysql -e 导出csv时sed转换命令</p><p><code>... | sed &#39;s/\t/&quot;,&quot;/g;s/^/&quot;/;s/$/&quot;/;s/\n//g&#39; &gt; file.csv</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redisson实践</title>
      <link href="/2021/12/25/redis/redisson/"/>
      <url>/2021/12/25/redis/redisson/</url>
      
        <content type="html"><![CDATA[<p>配置參考：<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95">https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis的较佳实现 </tag>
            
            <tag> redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis部署模式</title>
      <link href="/2021/12/25/redis/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/25/redis/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-单机模式"><a href="#1-单机模式" class="headerlink" title="1.单机模式"></a>1.单机模式</h1><p>单节点，部署简单</p><blockquote><p>部署</p></blockquote><h1 id="2-主从模式"><a href="#2-主从模式" class="headerlink" title="2.主从模式"></a>2.主从模式</h1><blockquote><p>作用</p></blockquote><p>1）数据备份</p><p>多一份数据备份，方便备份</p><p>2）负载均衡</p><p>主节点写、从节点读</p><blockquote><p>缺点</p></blockquote><p>本身不支持 主从切换 主节点宕机后 需要人工干预 将从节点设置为主节点</p><h1 id="3-哨兵模式"><a href="#3-哨兵模式" class="headerlink" title="3.哨兵模式"></a>3.哨兵模式</h1><p>监控、提醒、自动故障迁移</p><p><a href="http://redis.cn/topics/sentinel.html">http://redis.cn/topics/sentinel.html</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/9004460.html">https://www.cnblogs.com/kevingrace/p/9004460.html</a></p><h1 id="4-集群模式"><a href="#4-集群模式" class="headerlink" title="4.集群模式"></a>4.集群模式</h1><h1 id="5-实际使用-生产环境中"><a href="#5-实际使用-生产环境中" class="headerlink" title="5.实际使用(生产环境中)"></a>5.实际使用(生产环境中)</h1><blockquote><p>主从+哨兵</p></blockquote><blockquote><p>分布式集群</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2021/12/11/springBoot/%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/12/11/springBoot/%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的一些脚手架配置</title>
      <link href="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>代码仓库：<a href="https://github.com/ztt0tian/BootLearn">https://github.com/ztt0tian/BootLearn</a></p><h1 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h1><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>yml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ztt?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:config/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h1 id="mybatisGenerator插件使用"><a href="#mybatisGenerator插件使用" class="headerlink" title="mybatisGenerator插件使用"></a>mybatisGenerator插件使用</h1><blockquote><p>pom中build配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/config/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">&quot;D:\maven_repo\mysql\mysql-connector-java\8.0.27\mysql-connector-java-8.0.27.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span>  <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1/ztt&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.ztt.api.po&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成mapper位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.ztt.api.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;sys_user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;SysUser&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>执行</p></blockquote><p><img src="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/image-20211114140855061.png" alt="image-20211114140855061"></p><p>会在配置的路径下面生成对应的实体类、Dao接口、mapper.xml文件，包含基本的增删改查</p><p><img src="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/image-20211114141105762.png" alt="image-20211114141105762"></p><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p><strong>@RestControllerAdvice + @ExceptionHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ztt.api.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ztt.api.constants.ExceptionConstant;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.dto.ApiResponseDto;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.enums.ResponseEnum;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandleConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">businessExceptionHandle</span><span class="params">(BusinessException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.BUSINESS_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.BUSINESS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">nullExceptionHandle</span><span class="params">(NullPointerException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.NULL_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.SERVER_INTERNAL_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">generalExceptionHandle</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.GENERAL_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.SERVER_INTERNAL_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当自定义类加@ControllerAdvice注解时，方法需要返回json数据时，每个方法还需要添加@ResponseBody注解;而@RestControllerAdvice不需要</p><h1 id="日志配置-logback-xml"><a href="#日志配置-logback-xml" class="headerlink" title="日志配置(logback.xml)"></a>日志配置(logback.xml)</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志格式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] [%thread] [%-30.30logger&#123;30&#125;] %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;infoFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>  <span class="comment">&lt;!-- 如果命中就禁止这条日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>  <span class="comment">&lt;!-- 如果没有命中就使用这条规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/api_info_%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;errorFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/api_error_%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ztt.api&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;infoFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;errorFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="校验配置"><a href="#校验配置" class="headerlink" title="校验配置"></a>校验配置</h1><p>一个字符占用多少字节取决于所使用的字符编码</p><p>这里的校验配置一般指的是基础校验，例如空字符串，null，字符串长短，数值大小等，不包括业务校验和权限校验。一般在controller层做</p><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>约束规则配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户昵称不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 4,max = 16,message = &quot;用户昵称长度4~16&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 16,max = 16,message = &quot;用户密码长度16位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userPsw;</span><br><span class="line">    <span class="meta">@Pattern(regexp = PatterConstant.PHONE_PATTERN,message = &quot;号码无效&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller层使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/userRegister&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">registerUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserAddDto addDto)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sysUserService.registerUser(addDto) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ApiResponseDto.success();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(BUSINESS_ERROR);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证异常统一处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">bindExceptionHandle</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.PARAM_ERROR_DESC, e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.PARAM_ERROR.getResponseCode(), e.getFieldErrors().stream()</span><br><span class="line">                .map(o-&gt;o.getDefaultMessage()).collect(Collectors.toList()).toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="单元测试-T"><a href="#单元测试-T" class="headerlink" title="单元测试 T"></a>单元测试 T</h1><h1 id="全局事务配置-T"><a href="#全局事务配置-T" class="headerlink" title="全局事务配置 T"></a>全局事务配置 T</h1><h1 id="集成Redis-Redisson"><a href="#集成Redis-Redisson" class="headerlink" title="集成Redis[Redisson]"></a>集成Redis[Redisson]</h1><h1 id="集成RabbitMQ"><a href="#集成RabbitMQ" class="headerlink" title="集成RabbitMQ"></a>集成RabbitMQ</h1>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis集成 </tag>
            
            <tag> mybatisGenerator插件 </tag>
            
            <tag> 全局异常处理 </tag>
            
            <tag> 校验配置 </tag>
            
            <tag> 单元测试 </tag>
            
            <tag> 全局事务配置 </tag>
            
            <tag> 父子模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务细说</title>
      <link href="/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="传播机制"><a href="#传播机制" class="headerlink" title="传播机制"></a>传播机制</h1><p><img src="/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/20170420212829825.png" alt="20170420212829825"></p><p>serviceA</p><table><thead><tr><th>方法</th><th>事务传播机制</th></tr></thead><tbody><tr><td>methodA1</td><td>REQUIRED</td></tr><tr><td>methodA2</td><td>SUPPORTS</td></tr><tr><td>methodA3</td><td>MANDATORY</td></tr><tr><td>methodA4</td><td>NOT_SUPPORTED</td></tr><tr><td>methodA5</td><td>REQUIRES_NEW</td></tr><tr><td>methodA6</td><td>NEVER</td></tr><tr><td>methodA7</td><td>NESTED</td></tr></tbody></table><p>serviceB</p><table><thead><tr><th>方法</th><th>事务传播机制</th></tr></thead><tbody><tr><td>methodB1</td><td>REQUIRED</td></tr><tr><td>methodB2</td><td>SUPPORTS</td></tr><tr><td>methodB3</td><td>MANDATORY</td></tr><tr><td>methodB4</td><td>NOT_SUPPORTED</td></tr><tr><td>methodB5</td><td>REQUIRES_NEW</td></tr><tr><td>methodB6</td><td>NEVER</td></tr><tr><td>methodB7</td><td>NESTED</td></tr></tbody></table><p>模拟业务代码：（以上方法的业务逻辑基本与下类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.insertSelective(<span class="keyword">new</span> SysUser() &#123;&#123;</span><br><span class="line">            setUserName(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">            setUserPsw(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">        <span class="comment">// 模拟业务异常 视需要进行调整</span></span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">0</span>);</span><br><span class="line">        mapper.insertSelective(<span class="keyword">new</span> SysUser() &#123;&#123;</span><br><span class="line">            setUserName(<span class="string">&quot;A11&quot;</span>);</span><br><span class="line">            setUserPsw(<span class="string">&quot;A11&quot;</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="单独事务"><a href="#单独事务" class="headerlink" title="单独事务"></a>单独事务</h1><p>单独调用REQUIRED机制的方法，会开启一个新的事务，遇异常会回滚</p><p>单独调用SUPPORTS机制的方法，不存在事务，遇异常不会回滚</p><p>单独调用MANDATORY机制的方法，会直接抛出事务异常，无法执行业务代码</p><p>单独调用NOT_SUPPORTED机制的方法，以非事务地执行，遇异常不会回滚</p><p>单独调用REQUIRES_NEW机制的方法，等同于REQUIRED，遇异常会回滚</p><p>单独调用NEVER机制的方法，以非事务地执行，遇异常不会回滚</p><p>单独调用NESTED机制的方法，等同于REQUIRED，遇异常会回滚</p><h1 id="嵌套事务"><a href="#嵌套事务" class="headerlink" title="嵌套事务"></a>嵌套事务</h1><h2 id="同一service嵌套"><a href="#同一service嵌套" class="headerlink" title="同一service嵌套"></a>同一service嵌套</h2><p>实际与单独事务一样，事务表现取决于外层方法的事务配置，内层方法的事务配置在此场景不会生效</p><h2 id="不同service嵌套"><a href="#不同service嵌套" class="headerlink" title="不同service嵌套"></a>不同service嵌套</h2><h3 id="常规嵌套"><a href="#常规嵌套" class="headerlink" title="常规嵌套"></a>常规嵌套</h3><p>外层方法：serviceA中的methodAX</p><p>内层方法：serviceB中的methodBX</p><table><thead><tr><th>嵌套场景(外层A+内层B)</th><th>一般效果</th></tr></thead><tbody><tr><td>REQUIRED+REQUIRED</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+SUPPORT</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+MANDATORY</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+NOT_SUPPORTED</td><td>内外层方法任何一个出现异常，外层会回滚，内层不回滚，外层有事务，内层无事务</td></tr><tr><td>REQUIRED+REQUIRES_NEW</td><td>内外层方法任何一个出现异常，外层会回滚；内层只有在内层方法出现异常才会回滚；内层事务先提交而不是等外层事务结束再提交</td></tr><tr><td>REQUIRED+NEVER</td><td>内层方法直接抛出事务异常，外层回滚，内层业务不会执行【矛盾策略】</td></tr><tr><td>REQUIRED+NESTED</td><td>内外层方法任何一个出现异常，全部回滚，内层事务是外层事务子事务，待外层事务结束才提交</td></tr></tbody></table><p>一般的效果是指没有在外层方法对内层方法主动进行异常捕获处理，即简单的直接调用</p><p>其他组合的嵌套可以结合上述以及传播机制说明进行推断出</p><h3 id="特殊嵌套"><a href="#特殊嵌套" class="headerlink" title="特殊嵌套"></a>特殊嵌套</h3><blockquote><p>REQUIRED+REQUIRED+外层捕获内层异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation &#x3D; Propagation.REQUIRED)</span><br><span class="line">@Override</span><br><span class="line">public void methodA1BX() &#123;</span><br><span class="line">    mapper.insertSelective(new SysUser() &#123;&#123;</span><br><span class="line">        setUserName(&quot;A1&quot;);</span><br><span class="line">        setUserPsw(&quot;A1&quot;);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    try &#123;</span><br><span class="line">        serviceB.methodB1();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    mapper.insertSelective(new SysUser() &#123;&#123;</span><br><span class="line">        setUserName(&quot;A11&quot;);</span><br><span class="line">        setUserPsw(&quot;A11&quot;);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能会出现：<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code></p><p>出现条件：内层出现异常需要回滚，但是外层因捕获异常了，代码正常执行，又不回滚，前后矛盾故抛出异常；</p><p>原因：在此嵌套事务场景中，内层事务的sql和外层事务的sql共用外层事务，它们会在外层事务结束时进行提交或回滚。如果内层事务抛出异常<em>e</em>，在内层事务结束时，spring会把事务标记为“rollback-only”，即需要回滚，但但方法却正常执行完毕了故抛出此异常</p><blockquote><p>REQUIRED+SUPPORT+外层捕获内层异常</p></blockquote><p>同上</p><blockquote><p>REQUIRED+NOT_SUPPORTED+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层不在事务环境下执行，也就不存在将外层事务标记为“rollback-only”</p><blockquote><p>REQUIRED+REQUIRES_NEW+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层所在事务环境与外层的不是同一个事务，故不存在将外层事务标记为“rollback-only”</p><blockquote><p>REQUIRED+NEVER+外层捕获内层异常</p></blockquote><p>可以让内层的事务异常不会导致外层回滚，但这种策略本身没什么意义，内层业务不会执行</p><blockquote><p>REQUIRED+NESTED+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层所在事务是外层事务的一个子事务，不存在将外层事务标记为“rollback-only”，外部事务结束后它才会被提交</p><h1 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h1><p>1.private、static、final修饰方法</p><p>2.调用当前类的方法</p><p>3.spring的事务默认是对RuntimeException进行回滚，而不继承RuntimeException的不回滚，确保抛出异常与回滚</p><p>4.线程Thread中声明式事务不起作用</p><p>5.捕获不该捕获的异常且未将其抛出</p><h1 id="关于回滚"><a href="#关于回滚" class="headerlink" title="关于回滚"></a>关于回滚</h1><p>数据库中的表现形式：先插，若要回滚时会将需要回滚的记录删除，因此后续插入记录的主键id并不连续，一些回滚前插入的数据占用了一部分的主键</p><h2 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h2><p> 业务出现异常，无需多余操作，但抛出的异常需要匹配回滚要求的异常</p><h2 id="手动回滚"><a href="#手动回滚" class="headerlink" title="手动回滚"></a>手动回滚</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 业务方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 设置手动回滚    </span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="异步线程中的事务"><a href="#异步线程中的事务" class="headerlink" title="异步线程中的事务"></a>异步线程中的事务</h1><p>声明式事务对异步线程无法生效，只有使用编程式事务</p><h1 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h1><h1 id="确保事务提交后执行"><a href="#确保事务提交后执行" class="headerlink" title="确保事务提交后执行"></a>确保事务提交后执行</h1><blockquote><p>TransactionSynchronizationManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;事务提交后的业务操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如果是读写分离的数据库数据同步的延时，该方法不能解决，还是会查到空值。此时就要用延时队列的办法解决问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 事务嵌套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2021/10/31/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/10/31/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>语法格式：<code>参数 -&gt; 函数体</code></p><p>Lambda表达式只支持函数式接口 也就是只有一个抽象方法的接口，可以用<code>@FunctionalInterface</code>注解来表示当前接口为函数式接口，如果有多个抽象方法，编译时会报错</p><p>注：<code>参数</code>可以指明参数类型，但一般不需要指定，编译器可以自动推断出</p><p>e.g.1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICompare</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICompare&lt;Integer&gt; compare = (integer -&gt; integer &gt; <span class="number">2</span>);</span><br><span class="line">System.out.println(compare.compare(<span class="number">5</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>e.g.2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICompare2</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T x,T y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICompare2&lt;Integer&gt; compare2 = Integer::compare;</span><br></pre></td></tr></table></figure><p>疑问：</p><p><a href="https://blog.csdn.net/H_X_P_/article/details/105030682">为什么Comparator接口有两个抽象方法compare和equals，Comparator还是一个函数式接口？</a></p><p>因为抽象方法equals方法在父类Object中已有默认实现，所以它们不是抽象方法。如果一个接口中声明的抽象方法是重写了超类Object类中任意一个public方法，那么这些抽象方法并不会算入接口的抽象方法数量中</p><h1 id="核心函数式接口"><a href="#核心函数式接口" class="headerlink" title="核心函数式接口"></a>核心函数式接口</h1><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消费型接口：<code>void accept(T t);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Long&gt; consumer = System.out::println;</span><br><span class="line">consumer.accept(<span class="number">1000L</span>);</span><br></pre></td></tr></table></figure><h1 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h1><p>一种用函数式编程方式在集合类上进行复杂操作的工具</p><h2 id="List常用流操作"><a href="#List常用流操作" class="headerlink" title="List常用流操作"></a>List常用流操作</h2><blockquote><p>提取某一属性的集合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = elements.stream().map(ListElement::getStringElement).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; stringSet = elements.stream().map(ListElement::getStringElement).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><blockquote><p>List转Map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, ListElement&gt; listElementMap = elements.stream().collect(Collectors.toMap(ListElement::getStringElement, Function.identity(), (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; listElementMap2 = elements.stream().collect(Collectors.toMap(ListElement::getStringElement, ListElement::getIntElement, (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure><p><code>(k1, k2) -&gt; k2</code>指定key重复时的覆盖规则，表示重复时取后者，若不指定key重复时会出现异常</p><p><code>Function.identity()</code> 表示原对象本身</p><blockquote><p>过滤</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ListElement&gt; filterElements &#x3D; elements.stream().filter(o -&gt; o.getStringElement().equals(&quot;acb&quot;)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><blockquote><p>分组 group</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;ListElement&gt;&gt; listList = elements.stream().collect(Collectors.groupingBy(ListElement::getIntElement));</span><br></pre></td></tr></table></figure><blockquote><p>排序</p></blockquote><p>单属性 升序或者降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ListElement&gt; sortList = elements.stream().sorted(Comparator.comparing(ListElement::getIntElement)).collect(Collectors.toList());</span><br><span class="line">List&lt;ListElement&gt; reverseSortList = elements.stream().sorted(Comparator.comparing(ListElement::getIntElement).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>reversed()即表示降序排列</p><p>多属性排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ListElement&gt; sortList = elements.stream().sorted(Comparator.comparing(ListElement::getIntElement).thenComparing(ListElement::getByteElement)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><blockquote><p>map 和 flatMap</p></blockquote><ul><li>map将流中的元素进行再次加工形成一个新流</li><li>flatMap先提取属性放入一个比较小的流，然后再将所有的流合并为一个流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ListElement element1 = <span class="keyword">new</span> ListElement(<span class="number">1</span>, (<span class="keyword">byte</span>) <span class="number">1</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">element1.setStrings(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;v&quot;</span>));</span><br><span class="line">ListElement element2 = <span class="keyword">new</span> ListElement(<span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">1</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">element2.setStrings(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>));</span><br><span class="line">List&lt;ListElement&gt; elements = Arrays.asList(element1, element2);</span><br><span class="line">List&lt;String&gt; res = elements.stream().flatMap(o -&gt; o.getStrings().stream()).map(String::toUpperCase).distinct().collect(Collectors.toList());<span class="comment">// [A, B, V, C, D]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> 流操作 </tag>
            
            <tag> 函数式接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok使用</title>
      <link href="/2021/10/10/java/lombok/"/>
      <url>/2021/10/10/java/lombok/</url>
      
        <content type="html"><![CDATA[<p>lombok主要用来自动生成（编译阶段）一些方法代码，如getter、setter、构造函数、toString方法等等，使用前需要在IDE上安装lombok的插件</p><h1 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p>作用在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法</p><h2 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h2><p>即可作用在类上，为类中所有属性生成getter/setter方法；</p><p>也可单用在某一属性上，为某一特定属性生成getter/setter方法；</p><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h2><p>作用于类，覆盖默认的toString()方法，可以通过of属性限定显示某些字段，通过exclude属性排除某些字段。</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p>作用于类，生成类的全参构造函数</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p>作用于类，生成类的无参构造函数</p><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><p>作用于类，将类转变为建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer param1;</span><br><span class="line">    <span class="keyword">private</span> Integer param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpDto dto = HttpDto.builder().param1(<span class="number">1</span>).param2(<span class="number">2</span>).build();</span><br></pre></td></tr></table></figure><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><p>作用于类，生成包含final和@NonNull注解的成员变量的构造器</p><h2 id="CleanUp"><a href="#CleanUp" class="headerlink" title="@CleanUp"></a>@CleanUp</h2><p>自动关闭资源，针对实现了java.io.Closeable接口的对象有效，如：典型的IO流对象</p><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><p>主要作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><blockquote><p>优势</p></blockquote><p>一定程度提高了开发效率</p><p>代码更加简洁</p><p>属性修改时不用特意去维护getter setter方法</p><blockquote><p>缺点</p></blockquote><p>不支持多种参数构造器的重载</p><p>大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</p><p>如果我们定义的一个jar包中使用了Lombok，那么就要求所有依赖这个jar包的所有应用都必须安装插件，这种侵入性是很高的</p><p>代码可读性，可调试性低</p><p>参考：</p><p><a href="https://www.cnblogs.com/heyonggang/p/8638374.html">https://www.cnblogs.com/heyonggang/p/8638374.html</a></p><p><a href="https://www.jianshu.com/p/2543c71a8e45">https://www.jianshu.com/p/2543c71a8e45</a></p><p><a href="https://cloud.tencent.com/developer/article/1589073">https://cloud.tencent.com/developer/article/1589073</a></p><p><strong>综上，个人认为正式的生产项目还是不要使用lombok了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格数据导出方案</title>
      <link href="/2021/09/01/mysql/mysql%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E6%88%90csv%E6%96%B9%E6%A1%88/"/>
      <url>/2021/09/01/mysql/mysql%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E6%88%90csv%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="select-into-outfile方式"><a href="#select-into-outfile方式" class="headerlink" title="select into outfile方式"></a>select into outfile方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sys_user INTO OUTFILE &#39;D:&#x2F;&#x2F;sys_user.csv&#39;</span><br><span class="line">FIELDS TERMINATED BY &#39;,&#39; OPTIONALLY ENCLOSED BY &#39;&quot;&#39;</span><br><span class="line">LINES TERMINATED BY &#39;\r\n&#39;;</span><br></pre></td></tr></table></figure><p><code>&#39;D://sys_user.csv&#39;</code> 指定的导出csv文件路径（仅限在mysql服务器上）</p><p><code>FIELDS TERMINATED BY &#39;,&#39;</code>导出的字段间的分隔符为’,’</p><p><code>OPTIONALLY ENCLOSED BY &#39;&quot;&#39;</code> 导出的字段用“””包裹 这个可以解决字段中包含“,”时 导致CSV产生多列</p><p><code>LINES TERMINATED BY &#39;\r\n&#39;</code> 指定换行</p><blockquote><p>缺点</p></blockquote><ul><li><code>--secure-file-priv</code>问题</li></ul><p>show global variables like ‘%secure_file_priv%’;</p><p>secure_file_priv需要配置值 （一个目录或者是空 但不能为NULL）</p><p>上面指定导出文件的路径时需要在secure_file_privp配置的目录下，否则无法导出</p><p>参考：<a href="https://www.cnblogs.com/dazhan/p/9815194.html">https://www.cnblogs.com/dazhan/p/9815194.html</a></p><ul><li>局限</li></ul><p>导出的文件路径范围只限于数据库服务器中</p><h1 id="mysql-e-跨服务器导出"><a href="#mysql-e-跨服务器导出" class="headerlink" title="mysql -e 跨服务器导出"></a>mysql -e 跨服务器导出</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql -u<span class="string">&quot;root&quot;</span> -p<span class="string">&quot;123456&quot;</span>  -e <span class="string">&quot;</span></span></span><br><span class="line">select sch_name,sch_addr,sch_profession from all_university;</span><br><span class="line">quit&quot; | awk &#x27;&#123;print $1&quot;,&quot;,$2&quot;,&quot;$3&#125;&#x27; &gt; log.csv</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.jianshu.com/p/092a6c260c2f">https://www.jianshu.com/p/092a6c260c2f</a></p><p><a href="https://blog.csdn.net/xsj_blog/article/details/52617199">https://blog.csdn.net/xsj_blog/article/details/52617199</a></p><h1 id="mysqldump方式"><a href="#mysqldump方式" class="headerlink" title="mysqldump方式"></a>mysqldump方式</h1><p>基本和into outfile一致，mysqldump导出csv格式只能在本地进行，无法远程操作</p><h1 id="一点tips"><a href="#一点tips" class="headerlink" title="一点tips"></a>一点tips</h1><blockquote><p>导出字段自动被科学计数显示</p></blockquote><p>在导出字段时，有些字段字符串比较长且又都是数字，导出CSV打开后会自动转成科学计数，可能末尾的一些字符全部都置为0了，可以在输出字段值时使用concat(xxx,’\t’);</p><blockquote><p>一些NULL值字段导出后显示为\N</p></blockquote><p>导出的字段可能为NULL时，select时使用ifnull(xxx,’’);</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> select into outfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GROUP_CONCAT()函数使用</title>
      <link href="/2021/08/29/mysql/group_concat/"/>
      <url>/2021/08/29/mysql/group_concat/</url>
      
        <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>按组(group by)合并对应字段的值用”,”（默认分隔符）隔开，返回一个字符串结果</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>语法</p></blockquote><p>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )；</p><p>[] 表示optional 可选</p><p>distinct 可用来去重</p><p>order by 可用来设置合并的顺序</p><p>separator 可用来指定自定义分隔符</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>group_concat处理字符串的长度是由限制的，默认长度为1024,如果拼接的字符串超过1024,就会在数据库里面被截取,所以不会显示所有拼接数据。</p><p>另外在使用group_concat语句的同时，使用union时这个长度会缩减至341 (1024/3) <a href="https://www.zhihu.com/question/330522940/answer/723077536">https://www.zhihu.com/question/330522940/answer/723077536</a></p><p>解决：设置合理的<code>group_concat_max_len</code> 最大group_concat长度</p>]]></content>
      
      
      
        <tags>
            
            <tag> GROUP_CONCAT() </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试概述"><a href="#单元测试概述" class="headerlink" title="单元测试概述"></a>单元测试概述</h1><p>最近读代码整洁之道，了解了单元测试的重要性，单元测试可以在极大程度上保证我们在以前的代码上的修改没有什么问题(比如新的更改对其它关联业务产生的影响)，基本可以保障代码实际运行情况与我们的预期保持一致。TDD(测试驱动开发)真的很不错，不然都没信心重构代码和修改代码。</p><p>关于写单元测试的一些好的标准/<a href="https://www.jianshu.com/p/37ffeef5ee5b">规范</a>：</p><ul><li>每个测试一个概念，正所谓单元测试</li><li>自动化，测试自动化，结果判断自动化</li><li>可重复执行</li><li>针对性，一个单元测试只测一个方法</li><li>彻底性，覆盖所有可能的情况，保持代码路径覆盖率越高越好</li><li>单测应该测试目标方法本身的逻辑，对于被测试的方法内部调用的非私有方法应进行mock，推荐使用Mockito进行mock（避免因其它方法导致当前方法的逻辑出现问题）</li><li>独立性，不依赖于其它单元测试</li><li>对实现类进行测试而非接口</li><li>隔离性，涉及到数据变更，必须进行回滚</li><li>只需要测含有业务逻辑的方法（包括service层 dao层 含有业务逻辑controller层的一些方法），只要是提供了逻辑的就应该测试</li><li>私有方法通过调用类的单测进行测试（抽象成另外一个类中的public方法/在测试中利用反射进行调用）</li><li>测试保护正向测试和反向测试（正常/异常情况都应覆盖，其对于异常的测试可以异常测试的相关注解，不要在test中使用try catch）</li><li>如果被测试的方法的逻辑结果体现在方法返回或成员变量中，则使用Assert断言验证该返回或成员变量</li><li>如果被测试的方法的逻辑体现在内部的方法调用行为本身，则使用Mockito的verify验证内部方法调用的情况</li><li>单测应在相应的目标方法开发完后立即编写，如能在开发前就开始编写则更好（TDD）</li></ul><h1 id="测试覆盖率实践-IDEA"><a href="#测试覆盖率实践-IDEA" class="headerlink" title="测试覆盖率实践(IDEA)"></a>测试覆盖率实践(IDEA)</h1><p>业务代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((x &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is Odd&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is not Odd&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保证有测试目录</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724115801746.png" alt="image-20210724115801746"></p><p>光标停在isOdd方法上，ctrl+shift+T ，enter，自动生成测试模板</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724115830641.png" alt="image-20210724115830641"></p><p>完成单元测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Main main;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        main = <span class="keyword">new</span> Main();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isOdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res1 = main.isOdd(<span class="number">1</span>);</span><br><span class="line">        Assert.assertTrue(res1 == <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res2 = main.isOdd(<span class="number">2</span>);</span><br><span class="line">        Assert.assertTrue(res2 == <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行单元测试</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120059121.png" alt="image-20210724120059121"></p><p>带有覆盖率统计的运行</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120148795.png" alt="image-20210724120148795"></p><p><a href="https://blog.csdn.net/qq_31702847/article/details/104866713">运行结果</a></p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120508826.png" alt="image-20210724120508826"></p><h1 id="MockMvc使用"><a href="#MockMvc使用" class="headerlink" title="MockMvc使用"></a>MockMvc使用</h1><p>参考：</p><p><a href="https://blog.csdn.net/wo541075754/article/details/88983708">https://blog.csdn.net/wo541075754/article/details/88983708</a></p><p><a href="https://blog.csdn.net/qq_16513911/article/details/83018027">https://blog.csdn.net/qq_16513911/article/details/83018027</a></p><p><a href="https://blog.csdn.net/wsh596823919/article/details/81662887">https://blog.csdn.net/wsh596823919/article/details/81662887</a></p><p><a href="https://www.cnblogs.com/lyy-2016/p/6122144.html">https://www.cnblogs.com/lyy-2016/p/6122144.html</a></p><h3 id="MockMvcBuilders"><a href="#MockMvcBuilders" class="headerlink" title="MockMvcBuilders"></a>MockMvcBuilders</h3><p>用于初始化mockMvc，主要分为两种初始化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集成Web环境测试</span></span><br><span class="line">mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更具针对性 所需条件范围最小</span></span><br><span class="line">mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> IndexController()).build();</span><br></pre></td></tr></table></figure><h3 id="MockMvcRequestBuilders"><a href="#MockMvcRequestBuilders" class="headerlink" title="MockMvcRequestBuilders"></a>MockMvcRequestBuilders</h3><p>用于构建请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line">MockHttpServletRequestBuilder getReq = MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>);</span><br><span class="line"><span class="comment">// post 请求</span></span><br><span class="line">MockHttpServletRequestBuilder postReq = MockMvcRequestBuilders.post(<span class="string">&quot;/api/user&quot;</span>);</span><br></pre></td></tr></table></figure><p>请求参数的配置</p><ul><li>路径参数</li></ul><p>@PathVariable 配置的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/user/&#123;userId&#125;/&#123;userName&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId,<span class="meta">@PathVariable</span> String userName)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user/&#123;userId&#125;/&#123;userName&#125;&quot;</span>, <span class="number">1</span>,<span class="string">&quot;name1&quot;</span>)</span><br></pre></td></tr></table></figure><p>@RequestParam配置的参数（或者不带@RequestParm注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(<span class="meta">@RequestParam</span> Integer userId,<span class="meta">@RequestParam</span> String userName)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userId&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;name2&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>表单参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userId&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;name2&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userPsw&quot;</span>,<span class="string">&quot;psw2&quot;</span>)</span><br><span class="line">        .contentType(MediaType.APPLICATION_FORM_URLENCODED)</span><br></pre></td></tr></table></figure><p>.contentType()设置请求参数媒体类型</p><ul><li>JSON请求体参数(post)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.post(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">                .content(JSONObject.toJSONString(map))</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br></pre></td></tr></table></figure><p>map：封装的参数map</p><h3 id="ResultActions"><a href="#ResultActions" class="headerlink" title="ResultActions"></a>ResultActions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultActions resultActions=mockMvc.perform(request);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加验证断言来判断执行请求后的结果是否是预期的</span></span><br><span class="line"><span class="function">ResultActions <span class="title">andExpect</span><span class="params">(ResultMatcher matcher)</span></span>;</span><br><span class="line"><span class="comment">// 添加结果处理器，用于对验证成功后执行的动作，如输出下请求/结果信息用于调试</span></span><br><span class="line"><span class="function">ResultActions <span class="title">andDo</span><span class="params">(ResultHandler handler)</span></span>;</span><br><span class="line"><span class="comment">// 返回验证成功后的MvcResult；用于自定义验证/下一步的异步处理； </span></span><br><span class="line"><span class="function">MvcResult <span class="title">andReturn</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="ResultHandler"><a href="#ResultHandler" class="headerlink" title="ResultHandler"></a>ResultHandler</h3><p>action抽象，一般就是用resultActions.andDo(print())；输出至控制台</p><h3 id="ResultMatcher"><a href="#ResultMatcher" class="headerlink" title="ResultMatcher"></a>ResultMatcher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">status():得到响应状态验证器;</span><br><span class="line">cookie():得到响应cookie验证器;</span><br><span class="line">content():得到响应内容验证器;</span><br><span class="line">view():得到响应视图验证器;</span><br><span class="line">model():得到响应模型验证器;</span><br><span class="line">forwardedUrl():验证处理完请求后转发的url（绝对匹配）;</span><br></pre></td></tr></table></figure><h3 id="MvcResult"><a href="#MvcResult" class="headerlink" title="MvcResult"></a>MvcResult</h3><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210726233358985.png" alt="image-20210726233358985"></p><h1 id="WEB项目中的单元测试实践"><a href="#WEB项目中的单元测试实践" class="headerlink" title="WEB项目中的单元测试实践"></a>WEB项目中的单元测试实践</h1><h2 id="Controller层的单元测试"><a href="#Controller层的单元测试" class="headerlink" title="Controller层的单元测试"></a><a href="https://www.cnblogs.com/hthuang/p/6902998.html">Controller层的单元测试</a></h2><p>一般来说，controller层不含业务逻辑，不需要单元测试；但也避免不了有些controller就是包含一点业务逻辑</p><h3 id="调用请求路径测试"><a href="#调用请求路径测试" class="headerlink" title="调用请求路径测试"></a>调用请求路径测试</h3><h3 id="调用Controller方法测试"><a href="#调用Controller方法测试" class="headerlink" title="调用Controller方法测试"></a>调用Controller方法测试</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> 测试覆盖率 </tag>
            
            <tag> mockMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组类的解题总结</title>
      <link href="/2021/07/24/LeetCode/array/"/>
      <url>/2021/07/24/LeetCode/array/</url>
      
        <content type="html"><![CDATA[<h1 id="N数之和-对撞指针"><a href="#N数之和-对撞指针" class="headerlink" title="N数之和(对撞指针)"></a>N数之和(对撞指针)</h1><p>一般需要保持数组有序，首先进行排序</p><p>固定第1个数，再固定第二个数…留下最后两个游标表示最后两个数，得到他们临时的一个和与目标值比较，大了右游标左移，小了左游标右移，相等则记录结果，左右游标同时往中间靠，这个过程需要排除重复值；</p><p>注意特例的判断，可以避免不必要的遍历循环，比如三数之和，排序后，前三个最小的数之和已经大于目标值/后三个最大的数之和小于目标值 就没必要进行后续的遍历的，可以直接返回结果了</p><h1 id="最大装水量（对撞指针）"><a href="#最大装水量（对撞指针）" class="headerlink" title="最大装水量（对撞指针）"></a>最大装水量（对撞指针）</h1><p>高度取左右指针对应高度更高的；宽度取左右指针间隔距离；移动时，高度较低的指针率先往中间靠；每次得到一个装水量(高度*宽度)，最后取最大的即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求头和响应头</title>
      <link href="/2021/06/28/%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/"/>
      <url>/2021/06/28/%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><p>参考：</p><p><a href="https://www.jianshu.com/p/9a68281a3c84">https://www.jianshu.com/p/9a68281a3c84</a></p><p><a href="https://blog.csdn.net/u010256388/article/details/68491509">https://blog.csdn.net/u010256388/article/details/68491509</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shakespeare/notes/9a68281a3c84/recommendations</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.jianshu.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">sec-ch-ua</span>: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span>: ?0</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 FS</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: empty</span><br><span class="line"><span class="attribute">Referer</span>: https://www.jianshu.com/p/9a68281a3c84</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span>: xxxxxxx</span><br><span class="line"><span class="attribute">If-None-Match</span>: W/&quot;c5503ab624458a4bebfbe64638314ca0&quot;</span><br></pre></td></tr></table></figure><p>请求行+请求头+请求体</p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shakespeare/notes/9a68281a3c84/recommendations</span> HTTP/1.1</span><br></pre></td></tr></table></figure><p>依次是请求方法类型、请求URL、HTTP协议和版本</p><h2 id="请求头-1"><a href="#请求头-1" class="headerlink" title="请求头"></a>请求头</h2><p>主要是一些属性的设置</p><ul><li>host</li></ul><p>发送请求的页面的域名，主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</p><ul><li>Connection</li></ul><p>浏览器与服务器的连接类型；</p><p>e.g:</p><p><code>Connection: keep-alive</code> 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接;</p><p><code>Connection: close</code> 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭。当客户端再次发送Request，需要重新建立TCP连接</p><ul><li>Refer</li></ul><p>发送请求的页面的URI。当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的;</p><p>比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站</p><ul><li>User-Agent</li></ul><p><a href="https://blog.csdn.net/ahaotata/article/details/84523055">https://blog.csdn.net/ahaotata/article/details/84523055</a></p><p>向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识</p><ul><li>Accept</li></ul><p>告诉服务端，客户端接收什么类型的响应，希望接受的数据类型；</p><p>e.g:</p><p><code> */*</code>:接受任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> 类型的资源</p><p><code>application/json</code>:</p><h1 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h1>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP请求头 </tag>
            
            <tag> HTTP响应头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点mysql心得</title>
      <link href="/2021/06/25/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/"/>
      <url>/2021/06/25/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>1.写sql时涉及大表，或者未来会成为大表的表都需要考虑慢查询，提前根据业务建好索引，充分利用好索引</p><p>2.写涉及更新插入的业务，需要考虑事务，如果某一阶段出现异常对全局的影响是否符合预期，需不需要回滚</p><p>3.涉及临界资源（可通过多种渠道改变其状态时），应当加锁处理，保证互斥性</p><p>4.慢查询优化</p><ul><li>​    搞清楚需要获取的目标信息，当为了获取这些信息时需要不得已关联多个表时（尤其存在较大数据量的表），需要斟酌先查哪个表，一般是避免先查大表。比如A表(大表),B表(小表)，最终的结果是由A表和B表共同决定的，先查A表再查B表筛选一般来说效率要低很多，这时可以先查出B表，过滤性更高，再可通过B表一些额外的关联属性去根据A表再滤除(exist等等)</li><li>分页查询查的慢，除了分页本身的查询优化外，还需要看查总记录数的count查询语句，如果只是简单的加一层count(*)的封装一般是不合理的；一次性查出所有的记录可能确实比较慢，但是在查询一页的数据时因查count时导致慢查询进而失败确有些可惜；limit越靠前的数据查询时会比较迅速的</li><li>在做业务时需要查询数据库时，尽可能只获取自己需要的数据；写查询逻辑前思考下：我一定需要这么查么，我有必要查出这么信息么:一个很简单的事情，比如我只需要知道有没有，并不关注有多少个，此时就没必要去统计多少个的信息</li><li>关于冗余的设计，我觉得那些不会变动的信息且又需要被关联显示的时候，大可以在主表加上冗余字段，这样在查询时无需再去关联表</li></ul><h1 id="编程习惯"><a href="#编程习惯" class="headerlink" title="编程习惯"></a>编程习惯</h1><p>1.new 对象() ；代码顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Xxx xx=<span class="keyword">new</span> Xxx();</span><br><span class="line"><span class="keyword">if</span>(yyy)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xxx xx=new Xxx(); 应该放在if块后面。避免不必要的对象创建，浪费空间</p><h1 id="锁的使用"><a href="#锁的使用" class="headerlink" title="锁的使用"></a>锁的使用</h1><p>注意跟事务在一起使用的问题，锁在事务提交之前释放导致锁失效。</p><p>建议将锁的部分放在Controller层中 不要放在有事务的Service层方法中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 好习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/2021/06/06/cookie/"/>
      <url>/2021/06/06/cookie/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p><a href="https://www.cnblogs.com/zhuanzhuanfe/p/8010854.html">https://www.cnblogs.com/zhuanzhuanfe/p/8010854.html</a></p><p><a href="https://www.cnblogs.com/daysme/p/8052930.html">https://www.cnblogs.com/daysme/p/8052930.html</a></p><p>简要描述：cookie的存在是为了弥补HTTP连接的无状态，由服务器产生，存在客户端(浏览器，通过小型文本文件存储 大小有限制一般是4K 与浏览器有关)，下次请求带上这个cookie，以维持连接状态；但是cookie的安全性是个弊端，一般在cookie存储敏感信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m5</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// K-V cookie键值</span></span><br><span class="line">       Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;ztt&quot;</span>);</span><br><span class="line">       <span class="comment">// 限制了cookie对HTTP请求的作用范围。特别的，该属性指示用户代理忽略那些通过&quot;非 HTTP&quot; 方式对 cookie 的访问（比如浏览器暴露给js的接口）</span></span><br><span class="line">       <span class="comment">// document.cookie是获取不到改cookie的</span></span><br><span class="line">       cookie1.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">// 正数：表示在指定秒后失效；负数：表示会话cookie,关闭浏览器即失效</span></span><br><span class="line">       cookie1.setMaxAge(<span class="number">100000</span>);</span><br><span class="line">       <span class="comment">// 可以访问此cookie的域名</span></span><br><span class="line">       cookie1.setDomain(<span class="string">&quot;baidu.com&quot;</span>);</span><br><span class="line">       <span class="comment">// 是否只能通过https来传递此条cookie true-是 false-否</span></span><br><span class="line">       cookie1.setSecure(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">// 指定与cookie关联在一起的网页 baidu.com/test路径下的页面才可以使用该cookie</span></span><br><span class="line">       cookie1.setPath(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置新的V值</span></span><br><span class="line">       cookie1.setValue(<span class="string">&quot;new&quot;</span>);</span><br><span class="line">       Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;psw&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">       response.addCookie(cookie1);</span><br><span class="line">       response.addCookie(cookie2);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>请求<a href="http://localhost:8080/login%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%B4%EF%BC%9A">http://localhost:8080/login的响应头：</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span>: 13</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Date</span>: Thu, 03 Jun 2021 08:51:35 GMT</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=60</span><br><span class="line"><span class="attribute">Set-Cookie</span>: user=new; Max-Age=100000; Expires=Fri, 04-Jun-2021 12:38:15 GMT; Domain=baidu.com; Path=/test; Secure; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span>: psw=123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA</title>
      <link href="/2021/05/29/idea/"/>
      <url>/2021/05/29/idea/</url>
      
        <content type="html"><![CDATA[<h1 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h1><p><a href="http://idea.medeming.com/jihuoma/">http://idea.medeming.com/jihuoma/</a> </p><p>下载，将txt上的激活码粘上去即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JetBrains激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven命令</title>
      <link href="/2021/05/25/maven/maven%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/05/25/maven/maven%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="清空构建产物"><a href="#清空构建产物" class="headerlink" title="清空构建产物"></a>清空构建产物</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>详细参考：<a href="https://www.cnblogs.com/hiver/p/7850954.html">https://www.cnblogs.com/hiver/p/7850954.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -Dmaven.test.skip -pl parentModule.childModule -am -Pcustom_profile</span><br></pre></td></tr></table></figure><p><code>-Dmaven.test.skip</code> 跳过测试代码</p><p><code>-pl XXX.xxx </code>  选择指定模块  父模块.子模块</p><p><code>-am</code>  同时处理选定模块所依赖的模块 </p><p><code>-Pxxxx</code> 选定构建的profile环境</p><h1 id="mvn-install"><a href="#mvn-install" class="headerlink" title="mvn install"></a>mvn install</h1><p>完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</p><h1 id="mvn-deploy"><a href="#mvn-deploy" class="headerlink" title="mvn deploy"></a>mvn deploy</h1><p>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码</title>
      <link href="/2021/05/24/%E5%85%B6%E4%BB%96/%E7%BC%96%E7%A0%81/"/>
      <url>/2021/05/24/%E5%85%B6%E4%BB%96/%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>参考：</p><p><a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html">https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html</a></p><p>1.按照何种规则将字符存储在计算机中，如’a’用什么表示，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”</p><p>2.字符，抽象的最小文本单位， 仅仅代表一个符号 ，是一个英文字母也可能是汉字亦或是一个特殊符号</p><p>3.字符集，某个符号和某个数字映射关系的一个表，不同的表有不同的映射关系</p><p>4.字符编码方式，决定一个字符的表示方式</p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>American Standard Code for Information Interchange，美国信息互换标准代码</p><p>使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符</p><p>标准 ASCII码一共规定了128个字符的编码，只占用了一个字节的后面7位，最前面的1位统一规定为0</p><h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><p>对 ASCII 的中文扩展</p><h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。</p><h2 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h2><p>又加了几千个新的少数民族的字，GBK 扩成了 GB18030</p><h2 id="UNICODE"><a href="#UNICODE" class="headerlink" title="UNICODE"></a>UNICODE</h2><p>包括了地球上所有文化、所有字母和符号的编码;在UNICODE 中，一个字符就是两个字节，不论是英文字符还是汉字，前三种支持中文的编码方式都是使用双字节表示汉字，用单字节表示英文字符</p><p>存在的问题：</p><p>第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的</p><p><a href="https://blog.csdn.net/hongsong673150343/article/details/88584753">https://blog.csdn.net/hongsong673150343/article/details/88584753</a></p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8是Unicode的实现方式之一</p><p>是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p><p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p><h2 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h2><p>一种字符代码，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截器实现</title>
      <link href="/2021/05/24/Spring/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2021/05/24/Spring/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>用于对请求进行拦截处理</p><p>详细参考：<a href="https://www.cnblogs.com/bear7/p/13390202.html">https://www.cnblogs.com/bear7/p/13390202.html</a></p><h1 id="自定义实现方式"><a href="#自定义实现方式" class="headerlink" title="自定义实现方式"></a>自定义实现方式</h1><p>HandlerInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implements HandlerInterceptor</span><br></pre></td></tr></table></figure><p>HandlerInterceptorAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends HandlerInterceptorAdapter</span><br></pre></td></tr></table></figure><p>重写 <strong>preHandler()**、 **postHandler()</strong> 、 **afterCompletion():**方法</p><h1 id="过滤器VS拦截器"><a href="#过滤器VS拦截器" class="headerlink" title="过滤器VS拦截器"></a>过滤器VS拦截器</h1><p>详细参考：<a href="https://www.cnblogs.com/panxuejun/p/7715917.html">https://www.cnblogs.com/panxuejun/p/7715917.html</a></p><p>过滤器属于sevlert规范（要早于拦截器执行）</p><p>拦截器属于Spring框架所支持的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全问题及解决</title>
      <link href="/2021/05/24/Web/web%E5%AE%89%E5%85%A8/"/>
      <url>/2021/05/24/Web/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="路径穿越攻击"><a href="#路径穿越攻击" class="headerlink" title="路径穿越攻击"></a>路径穿越攻击</h1><p>利用平台暴露的文件下载接口，加上“上层目录符号../  ..”跳至父目录，该漏洞可下载服务器上的任意文件（越权）</p><p>修复方案：</p><p>1）最终的下载路径特殊符号（.. ../等）过滤，防止跨目录下载，另项目提供的下载文件资源 最好设置一个相对独立的父目录，父目录不要设置为”/“ “/root”等</p><p>2）换文件下载策略，通过id和文件路径的对应关系来表征文件下载路径，不直接暴露文件下载的接口</p><h1 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h1><p>不能仅在前端的菜单项作权限，后端接口同样需要作权限校验，否则可通过接口工具(postman等)直接越过前端直接执行接口业务，造成意料之外的结果</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 路径穿越 </tag>
            
            <tag> 越权操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax属性配置</title>
      <link href="/2021/05/24/Web/ajax/"/>
      <url>/2021/05/24/Web/ajax/</url>
      
        <content type="html"><![CDATA[<p>详细参考：<a href="https://www.cnblogs.com/tylerdonet/p/3520862.html">https://www.cnblogs.com/tylerdonet/p/3520862.html</a></p><p>列举几个比较常用的属性：</p><h1 id="url"><a href="#url" class="headerlink" title="url"></a>url</h1><p>String类型，请求地址url</p><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>String类型，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p><h1 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h1><p>Boolean类型，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><p>Object或String类型，发送到服务器的数据</p><h1 id="contentType"><a href="#contentType" class="headerlink" title="contentType"></a>contentType</h1><p>String类型，发送数据到服务器时的内容编码类型， 内容编码类型默认为”application/x-www-form-urlencoded” </p><p>更多参考：<a href="https://www.cnblogs.com/tugenhua0707/p/8975121.html">https://www.cnblogs.com/tugenhua0707/p/8975121.html</a></p><h1 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h1><p>String类型，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p><h1 id="success"><a href="#success" class="headerlink" title="success"></a>success</h1><p>请求成功后调用的回调函数，有两个参数。<br>         (1)由服务器返回，并根据dataType参数进行处理后的数据。<br>         (2)描述状态的字符串。</p><h1 id="error"><a href="#error" class="headerlink" title="error"></a>error</h1><p>请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象</p>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解+拦截器实现权限控制</title>
      <link href="/2021/05/24/Spring/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/05/24/Spring/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>大致思路：</p><p>自定义注解+定义定制拦截器+配置拦截器+在需要的方法体上加上注解</p><p>以实现角色权限控制为例：</p><h1 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequireRoles &#123;</span><br><span class="line">    String[] value(); <span class="comment">// 存放需要角色的String数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于注解的<a href="../../java/%E6%B3%A8%E8%A7%A3/">更多介绍</a></p><h1 id="定制拦截器"><a href="#定制拦截器" class="headerlink" title="定制拦截器"></a>定制拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RolesPermissionInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler.getClass().isAssignableFrom(HandlerMethod.class)) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            RequireRoles requireRoles = handlerMethod.getMethodAnnotation(RequireRoles.class);</span><br><span class="line">            <span class="comment">// 没有相应注解表示无需角色验证</span></span><br><span class="line">            <span class="keyword">if</span> (requireRoles == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] needRoles = requireRoles.value();</span><br><span class="line">            <span class="comment">// 角色的权限验证业务</span></span><br><span class="line">            <span class="keyword">if</span> (!checkRolesPermisson(needRoles, request)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PermissionException(<span class="string">&quot;No Permission of the roles:&quot;</span> + CollUtil.newArrayList(needRoles));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于在Spring中自定义拦截器的<a href="../%E6%8B%A6%E6%88%AA%E5%99%A8/">更多介绍</a></p><h1 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h1><p>一般在spring-web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/static/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ztt.web.interceptor.RolesPermissionInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h1><p>在暴露的接口方法上使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/xxx&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequireRoles(&#123;&quot;root&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">xxxxMethod</span><span class="params">(XXXX xxxx)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring传参方式</title>
      <link href="/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/"/>
      <url>/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="非表单传参"><a href="#非表单传参" class="headerlink" title="非表单传参"></a>非表单传参</h1><h2 id="参数名一致"><a href="#参数名一致" class="headerlink" title="参数名一致"></a>参数名一致</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/regist&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m3</span><span class="params">(String username, String password, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> + username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/regist?username=zt&amp;password=psw&amp;address=hangzhou</span></span><br></pre></td></tr></table></figure><p>不传的话 参数就为null</p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p> 只能接收 URL 路径里的参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m1</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/path/idxxx</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String idx,<span class="meta">@PathVariable(&quot;key&quot;)</span> String keyx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx+<span class="string">&quot;=========&quot;</span>+keyx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/path/idK/idV</span></span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>RequestParam可以接受简单类型的属性，也可以接受对象类型。</p><p>@RequestParam有三个配置参数：</p><ul><li>required 表示是否必须，默认为 true，必须，不提供时会报错。</li><li>defaultValue 可设置请求参数的默认值。</li><li>value 为接收url的参数名（相当于key值）</li></ul><p><code>@RequestParam</code>用来处理 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded </code>编码的内容，<code>Content-Type</code>默认为该属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/regist2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;default username&quot;)</span> String username,<span class="meta">@RequestParam(defaultValue = &quot;default password&quot;)</span> String password,<span class="meta">@RequestParam(defaultValue = &quot;default address&quot;)</span> String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> + username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/regist2?username=zt&amp;password=psw&amp;address=hangzhou</span></span><br></pre></td></tr></table></figure><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>详细参考：<a href="https://blog.csdn.net/justry_deng/article/details/80972817">https://blog.csdn.net/justry_deng/article/details/80972817</a></p><p>只能接收请求体中的参数，也就是只能是 POST 请求才有请求体，GET 请求没有请求体</p><p>使用封装的 bean 或者 JSONObject 接收（非常常用）  前端必须使用 JSON 格式的数据，Content-Type 必须为 application/json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist3&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> +user.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist4&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> +jsonObject.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// ... getter setter</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/image-20210524164758021.png" alt="image-20210524164758021"></p><h1 id="表单（FORM）传参"><a href="#表单（FORM）传参" class="headerlink" title="表单（FORM）传参"></a>表单（FORM）传参</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p> 表单发出的 GET 请求直接通过注解 @RequestParam 进行参数接收即可 </p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p> form 表单使用 post 方法的时候，Content type 的值默认为<code> application/x-www-form-urlencoded;charset=UTF-8</code>。所以后台接收代码需要指定<code> consumes</code> 属性(用于指定处理请求的提交内容类型)</p><p><code>@RequestMapping(value = &quot;/test&quot;, method = RequestMethod.POST, consumes = &quot;application/x-www-form-urlencoded;charset=UTF-8&quot;)</code></p><p>FORM 表单发出的 POST 请求可以直接通过注解<code>@RequestParam</code>进行参数接收，</p><p>也可以使用字段对应封装的 Java Bean 对象来接收参数。注意 Java Bean 对象上不需要注解。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2021/05/24/java/%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/05/24/java/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>@Target(…) 指明注解的作用范围（类、方法…)</p><p>@Target(ElementType.TYPE) 作用接口、类、枚举、注解<br>@Target(ElementType.FIELD) 作用属性字段、枚举的常量<br>@Target(ElementType.METHOD) 作用方法<br>@Target(ElementType.PARAMETER) 作用方法参数<br>@Target(ElementType.CONSTRUCTOR) 作用构造函数<br>@Target(ElementType.LOCAL_VARIABLE)作用局部变量<br>@Target(ElementType.ANNOTATION_TYPE)作用于注解（@Retention注解中就使用该属性）<br>@Target(ElementType.PACKAGE) 作用于包<br>@Target(ElementType.TYPE_PARAMETER) 作用于类型泛型，即泛型方法、泛型类、泛型接口 （jdk1.8加入）<br>@Target(ElementType.TYPE_USE) 类型使用.可以用于标注任意类型除了 class （jdk1.8加入）</p><p>一般比较常用的是<code>ElementType.TYPE ElementType.METHOD</code>类型</p><p>@Retention(…) 表示注解存在阶段（生命周期）是保留在源码（编译期），字节码（类加载）或者运行期（JVM中运行） </p><p>一般用的多的：<code>@Retention(RetentionPolicy.RUNTIME)</code></p><p>参考：</p><p><a href="https://www.jianshu.com/p/9471d6bcf4cf">https://www.jianshu.com/p/9471d6bcf4cf</a></p><p><a href="https://blog.csdn.net/claram/article/details/90717270">https://blog.csdn.net/claram/article/details/90717270</a></p><p><a href="https://blog.csdn.net/weixin_39919527/article/details/80383292">https://blog.csdn.net/weixin_39919527/article/details/80383292</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客——(awk、sed、grep)</title>
      <link href="/2021/05/23/Linux/awk-sed-grep/"/>
      <url>/2021/05/23/Linux/awk-sed-grep/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/vanvan_/article/details/91397655">https://blog.csdn.net/vanvan_/article/details/91397655</a></p><p><code>grep</code>擅长查找功能，<code>sed</code>擅长取行和替换。<code>awk</code>擅长取列。</p><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a><code>awk</code></h1><p><a href="https://blog.csdn.net/lukabruce/article/details/86692471">https://blog.csdn.net/lukabruce/article/details/86692471</a></p><p><code>awk</code>就是把文件逐行的读入，以空格为默认分隔符（可以自定义设置）将每行切片，切开的部分再进行各种分析处理</p><p>如果文件是格式化的，即由分隔符分为多个域的，优先使用<code>awk</code>，适合按列（域）操作</p><p><code>&lt;模式/表达式&gt; &#123; &lt;动作&gt; &#125;</code> 如果匹配到了模式，就会执行后面的动作。如果省略动作，awk 默认会打印（print）输入</p><p><code>awk &#39;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#39;</code><br>第一步：运行<code>BEGIN&#123; commands &#125;</code>语句块中的语句。</p><p>第二步：从文件或标准输入(stdin)读取一行。然后运行<code>pattern&#123; commands</code> }语句块，它逐行扫描文件，从第一行到最后一行反复这个过程。直到文件所有被读取完成。</p><p>第三步：当读至输入流末尾时。运行<code>END&#123; commands &#125;</code>语句块。</p><p>BEGIN语句块在awk開始从输入流中读取行之前被运行，这是一个可选的语句块，比方变量初始化、打印输出表格的表头等语句通常能够写在BEGIN语句块中。</p><p>END语句块在awk从输入流中读取全然部的行之后即被运行。比方打印全部行的分析结果这类信息汇总都是在END语句块中完毕，它也是一个可选语句块。</p><p>pattern语句块中的通用命令是最重要的部分，它也是可选的。假设没有提供pattern语句块，则默认运行{ print }，即打印每个读取到的行。awk读取的每一行都会运行该语句块。</p><p>这三个部分缺少任何一部分都可以。</p><p><code>ls -lh | awk &#39;&#123;print $1&#125;&#39;</code>  列出当前目录和文件 打印第一列</p><ul><li><code>$0</code> 当前记录（这个变量中存放着整个行的内容）</li><li><code>$1~$n</code> 当前记录的第n个字段，字段间由FS分隔</li><li><code>FS</code> 输入字段分隔符 默认是空格或Tab</li><li><code>NF</code> 当前记录中的字段个数，就是有多少列</li><li><code>NR</code> 已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。</li><li><code>FNR</code> 当前记录数，与NR不同的是，这个值会是各个文件自己的行号</li><li><code>RS</code> 输入的记录分隔符， 默认为换行符</li><li><code>OFS</code> 输出字段分隔符， 默认也是空格</li><li><code>ORS</code> 输出的记录分隔符，默认为换行符</li><li><code>FILENAME</code> 当前输入文件的名字</li></ul><p><code>ls -l | awk &#39;&#123;sum += $5&#125; END &#123;print sum&#125;&#39;</code> 统计当前目录下所有文件大小之和</p><p>tt.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name    class    score</span><br><span class="line">a    c1    70</span><br><span class="line">b    c2    75</span><br><span class="line">c    c3    80</span><br><span class="line">d    c4    70</span><br><span class="line">e    c2    90</span><br><span class="line">f    c3    75</span><br><span class="line">g    c2    80</span><br></pre></td></tr></table></figure><p><code>awk &#39;&#123;sum[$2]+=1&#125; END &#123;for( i in sum)if(i!=&quot;class&quot;)print i&quot;\t&quot; sum[i]&#125;&#39; tt.txt</code></p><p><code>awk &#39;NR!=1&#123;sum[$3]+=1&#125; END &#123;for( i in sum) print i&quot;\t&quot; sum[i]&#125;&#39; tt.txt</code></p><p>统计每个class有多少行记录(去除首行)</p><p>要点：</p><p><code>\t</code>       制表符</p><p><code>\n</code>      换行符</p><p><code>~</code>        匹配，与==相比不是精确比较</p><p><code>!~</code>      不匹配，不精确比较</p><p><code>==</code>      等于，必须全部相等，精确比较</p><p><code>!=</code>      不等于，精确比较</p><p><code>&amp;&amp;</code>　  逻辑与</p><p><code>||</code>      逻辑或</p><p><code>+</code>        匹配时表示1个或1个以上</p><p><code>/[0-9][0-9]+/</code>   两个或两个以上数字</p><p><code>/[0-9][0-9]*/</code>    一个或一个以上数字</p><p><code>-F&#39;[:#/]&#39;</code>   定义三个分隔符</p><blockquote><p>去除重复行 保留原有顺序</p></blockquote><p><code>awk &#39;!visited[$0]++&#39; your_file &gt; deduplicated_file</code></p><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a><code>sed</code></h1><p><a href="https://linux.cn/article-10232-1.html">https://linux.cn/article-10232-1.html</a></p><p><a href="https://www.cnblogs.com/liwei0526vip/p/5644163.html">https://www.cnblogs.com/liwei0526vip/p/5644163.html</a></p><p><code>sed</code>主要以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作</p><p>命令格式：</p><p><code>sed [options] &#123;sed-commands&#125; &#123;input-file&#125;;</code></p><p>选项options</p><ul><li><code>-n</code>  等价于<code>--quiet</code>,<code>--silent</code> 使用静默模式,只打印模式匹配的行 </li><li><code>-e</code> 需要用sed对文本内容进行多种操作，则需要执行多条子命令来进行操作 </li></ul><p><code>echo -e &#39;hello world&#39; | sed -e &#39;s/hello/A/&#39; -e &#39;s/world/B/&#39;</code></p><p>等价于<code>echo -e &#39;hello world&#39; | sed &#39;s/hello/A/;s/world/B/&#39;</code> 用分号表示有多个指令</p><ul><li><code>-i</code> sed所做的修改会作用在原文件中；sed默认会把输入行读取到模式空间，简单理解就是一个内存缓冲区，sed子命令处理的内容是模式空间中的内容，而非直接处理文件内容。因此在sed修改模式空间内容之后，并非直接写入修改输入文件，而是打印输出到标准输出。如果需要修改输入文件，那么就可以指定-i选项。</li><li><code>-f</code>指定脚本文件 如果命令操作比较多的时候就会比较麻烦，这时候把多个子命令操作写入脚本文件，然后使用 <code>-f</code> 选项来指定该脚本</li><li><code>-r</code> sed命令的匹配模式支持正则表达式的，默认只能支持基本正则表达式，如果需要支持扩展正则表达式，那么需要添加-r选项。</li></ul><p><code>echo &quot;hello world&quot; | sed -r &#39;s/(hello)|(world)/A/g&#39;</code></p><blockquote><p>定址操作</p></blockquote><p>数字定址：</p><p><code>sed -i &#39;4s/hello/A/&#39; filename</code>   将第4行中hello字符串替换为A，其它行如果有hello也不会被替换</p><p><code>sed -i &#39;2-4s/hello/A/&#39; filename</code>    将第2-4行中hello字符串替换为A，其它行如果有hello也不会被替换</p><p><code>sed -i &#39;2,+4s/hello/A/&#39; filename</code> 从第2行开始，再接着往下数4行，也就是2-6行，这些行会把hello字符替换为A</p><p><code>sed -i &#39;2,~3s/hello/A/&#39; filename</code>  第4行开始，到第6行。解释6的由来，”4,~3”表示从4行开始到下一个3的倍数，这里从4开始算，那就是6了，当然9就不是了，因为是要求3的第一个超过前边数字4的倍数 </p><p><code>sed -i &#39;1~2s/hello/A/&#39; filename</code>   从第1行开始，每隔2行就把hello替换为A</p><p><code>sed -i &#39;$s/hello/A/&#39; filename</code>   把最后一行的hello替换为A</p><p><code>sed -i &#39;$!s/hello/A/&#39; filename</code>   把除了最后一行的hello替换为A 上述其他均可使用!取反</p><p>正则定址:</p><p><code>sed -i &#39;/A/d&#39; hello.txt</code> 将匹配到<code>A</code>的行删除</p><p><code>sed -i &#39;/^$/d&#39; hello.txt</code> 将空白行删除</p><p><code>sed -i &#39;/^begin/,/^end/d&#39; hello.txt</code> 匹配以begin开头的行到end开头的行之间的行，把匹配到的这些行删除</p><p>数字定址和正则定址混用：</p><p><code>sed -i &#39;1,/^end/d&#39; hello.txt</code> 匹配第1行到end开头的行之间的行，把匹配到的这些行删除 （只会删除到第一次匹配的地方而不是最后一次匹配）</p><p><code>sed -i &#39;1,/^BJ/&#123;s/BJ/BeiJing/;s/SH/ShangHai/&#125;&#39; hello.txt</code>匹配第1行到BJ开头的行之间的行，把匹配到的这些行中的BJ替换成BeiJing，SH替换成ShangHai</p><blockquote><p>基本子命令</p></blockquote><ul><li>a   表示在指定行下边插入指定行的内容 </li></ul><p><code>sed -i &#39;a append&#39; hello.txt</code> 每一行下方插入<code>append</code></p><ul><li>i   表示在指定行上边插入指定行的内容 </li></ul><p><code>sed -i &#39;i append&#39; hello.txt</code> 每一行上方插入<code>append</code></p><ul><li>c  替换行内容</li></ul><p><code>sed -i &#39;c replace&#39; hello.txt</code> 每一行替换为<code>replace</code></p><ul><li>d  删除行</li></ul><p><code>sed -i &#39;d&#39; hello.txt</code> 删除所有行</p><ul><li>y  字符替换</li><li>=  将行号打印出来</li><li>r  将指定文件内容附加在后面 类似于a</li><li><strong>s  替换子命令</strong> 用的最多</li></ul><p>基本语法：<br>[address]s/pattern/replacement/flags</p><p>replacement部分用下列字符会有特殊含义</p><p><code>&amp;</code>：用正则表达式匹配的内容进行替换</p><p><code>\n</code>：回调参数</p><p><code>\(\)</code>：保存被匹配的字符以备反向引用\n时使用，最多9个标签，标签书序从左到右</p><p>flags:</p><p><code>n</code>：可以是1-512，表示第n次出现的情况进行替换</p><p><code>g</code>：全局更改</p><p><code>p</code>：打印模式空间的内容</p><p><code>w file</code>：写入到一个文件file中</p><p><code>sed -i &#39;s/.*/111&amp;222/&#39; hello.txt</code> 每行首尾分别加上111 、222</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h1><p><a href="https://www.cnblogs.com/flyor/p/6411140.html">https://www.cnblogs.com/flyor/p/6411140.html</a></p><p>选项：</p><ul><li><code>-E</code> : 开启扩展正则表达式</li><li><code>-i</code>:  忽略大小写</li><li><code>-v</code>:  反过来，只打印没有匹配的，而匹配的反而不打印</li><li><code>-n</code>: 显示行号 </li><li><code>-w</code>:  被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker </li><li><code>-c</code>: 显示总共多少行被匹配 行数</li><li><code>-o</code>: 只显示匹配的内容</li><li><code>-A n</code>: 显示匹配到的字符串所在的行及其后n行，after</li><li><code>-B n</code>: 显示匹配到的字符串所在的行及其前n行，before </li><li><code>-C n</code>: 显示匹配到的字符串所在的行及其前后各n行，context</li></ul><p>基本命令格式：</p><p> grep [选项] [匹配规则]  文件名</p><p>e.g:</p><p><code>grep -A 1 g$ grep.txt</code> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> awk </category>
          
          <category> sed </category>
          
          <category> grep </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> awk </tag>
            
            <tag> sed </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题</title>
      <link href="/2020/08/04/next%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/08/04/next%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="修改布局风格"><a href="#修改布局风格" class="headerlink" title="修改布局风格"></a>修改布局风格</h1><p>themes/next/_config.yml 中可以修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h1 id="修改menu目录-待完善"><a href="#修改menu目录-待完善" class="headerlink" title="修改menu目录(待完善)"></a>修改menu目录(待完善)</h1><p>themes/next/_config.yml 中可以修改</p><h1 id="设置头像图片"><a href="#设置头像图片" class="headerlink" title="设置头像图片"></a>设置头像图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: &#x2F;images&#x2F;head.jpg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure><p>路径\themes\next\source\images下要有对应图片</p><h1 id="添加社交账号"><a href="#添加社交账号" class="headerlink" title="添加社交账号"></a>添加社交账号</h1><p><code>themes/next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;ztt0tian || github</span><br><span class="line">  E-Mail: whutzhaotian@gmail.com || envelope</span><br><span class="line">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || weibo</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || facebook</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure><h1 id="文章字数统计-待完善"><a href="#文章字数统计-待完善" class="headerlink" title="文章字数统计(待完善)"></a>文章字数统计(待完善)</h1><p>安插件：npm i –save hexo-wordcount</p><p>在<code>themes/next/_config.yml</code>中修改配置</p><h1 id="增加站内搜索-待完善"><a href="#增加站内搜索-待完善" class="headerlink" title="增加站内搜索(待完善)"></a>增加站内搜索(待完善)</h1><p>安插件：npm install hexo-generator-search –save</p><p>在<code>themes/next/_config.yml</code>中修改配置</p><h1 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">生活不易，求打赏~</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><p>在next/source/images中有对应图片即可</p><h1 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h1><p>参考：<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">https://blog.csdn.net/baidu_34310405/article/details/102665373</a></p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客写作 </category>
          
          <category> Hexo </category>
          
          <category> Next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2020/08/04/hexo/"/>
      <url>/2020/08/04/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="sever-command"><a href="#sever-command" class="headerlink" title="sever command"></a>sever command</h1><h1 id="服务器命令"><a href="#服务器命令" class="headerlink" title="服务器命令"></a>服务器命令</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo server Hexo  //会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s   //静态模式</span><br><span class="line">hexo server -p <span class="number">5000</span>    //更改端口</span><br><span class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>   //自定义 IP</span><br><span class="line"></span><br><span class="line">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g  //生成静态网页</span><br><span class="line">hexo d  //开始部署</span><br></pre></td></tr></table></figure><h1 id="file-watch"><a href="#file-watch" class="headerlink" title="file watch"></a>file watch</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  //使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch  //监视文件变动</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#source/_posts文件夹会新建paper.md</span></span><br><span class="line">hexo new paper</span><br><span class="line"><span class="comment"># 在source文件夹下创建一个board文件夹，以及board文件夹中的index.md</span></span><br><span class="line">hexo new page board</span><br><span class="line"><span class="comment"># 这样会在source/_draft中新建一个newpage.md文件</span></span><br><span class="line">hexo new draft newpage</span><br><span class="line"><span class="comment"># 这样会在source/_posts/java/文件夹下新建注解.md</span></span><br><span class="line">hexo new page -p java/注解.md</span><br></pre></td></tr></table></figure><p>三种layout：</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>草稿文件写的过程中，想要预览一下，那么可以使用<code>hexo server --draft</code>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中</p><h1 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h1><h2 id="md文档标题为中文时在hexo不能正常跳转"><a href="#md文档标题为中文时在hexo不能正常跳转" class="headerlink" title="md文档标题为中文时在hexo不能正常跳转"></a>md文档标题为中文时在hexo不能正常跳转</h2><p>解决：<a href="https://www.zhihu.com/question/422584701/answer/1491441321">https://www.zhihu.com/question/422584701/answer/1491441321</a></p><h2 id="关于分类、标签等菜单项"><a href="#关于分类、标签等菜单项" class="headerlink" title="关于分类、标签等菜单项"></a>关于分类、标签等菜单项</h2><p>解决：<a href="https://himmy.blog.csdn.net/article/details/93644533">https://himmy.blog.csdn.net/article/details/93644533</a></p><h2 id="特殊符号转义处理"><a href="#特殊符号转义处理" class="headerlink" title="特殊符号转义处理"></a>特殊符号转义处理</h2><p>解决：<a href="http://wxnacy.com/2018/01/12/hexo-specific-symbol/">http://wxnacy.com/2018/01/12/hexo-specific-symbol/</a></p><h1 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a>官方网址</h1><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客写作 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
