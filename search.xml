<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>那些问题</title>
      <link href="/2022/01/03/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/01/03/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="解决SpringBoot打成jar运行后无法读取resources里的文件问题"><a href="#解决SpringBoot打成jar运行后无法读取resources里的文件问题" class="headerlink" title="解决SpringBoot打成jar运行后无法读取resources里的文件问题"></a>解决SpringBoot打成jar运行后无法读取resources里的文件问题</h1><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(name = &#123;&quot;redis.deploy.mode&quot;&#125;,havingValue = &quot;single&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">getSingleClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Config config = Config.fromYAML(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;config/redis-single.yml&quot;</span>).getFile());</span><br><span class="line">        config.useSingleServer();</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题描述</p></blockquote><p>正常在IDEA中启动没问题，但是打包成jar后启动服务时报错</p><p>java.io.FileNotFoundException: class path resource [config/redis-single.ym] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:….  提示文件找不到</p><p>Resource下的文件是存在于jar这个文件里面，在磁盘上是没有真实路径存在的，它其实是位于jar内部的一个路径。所以通过ResourceUtils.getFile或者this.getClass().getResource(“”)方法无法正确获取文件</p><blockquote><p>问题解决</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Config config &#x3D; Config.fromYAML(new ClassPathResource(&quot;config&#x2F;redis-single.yml&quot;).getInputStream());</span><br></pre></td></tr></table></figure><p>必须使用resource.getInputStream()</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>page</title>
      <link href="/2022/01/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/element-ui/basic/"/>
      <url>/2022/01/03/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/element-ui/basic/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/01/01/docker/basic/"/>
      <url>/2022/01/01/docker/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="windows-win10"><a href="#windows-win10" class="headerlink" title="windows[win10]"></a>windows[win10]</h2><p>1.启用虚拟化功能【Hyper-V】</p><p><img src="/2022/01/01/docker/basic/image-20220101174948609.png" alt="image-20220101174948609"></p><p>若存在…禁用 需要在bios中开启对虚拟化的支持</p><p>2.安装docker安装包【官网下载】</p><p>3.启动docker</p><p>报错 大概率是因为WSL2未安装 按照链接进行下载安装即可</p><p>4.测试</p><p><code>docker run hello-world</code></p><p>先会提示本地未找到镜像，然后会尝试从远程拉取，但是一般会拉不下来因为网络原因，故需要进行<a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">docker镜像加速</a></p><p>5.验证测试</p><p>成功标志</p><p><img src="/2022/01/01/docker/basic/image-20220101195624628.png" alt="image-20220101195624628"></p><h1 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/<span class="built_in">echo</span> <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure><p>Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><p>-t: 在新容器内指定一个伪终端或终端</p><p>-i: 允许你对容器内的标准输入 (STDIN) 进行交互</p><h2 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h2><p>创建一个以进程方式运行的容器：</p><p><code>docker run -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</code></p><p><img src="/2022/01/01/docker/basic/image-20220101201036303.png" alt="image-20220101201036303"></p><p>返回的是容器唯一id<code>332d9db9407cebde55b33a5cd32e5563d36de7297c6015539fb9199f4f7ff749</code></p><blockquote><p>容器状态查询</p></blockquote><p><code>docker ps</code> 只查询在运行的容器 加上<code>-a</code>参数会查询所有容器，包括之前停止的容器</p><p><strong>CONTAINER ID:</strong> 容器 ID。</p><p><strong>IMAGE:</strong> 使用的镜像。</p><p><strong>COMMAND:</strong> 启动容器时运行的命令。</p><p><strong>CREATED:</strong> 容器的创建时间。</p><p><strong>STATUS:</strong> 容器状态。</p><p>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running 或 Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p><p><strong>NAMES:</strong> 自动分配的容器名称。</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>容器内部的标准输出</p><p><code>docker logs 332d9db9407c</code>  后为容器id</p><p><code>docker logs magical_dirac</code> 后为容器名称</p><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p><code>docker stop 容器id或者容器名称</code></p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p><code>docker pull 镜像名称</code> 从远程拉取</p><h2 id="启动-重启"><a href="#启动-重启" class="headerlink" title="启动/重启"></a>启动/重启</h2><p><code>docker start 容器ID</code> 启动</p><p><code>docker restart 容器ID</code>    重启</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p><code>docker attach</code> 退出容器终端后会导致容器停止</p><p><code>docker attach 332d9db9407c</code></p><p><code>docker exec</code>退出容器终端后不会导致容器停止</p><p><code>docker exec 332d9db9407c /bin/bash</code></p><h2 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h2><p><code>docker export feb5d9fea6a5 &gt; a.tar</code></p><p>导出容器 332d9db9407c 快照到本地文件 a.tar</p><h2 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h2><p><code>cat b.tar | docker import - test/ubuntu:v2</code></p><p>以下实例将快照文件 b.tar 导入到镜像 test/ubuntu:v2</p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p><code> docker rm -f d5599e167569</code> 删除指定容器</p><p><code>docker container prune</code> 清理掉所有处于终止状态的容器</p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p><code>docker port 容器id或名称</code></p><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><p><code>docker top 容器id或名称</code></p><h2 id="应用检查"><a href="#应用检查" class="headerlink" title="应用检查"></a>应用检查</h2><p><code>docker inspect 容器id或名称</code></p><h2 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h2><p><code>-d</code>:后台运行</p><p><code>-P</code>:将容器内部使用的网络端口随机映射到我们使用的主机上</p><p><code>-p 5000:5000</code>:设置映射到宿主机上的端口</p><p><code>-i</code>: 交互式操作</p><p><code>-t</code>: 终端</p><p><code>--name</code> :标识来命名容器</p><p><code>-d</code>：参数指定 Docker 网络类型，有 bridge、overlay</p><p><code>--rm</code>：容器退出时自动清理容器内部的文件系统</p><p><code>--dns=IP_ADDRESS</code>： 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名</p><p><code>-v</code>: 指定挂载主机目录到容器目录</p><h1 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h1><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载</p><h2 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h2><p><code>docker images </code> 本地主机上的镜像</p><h2 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h2><p><code>docker search kw</code> 搜寻指定关键词的镜像</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p><code> docker rmi hello-world</code> 删除 hello-world 镜像</p><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><blockquote><p>从已经创建的容器中更新镜像，并且提交这个镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:15.10 /bin/bash</span><br><span class="line">apt-get update</span><br><span class="line">docker commit -m=&quot;has update&quot; -a=&quot;tt&quot; 44f8778a6276 tt/ubuntu:v2</span><br><span class="line">docker images</span><br><span class="line">docker run -t -i tt/ubuntu:v2 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>使用 Dockerfile 指令来创建一个新的镜像 </p></blockquote><p>新建Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>    centos:<span class="number">6.7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span>      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     useradd runoob</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">     /bin/<span class="built_in">echo</span> -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">22</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash">     /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure><h2 id="镜像标签"><a href="#镜像标签" class="headerlink" title="镜像标签"></a>镜像标签</h2><p><code> docker tag adf047e3db27 tt/ubuntu:v3</code></p><p><code>:</code>后面即使镜像标签</p><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p><code>docker push REPOSITORY:TAG </code></p><p>通过 docker push 命令将自己的镜像推送到 Docker Hub</p><h1 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h1><h2 id="两个容器互相ping通"><a href="#两个容器互相ping通" class="headerlink" title="两个容器互相ping通"></a>两个容器互相ping通</h2><blockquote><p>创建一个新的 Docker 网络</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge test-net</span><br></pre></td></tr></table></figure><blockquote><p>运行一个容器并连接到新建的 test-net 网络:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><blockquote><p>再运行一个容器并加入到 test-net 网络</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test2 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h2 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置DNS</h2><p>如果在容器启动时没有指定 <strong>–dns</strong> 和 <strong>–dns-search</strong>，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p>FROM</p></blockquote><p>定制的镜像都是基于 FROM 的镜像</p><blockquote><p>RUN</p></blockquote><ul><li>RUN &lt;命令行&gt; 等价于在终端操作的 shell 命令</li><li>RUN [“可执行文件”, “参数1”, “参数2”]</li></ul><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大，如下面第二种更为合适</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot;</span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>COPY</p></blockquote><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</code></p><p>容器内的指定路径【目标路径】，该路径不用事先建好，路径不存在的话，会自动创建。</p><blockquote><p>ADD</p></blockquote><p>与COPY类似 不过在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;</p><blockquote><p>CMD</p></blockquote><p>为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效</p><blockquote><p>ENTRYPOINT</p></blockquote><p>类似于CMD</p><blockquote><p>ENV</p></blockquote><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;&#x3D;&lt;value1&gt; &lt;key2&gt;&#x3D;&lt;value2&gt;...</span><br></pre></td></tr></table></figure><blockquote><p>ARG</p></blockquote><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><blockquote><p>VOLUME</p></blockquote><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><blockquote><p>EXPOSE</p></blockquote><p>只是声明端口</p><blockquote><p>WORKDIR</p></blockquote><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）</p><blockquote><p>USER</p></blockquote><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）</p><h1 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h1><p>先把我们的镜像传到docker仓库中,再由目的地把docker仓库中的镜像拉过去</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h2><p>默认模式，需要端口映射,docker可以指定你想把容器内的某一个端口可以在容器所在主机上的某一个端口它俩之间做一个映射,当你在访问主机上的端口时,其实就是访问容器里面的端口.</p><h2 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h2><p>在启动容器的时候指定使用Host模式,那么这个容器将不会获得一个独立的network namespace,而是和主机共同使用一个,这个时候容器将不会虚拟出自己的网卡,配置出自己的ip.而是使用宿主机上的ip和端口.也就是说在docker上使用网络和在主机上使用网络是一样的</p><h2 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h2><p>还有一种网络类型是None.也就是没有网络,这种情况docker将不会和外界的任何东西进行通讯</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础学习</title>
      <link href="/2021/12/26/vue/basic/"/>
      <url>/2021/12/26/vue/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的一些小技巧</title>
      <link href="/2021/12/26/mysql/%E5%B0%8Ftips/"/>
      <url>/2021/12/26/mysql/%E5%B0%8Ftips/</url>
      
        <content type="html"><![CDATA[<p>1.在导出csv时若数字字符串过长，导致科学计数，且后几位数字归0</p><p>解决：<code>select concat(&#39;\r&#39;,column)</code></p><p>2.between优于data_format</p><p><code>data_format(x.data,%m-%d-%Y&#39;)=&#39;2021-01-01&#39;</code> 查询效率弱于<code>x.data between &#39;2021-01-01 00:00:00&#39; and &#39;2021-01-01 23:59:59&#39;</code></p><p>3.mysql -e 导出csv时sed转换命令</p><p><code>... | sed &#39;s/\t/&quot;,&quot;/g;s/^/&quot;/;s/$/&quot;/;s/\n//g&#39; &gt; file.csv</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redisson实践</title>
      <link href="/2021/12/25/redis/redisson/"/>
      <url>/2021/12/25/redis/redisson/</url>
      
        <content type="html"><![CDATA[<p>配置參考：<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95">https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis的较佳实现 </tag>
            
            <tag> redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis部署模式</title>
      <link href="/2021/12/25/redis/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/25/redis/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-单机模式"><a href="#1-单机模式" class="headerlink" title="1.单机模式"></a>1.单机模式</h1><p>单节点，部署简单</p><blockquote><p>部署</p></blockquote><h1 id="2-主从模式"><a href="#2-主从模式" class="headerlink" title="2.主从模式"></a>2.主从模式</h1><blockquote><p>作用</p></blockquote><p>1）数据备份</p><p>多一份数据备份，方便备份</p><p>2）负载均衡</p><p>主节点写、从节点读</p><blockquote><p>缺点</p></blockquote><p>本身不支持 主从切换 主节点宕机后 需要人工干预 将从节点设置为主节点</p><h1 id="3-哨兵模式"><a href="#3-哨兵模式" class="headerlink" title="3.哨兵模式"></a>3.哨兵模式</h1><p>监控、提醒、自动故障迁移</p><p><a href="http://redis.cn/topics/sentinel.html">http://redis.cn/topics/sentinel.html</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/9004460.html">https://www.cnblogs.com/kevingrace/p/9004460.html</a></p><h1 id="4-集群模式"><a href="#4-集群模式" class="headerlink" title="4.集群模式"></a>4.集群模式</h1><h1 id="5-实际使用-生产环境中"><a href="#5-实际使用-生产环境中" class="headerlink" title="5.实际使用(生产环境中)"></a>5.实际使用(生产环境中)</h1><blockquote><p>主从+哨兵</p></blockquote><blockquote><p>分布式集群</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2021/12/11/springBoot/%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/12/11/springBoot/%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的一些脚手架配置</title>
      <link href="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>代码仓库：<a href="https://github.com/ztt0tian/BootLearn">https://github.com/ztt0tian/BootLearn</a></p><h1 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h1><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>yml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ztt?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:config/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h1 id="mybatisGenerator插件使用"><a href="#mybatisGenerator插件使用" class="headerlink" title="mybatisGenerator插件使用"></a>mybatisGenerator插件使用</h1><blockquote><p>pom中build配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/config/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">&quot;D:\maven_repo\mysql\mysql-connector-java\8.0.27\mysql-connector-java-8.0.27.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span>  <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1/ztt&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.ztt.api.po&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成mapper位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.ztt.api.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;sys_user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;SysUser&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>执行</p></blockquote><p><img src="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/image-20211114140855061.png" alt="image-20211114140855061"></p><p>会在配置的路径下面生成对应的实体类、Dao接口、mapper.xml文件，包含基本的增删改查</p><p><img src="/2021/11/14/springBoot/spring_boot%E8%84%9A%E6%89%8B%E6%9E%B6/image-20211114141105762.png" alt="image-20211114141105762"></p><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p><strong>@RestControllerAdvice + @ExceptionHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ztt.api.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ztt.api.constants.ExceptionConstant;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.dto.ApiResponseDto;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.enums.ResponseEnum;</span><br><span class="line"><span class="keyword">import</span> com.ztt.api.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandleConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">businessExceptionHandle</span><span class="params">(BusinessException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.BUSINESS_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.BUSINESS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">nullExceptionHandle</span><span class="params">(NullPointerException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.NULL_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.SERVER_INTERNAL_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">generalExceptionHandle</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.GENERAL_EXCEPTION_DESC, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.SERVER_INTERNAL_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当自定义类加@ControllerAdvice注解时，方法需要返回json数据时，每个方法还需要添加@ResponseBody注解;而@RestControllerAdvice不需要</p><h1 id="日志配置-logback-xml"><a href="#日志配置-logback-xml" class="headerlink" title="日志配置(logback.xml)"></a>日志配置(logback.xml)</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志格式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] [%thread] [%-30.30logger&#123;30&#125;] %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;infoFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>  <span class="comment">&lt;!-- 如果命中就禁止这条日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>  <span class="comment">&lt;!-- 如果没有命中就使用这条规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/api_info_%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;errorFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/api_error_%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ztt.api&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;infoFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;errorFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="校验配置"><a href="#校验配置" class="headerlink" title="校验配置"></a>校验配置</h1><p>一个字符占用多少字节取决于所使用的字符编码</p><p>这里的校验配置一般指的是基础校验，例如空字符串，null，字符串长短，数值大小等，不包括业务校验和权限校验。一般在controller层做</p><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>约束规则配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户昵称不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 4,max = 16,message = &quot;用户昵称长度4~16&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 16,max = 16,message = &quot;用户密码长度16位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userPsw;</span><br><span class="line">    <span class="meta">@Pattern(regexp = PatterConstant.PHONE_PATTERN,message = &quot;号码无效&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller层使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/userRegister&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">registerUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserAddDto addDto)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sysUserService.registerUser(addDto) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ApiResponseDto.success();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(BUSINESS_ERROR);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证异常统一处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponseDto <span class="title">bindExceptionHandle</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.error(ExceptionConstant.PARAM_ERROR_DESC, e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponseDto.error(ResponseEnum.PARAM_ERROR.getResponseCode(), e.getFieldErrors().stream()</span><br><span class="line">                .map(o-&gt;o.getDefaultMessage()).collect(Collectors.toList()).toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="单元测试-T"><a href="#单元测试-T" class="headerlink" title="单元测试 T"></a>单元测试 T</h1><h1 id="全局事务配置-T"><a href="#全局事务配置-T" class="headerlink" title="全局事务配置 T"></a>全局事务配置 T</h1><h1 id="集成Redis-Redisson"><a href="#集成Redis-Redisson" class="headerlink" title="集成Redis[Redisson]"></a>集成Redis[Redisson]</h1><h1 id="集成RabbitMQ"><a href="#集成RabbitMQ" class="headerlink" title="集成RabbitMQ"></a>集成RabbitMQ</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> mybatis集成 </tag>
            
            <tag> mybatisGenerator插件 </tag>
            
            <tag> 全局异常处理 </tag>
            
            <tag> 校验配置 </tag>
            
            <tag> 全局事务配置 </tag>
            
            <tag> 父子模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="传播机制"><a href="#传播机制" class="headerlink" title="传播机制"></a>传播机制</h1><p><img src="/2021/11/07/Spring/%E4%BA%8B%E5%8A%A1/20170420212829825.png" alt="20170420212829825"></p><p>serviceA</p><table><thead><tr><th>方法</th><th>事务传播机制</th></tr></thead><tbody><tr><td>methodA1</td><td>REQUIRED</td></tr><tr><td>methodA2</td><td>SUPPORTS</td></tr><tr><td>methodA3</td><td>MANDATORY</td></tr><tr><td>methodA4</td><td>NOT_SUPPORTED</td></tr><tr><td>methodA5</td><td>REQUIRES_NEW</td></tr><tr><td>methodA6</td><td>NEVER</td></tr><tr><td>methodA7</td><td>NESTED</td></tr></tbody></table><p>serviceB</p><table><thead><tr><th>方法</th><th>事务传播机制</th></tr></thead><tbody><tr><td>methodB1</td><td>REQUIRED</td></tr><tr><td>methodB2</td><td>SUPPORTS</td></tr><tr><td>methodB3</td><td>MANDATORY</td></tr><tr><td>methodB4</td><td>NOT_SUPPORTED</td></tr><tr><td>methodB5</td><td>REQUIRES_NEW</td></tr><tr><td>methodB6</td><td>NEVER</td></tr><tr><td>methodB7</td><td>NESTED</td></tr></tbody></table><p>模拟业务代码：（以上方法的业务逻辑基本与下类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.insertSelective(<span class="keyword">new</span> SysUser() &#123;&#123;</span><br><span class="line">            setUserName(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">            setUserPsw(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">        <span class="comment">// 模拟业务异常 视需要进行调整</span></span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">0</span>);</span><br><span class="line">        mapper.insertSelective(<span class="keyword">new</span> SysUser() &#123;&#123;</span><br><span class="line">            setUserName(<span class="string">&quot;A11&quot;</span>);</span><br><span class="line">            setUserPsw(<span class="string">&quot;A11&quot;</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="单独事务"><a href="#单独事务" class="headerlink" title="单独事务"></a>单独事务</h1><p>单独调用REQUIRED机制的方法，会开启一个新的事务，遇异常会回滚</p><p>单独调用SUPPORTS机制的方法，不存在事务，遇异常不会回滚</p><p>单独调用MANDATORY机制的方法，会直接抛出事务异常，无法执行业务代码</p><p>单独调用NOT_SUPPORTED机制的方法，以非事务地执行，遇异常不会回滚</p><p>单独调用REQUIRES_NEW机制的方法，等同于REQUIRED，遇异常会回滚</p><p>单独调用NEVER机制的方法，以非事务地执行，遇异常不会回滚</p><p>单独调用NESTED机制的方法，等同于REQUIRED，遇异常会回滚</p><h1 id="嵌套事务"><a href="#嵌套事务" class="headerlink" title="嵌套事务"></a>嵌套事务</h1><h2 id="同一service嵌套"><a href="#同一service嵌套" class="headerlink" title="同一service嵌套"></a>同一service嵌套</h2><p>实际与单独事务一样，事务表现取决于外层方法的事务配置，内层方法的事务配置在此场景不会生效</p><h2 id="不同service嵌套"><a href="#不同service嵌套" class="headerlink" title="不同service嵌套"></a>不同service嵌套</h2><h3 id="常规嵌套"><a href="#常规嵌套" class="headerlink" title="常规嵌套"></a>常规嵌套</h3><p>外层方法：serviceA中的methodAX</p><p>内层方法：serviceB中的methodBX</p><table><thead><tr><th>嵌套场景(外层A+内层B)</th><th>一般效果</th></tr></thead><tbody><tr><td>REQUIRED+REQUIRED</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+SUPPORT</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+MANDATORY</td><td>内外层方法任何一个出现异常，全部回滚，共用外层事务</td></tr><tr><td>REQUIRED+NOT_SUPPORTED</td><td>内外层方法任何一个出现异常，外层会回滚，内层不回滚，外层有事务，内层无事务</td></tr><tr><td>REQUIRED+REQUIRES_NEW</td><td>内外层方法任何一个出现异常，外层会回滚；内层只有在内层方法出现异常才会回滚；内层事务先提交而不是等外层事务结束再提交</td></tr><tr><td>REQUIRED+NEVER</td><td>内层方法直接抛出事务异常，外层回滚，内层业务不会执行【矛盾策略】</td></tr><tr><td>REQUIRED+NESTED</td><td>内外层方法任何一个出现异常，全部回滚，内层事务是外层事务子事务，待外层事务结束才提交</td></tr></tbody></table><p>一般的效果是指没有在外层方法对内层方法主动进行异常捕获处理，即简单的直接调用</p><p>其他组合的嵌套可以结合上述以及传播机制说明进行推断出</p><h3 id="特殊嵌套"><a href="#特殊嵌套" class="headerlink" title="特殊嵌套"></a>特殊嵌套</h3><blockquote><p>REQUIRED+REQUIRED+外层捕获内层异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation &#x3D; Propagation.REQUIRED)</span><br><span class="line">@Override</span><br><span class="line">public void methodA1BX() &#123;</span><br><span class="line">    mapper.insertSelective(new SysUser() &#123;&#123;</span><br><span class="line">        setUserName(&quot;A1&quot;);</span><br><span class="line">        setUserPsw(&quot;A1&quot;);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    try &#123;</span><br><span class="line">        serviceB.methodB1();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    mapper.insertSelective(new SysUser() &#123;&#123;</span><br><span class="line">        setUserName(&quot;A11&quot;);</span><br><span class="line">        setUserPsw(&quot;A11&quot;);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能会出现：<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code></p><p>出现条件：内层出现异常需要回滚，但是外层因捕获异常了，代码正常执行，又不回滚，前后矛盾故抛出异常；</p><p>原因：在此嵌套事务场景中，内层事务的sql和外层事务的sql共用外层事务，它们会在外层事务结束时进行提交或回滚。如果内层事务抛出异常<em>e</em>，在内层事务结束时，spring会把事务标记为“rollback-only”，即需要回滚，但但方法却正常执行完毕了故抛出此异常</p><blockquote><p>REQUIRED+SUPPORT+外层捕获内层异常</p></blockquote><p>同上</p><blockquote><p>REQUIRED+NOT_SUPPORTED+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层不在事务环境下执行，也就不存在将外层事务标记为“rollback-only”</p><blockquote><p>REQUIRED+REQUIRES_NEW+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层所在事务环境与外层的不是同一个事务，故不存在将外层事务标记为“rollback-only”</p><blockquote><p>REQUIRED+NEVER+外层捕获内层异常</p></blockquote><p>可以让内层的事务异常不会导致外层回滚，但这种策略本身没什么意义，内层业务不会执行</p><blockquote><p>REQUIRED+NESTED+外层捕获内层异常</p></blockquote><p>可以让内层异常不会导致外层回滚，内层所在事务是外层事务的一个子事务，不存在将外层事务标记为“rollback-only”，外部事务结束后它才会被提交</p><h1 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h1><p>1.private、static、final修饰方法</p><p>2.调用当前类的方法</p><p>3.spring的事务默认是对RuntimeException进行回滚，而不继承RuntimeException的不回滚，确保抛出异常与回滚</p><p>4.线程Thread中声明式事务不起作用</p><p>5.捕获不该捕获的异常且未将其抛出</p><h1 id="关于回滚"><a href="#关于回滚" class="headerlink" title="关于回滚"></a>关于回滚</h1><p>数据库中的表现形式：先插，若要回滚时会将需要回滚的记录删除，因此后续插入记录的主键id并不连续，一些回滚前插入的数据占用了一部分的主键</p><h2 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h2><p> 业务出现异常，无需多余操作，但抛出的异常需要匹配回滚要求的异常</p><h2 id="手动回滚"><a href="#手动回滚" class="headerlink" title="手动回滚"></a>手动回滚</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 业务方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 设置手动回滚    </span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="异步线程中的事务"><a href="#异步线程中的事务" class="headerlink" title="异步线程中的事务"></a>异步线程中的事务</h1><p>声明式事务对异步线程无法生效，只有使用编程式事务</p><h1 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h1><h1 id="确保事务提交后执行"><a href="#确保事务提交后执行" class="headerlink" title="确保事务提交后执行"></a>确保事务提交后执行</h1><blockquote><p>TransactionSynchronizationManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;事务提交后的业务操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如果是读写分离的数据库数据同步的延时，该方法不能解决，还是会查到空值。此时就要用延时队列的办法解决问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 事务嵌套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2021/10/31/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/10/31/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>语法格式：<code>参数 -&gt; 函数体</code></p><p>Lambda表达式只支持函数式接口 也就是只有一个抽象方法的接口，可以用<code>@FunctionalInterface</code>注解来表示当前接口为函数式接口，如果有多个抽象方法，编译时会报错</p><p>注：<code>参数</code>可以指明参数类型，但一般不需要指定，编译器可以自动推断出</p><p>e.g.1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICompare</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICompare&lt;Integer&gt; compare = (integer -&gt; integer &gt; <span class="number">2</span>);</span><br><span class="line">System.out.println(compare.compare(<span class="number">5</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>e.g.2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICompare2</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T x,T y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICompare2&lt;Integer&gt; compare2 = Integer::compare;</span><br></pre></td></tr></table></figure><p>疑问：</p><p><a href="https://blog.csdn.net/H_X_P_/article/details/105030682">为什么Comparator接口有两个抽象方法compare和equals，Comparator还是一个函数式接口？</a></p><p>因为抽象方法equals方法在父类Object中已有默认实现，所以它们不是抽象方法。如果一个接口中声明的抽象方法是重写了超类Object类中任意一个public方法，那么这些抽象方法并不会算入接口的抽象方法数量中</p><h1 id="核心函数式接口"><a href="#核心函数式接口" class="headerlink" title="核心函数式接口"></a>核心函数式接口</h1><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消费型接口：<code>void accept(T t);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Long&gt; consumer = System.out::println;</span><br><span class="line">consumer.accept(<span class="number">1000L</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 流操作</title>
      <link href="/2021/10/27/java/stream/"/>
      <url>/2021/10/27/java/stream/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok使用</title>
      <link href="/2021/10/10/java/lombok/"/>
      <url>/2021/10/10/java/lombok/</url>
      
        <content type="html"><![CDATA[<p>lombok主要用来自动生成（编译阶段）一些方法代码，如getter、setter、构造函数、toString方法等等，使用前需要在IDE上安装lombok的插件</p><h1 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p>作用在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法</p><h2 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h2><p>即可作用在类上，为类中所有属性生成getter/setter方法；</p><p>也可单用在某一属性上，为某一特定属性生成getter/setter方法；</p><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h2><p>作用于类，覆盖默认的toString()方法，可以通过of属性限定显示某些字段，通过exclude属性排除某些字段。</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p>作用于类，生成类的全参构造函数</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p>作用于类，生成类的无参构造函数</p><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><p>作用于类，将类转变为建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer param1;</span><br><span class="line">    <span class="keyword">private</span> Integer param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpDto dto = HttpDto.builder().param1(<span class="number">1</span>).param2(<span class="number">2</span>).build();</span><br></pre></td></tr></table></figure><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h2><p>作用于类，生成包含final和@NonNull注解的成员变量的构造器</p><h2 id="CleanUp"><a href="#CleanUp" class="headerlink" title="@CleanUp"></a>@CleanUp</h2><p>自动关闭资源，针对实现了java.io.Closeable接口的对象有效，如：典型的IO流对象</p><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><p>主要作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><blockquote><p>优势</p></blockquote><p>一定程度提高了开发效率</p><p>代码更加简洁</p><p>属性修改时不用特意去维护getter setter方法</p><blockquote><p>缺点</p></blockquote><p>不支持多种参数构造器的重载</p><p>大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</p><p>如果我们定义的一个jar包中使用了Lombok，那么就要求所有依赖这个jar包的所有应用都必须安装插件，这种侵入性是很高的</p><p>代码可读性，可调试性低</p><p>参考：</p><p><a href="https://www.cnblogs.com/heyonggang/p/8638374.html">https://www.cnblogs.com/heyonggang/p/8638374.html</a></p><p><a href="https://www.jianshu.com/p/2543c71a8e45">https://www.jianshu.com/p/2543c71a8e45</a></p><p><a href="https://cloud.tencent.com/developer/article/1589073">https://cloud.tencent.com/developer/article/1589073</a></p><p><strong>综上，个人认为正式的生产项目还是不要使用lombok了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格数据导出方案</title>
      <link href="/2021/09/01/mysql/mysql%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E6%88%90csv%E6%96%B9%E6%A1%88/"/>
      <url>/2021/09/01/mysql/mysql%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E6%88%90csv%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="select-into-outfile方式"><a href="#select-into-outfile方式" class="headerlink" title="select into outfile方式"></a>select into outfile方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sys_user INTO OUTFILE &#39;D:&#x2F;&#x2F;sys_user.csv&#39;</span><br><span class="line">FIELDS TERMINATED BY &#39;,&#39; OPTIONALLY ENCLOSED BY &#39;&quot;&#39;</span><br><span class="line">LINES TERMINATED BY &#39;\r\n&#39;;</span><br></pre></td></tr></table></figure><p><code>&#39;D://sys_user.csv&#39;</code> 指定的导出csv文件路径（仅限在mysql服务器上）</p><p><code>FIELDS TERMINATED BY &#39;,&#39;</code>导出的字段间的分隔符为’,’</p><p><code>OPTIONALLY ENCLOSED BY &#39;&quot;&#39;</code> 导出的字段用“””包裹 这个可以解决字段中包含“,”时 导致CSV产生多列</p><p><code>LINES TERMINATED BY &#39;\r\n&#39;</code> 指定换行</p><blockquote><p>缺点</p></blockquote><ul><li><code>--secure-file-priv</code>问题</li></ul><p>show global variables like ‘%secure_file_priv%’;</p><p>secure_file_priv需要配置值 （一个目录或者是空 但不能为NULL）</p><p>上面指定导出文件的路径时需要在secure_file_privp配置的目录下，否则无法导出</p><p>参考：<a href="https://www.cnblogs.com/dazhan/p/9815194.html">https://www.cnblogs.com/dazhan/p/9815194.html</a></p><ul><li>局限</li></ul><p>导出的文件路径范围只限于数据库服务器中</p><h1 id="mysql-e-跨服务器导出"><a href="#mysql-e-跨服务器导出" class="headerlink" title="mysql -e 跨服务器导出"></a>mysql -e 跨服务器导出</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql -u<span class="string">&quot;root&quot;</span> -p<span class="string">&quot;123456&quot;</span>  -e <span class="string">&quot;</span></span></span><br><span class="line">select sch_name,sch_addr,sch_profession from all_university;</span><br><span class="line">quit&quot; | awk &#x27;&#123;print $1&quot;,&quot;,$2&quot;,&quot;$3&#125;&#x27; &gt; log.csv</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.jianshu.com/p/092a6c260c2f">https://www.jianshu.com/p/092a6c260c2f</a></p><p><a href="https://blog.csdn.net/xsj_blog/article/details/52617199">https://blog.csdn.net/xsj_blog/article/details/52617199</a></p><h1 id="mysqldump方式"><a href="#mysqldump方式" class="headerlink" title="mysqldump方式"></a>mysqldump方式</h1><p>基本和into outfile一致，mysqldump导出csv格式只能在本地进行，无法远程操作</p><h1 id="一点tips"><a href="#一点tips" class="headerlink" title="一点tips"></a>一点tips</h1><blockquote><p>导出字段自动被科学计数显示</p></blockquote><p>在导出字段时，有些字段字符串比较长且又都是数字，导出CSV打开后会自动转成科学计数，可能末尾的一些字符全部都置为0了，可以在输出字段值时使用concat(xxx,’\t’);</p><blockquote><p>一些NULL值字段导出后显示为\N</p></blockquote><p>导出的字段可能为NULL时，select时使用ifnull(xxx,’’);</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> select into outfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQ平滑升级</title>
      <link href="/2021/08/29/MQ/mq%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E6%88%96%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88/"/>
      <url>/2021/08/29/MQ/mq%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E6%88%96%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>生产环境上的MQ版本过低，因某些安全漏洞需要升级MQ的版本；</p><p>因某些因素需要更换MQ服务器；</p><p>同时要求不中断MQ服务</p><h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><p>消费者 双向订阅（旧MQ和新MQ）</p><p>生产者升级为新MQ</p><p>消费者下线旧MQ</p><p>参考：<a href="https://www.zhihu.com/question/330522940/answer/723077536">https://www.zhihu.com/question/330522940/answer/723077536</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> 平滑升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GROUP_CONCAT()函数使用</title>
      <link href="/2021/08/29/mysql/group_concat/"/>
      <url>/2021/08/29/mysql/group_concat/</url>
      
        <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>按组(group by)合并对应字段的值用”,”（默认分隔符）隔开，返回一个字符串结果</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>语法</p></blockquote><p>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )；</p><p>[] 表示optional 可选</p><p>distinct 可用来去重</p><p>order by 可用来设置合并的顺序</p><p>separator 可用来指定自定义分隔符</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>group_concat处理字符串的长度是由限制的，默认长度为1024,如果拼接的字符串超过1024,就会在数据库里面被截取,所以不会显示所有拼接数据。</p><p>另外在使用group_concat语句的同时，使用union时这个长度会缩减至341 (1024/3) <a href="https://www.zhihu.com/question/330522940/answer/723077536">https://www.zhihu.com/question/330522940/answer/723077536</a></p><p>解决：设置合理的<code>group_concat_max_len</code> 最大group_concat长度</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> GROUP_CONCAT() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试概述"><a href="#单元测试概述" class="headerlink" title="单元测试概述"></a>单元测试概述</h1><p>最近读代码整洁之道，了解了单元测试的重要性，单元测试可以在极大程度上保证我们在以前的代码上的修改没有什么问题(比如新的更改对其它关联业务产生的影响)，基本可以保障代码实际运行情况与我们的预期保持一致。TDD(测试驱动开发)真的很不错，不然都没信心重构代码和修改代码。</p><p>关于写单元测试的一些好的标准/<a href="https://www.jianshu.com/p/37ffeef5ee5b">规范</a>：</p><ul><li>每个测试一个概念，正所谓单元测试</li><li>自动化，测试自动化，结果判断自动化</li><li>可重复执行</li><li>针对性，一个单元测试只测一个方法</li><li>彻底性，覆盖所有可能的情况，保持代码路径覆盖率越高越好</li><li>单测应该测试目标方法本身的逻辑，对于被测试的方法内部调用的非私有方法应进行mock，推荐使用Mockito进行mock（避免因其它方法导致当前方法的逻辑出现问题）</li><li>独立性，不依赖于其它单元测试</li><li>对实现类进行测试而非接口</li><li>隔离性，涉及到数据变更，必须进行回滚</li><li>只需要测含有业务逻辑的方法（包括service层 dao层 含有业务逻辑controller层的一些方法），只要是提供了逻辑的就应该测试</li><li>私有方法通过调用类的单测进行测试（抽象成另外一个类中的public方法/在测试中利用反射进行调用）</li><li>测试保护正向测试和反向测试（正常/异常情况都应覆盖，其对于异常的测试可以异常测试的相关注解，不要在test中使用try catch）</li><li>如果被测试的方法的逻辑结果体现在方法返回或成员变量中，则使用Assert断言验证该返回或成员变量</li><li>如果被测试的方法的逻辑体现在内部的方法调用行为本身，则使用Mockito的verify验证内部方法调用的情况</li><li>单测应在相应的目标方法开发完后立即编写，如能在开发前就开始编写则更好（TDD）</li></ul><h1 id="测试覆盖率实践-IDEA"><a href="#测试覆盖率实践-IDEA" class="headerlink" title="测试覆盖率实践(IDEA)"></a>测试覆盖率实践(IDEA)</h1><p>业务代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((x &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is Odd&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is not Odd&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保证有测试目录</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724115801746.png" alt="image-20210724115801746"></p><p>光标停在isOdd方法上，ctrl+shift+T ，enter，自动生成测试模板</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724115830641.png" alt="image-20210724115830641"></p><p>完成单元测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Main main;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        main = <span class="keyword">new</span> Main();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isOdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res1 = main.isOdd(<span class="number">1</span>);</span><br><span class="line">        Assert.assertTrue(res1 == <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res2 = main.isOdd(<span class="number">2</span>);</span><br><span class="line">        Assert.assertTrue(res2 == <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行单元测试</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120059121.png" alt="image-20210724120059121"></p><p>带有覆盖率统计的运行</p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120148795.png" alt="image-20210724120148795"></p><p><a href="https://blog.csdn.net/qq_31702847/article/details/104866713">运行结果</a></p><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210724120508826.png" alt="image-20210724120508826"></p><h1 id="MockMvc使用"><a href="#MockMvc使用" class="headerlink" title="MockMvc使用"></a>MockMvc使用</h1><p>参考：</p><p><a href="https://blog.csdn.net/wo541075754/article/details/88983708">https://blog.csdn.net/wo541075754/article/details/88983708</a></p><p><a href="https://blog.csdn.net/qq_16513911/article/details/83018027">https://blog.csdn.net/qq_16513911/article/details/83018027</a></p><p><a href="https://blog.csdn.net/wsh596823919/article/details/81662887">https://blog.csdn.net/wsh596823919/article/details/81662887</a></p><p><a href="https://www.cnblogs.com/lyy-2016/p/6122144.html">https://www.cnblogs.com/lyy-2016/p/6122144.html</a></p><h3 id="MockMvcBuilders"><a href="#MockMvcBuilders" class="headerlink" title="MockMvcBuilders"></a>MockMvcBuilders</h3><p>用于初始化mockMvc，主要分为两种初始化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集成Web环境测试</span></span><br><span class="line">mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更具针对性 所需条件范围最小</span></span><br><span class="line">mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> IndexController()).build();</span><br></pre></td></tr></table></figure><h3 id="MockMvcRequestBuilders"><a href="#MockMvcRequestBuilders" class="headerlink" title="MockMvcRequestBuilders"></a>MockMvcRequestBuilders</h3><p>用于构建请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line">MockHttpServletRequestBuilder getReq = MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>);</span><br><span class="line"><span class="comment">// post 请求</span></span><br><span class="line">MockHttpServletRequestBuilder postReq = MockMvcRequestBuilders.post(<span class="string">&quot;/api/user&quot;</span>);</span><br></pre></td></tr></table></figure><p>请求参数的配置</p><ul><li>路径参数</li></ul><p>@PathVariable 配置的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/user/&#123;userId&#125;/&#123;userName&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId,<span class="meta">@PathVariable</span> String userName)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user/&#123;userId&#125;/&#123;userName&#125;&quot;</span>, <span class="number">1</span>,<span class="string">&quot;name1&quot;</span>)</span><br></pre></td></tr></table></figure><p>@RequestParam配置的参数（或者不带@RequestParm注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(<span class="meta">@RequestParam</span> Integer userId,<span class="meta">@RequestParam</span> String userName)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userId&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;name2&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>表单参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.get(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userId&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;name2&quot;</span>)</span><br><span class="line">        .param(<span class="string">&quot;userPsw&quot;</span>,<span class="string">&quot;psw2&quot;</span>)</span><br><span class="line">        .contentType(MediaType.APPLICATION_FORM_URLENCODED)</span><br></pre></td></tr></table></figure><p>.contentType()设置请求参数媒体类型</p><ul><li>JSON请求体参数(post)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders.post(<span class="string">&quot;/api/user&quot;</span>)</span><br><span class="line">                .content(JSONObject.toJSONString(map))</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br></pre></td></tr></table></figure><p>map：封装的参数map</p><h3 id="ResultActions"><a href="#ResultActions" class="headerlink" title="ResultActions"></a>ResultActions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultActions resultActions=mockMvc.perform(request);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加验证断言来判断执行请求后的结果是否是预期的</span></span><br><span class="line"><span class="function">ResultActions <span class="title">andExpect</span><span class="params">(ResultMatcher matcher)</span></span>;</span><br><span class="line"><span class="comment">// 添加结果处理器，用于对验证成功后执行的动作，如输出下请求/结果信息用于调试</span></span><br><span class="line"><span class="function">ResultActions <span class="title">andDo</span><span class="params">(ResultHandler handler)</span></span>;</span><br><span class="line"><span class="comment">// 返回验证成功后的MvcResult；用于自定义验证/下一步的异步处理； </span></span><br><span class="line"><span class="function">MvcResult <span class="title">andReturn</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="ResultHandler"><a href="#ResultHandler" class="headerlink" title="ResultHandler"></a>ResultHandler</h3><p>action抽象，一般就是用resultActions.andDo(print())；输出至控制台</p><h3 id="ResultMatcher"><a href="#ResultMatcher" class="headerlink" title="ResultMatcher"></a>ResultMatcher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">status():得到响应状态验证器;</span><br><span class="line">cookie():得到响应cookie验证器;</span><br><span class="line">content():得到响应内容验证器;</span><br><span class="line">view():得到响应视图验证器;</span><br><span class="line">model():得到响应模型验证器;</span><br><span class="line">forwardedUrl():验证处理完请求后转发的url（绝对匹配）;</span><br></pre></td></tr></table></figure><h3 id="MvcResult"><a href="#MvcResult" class="headerlink" title="MvcResult"></a>MvcResult</h3><p><img src="/2021/07/24/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210726233358985.png" alt="image-20210726233358985"></p><h1 id="WEB项目中的单元测试实践"><a href="#WEB项目中的单元测试实践" class="headerlink" title="WEB项目中的单元测试实践"></a>WEB项目中的单元测试实践</h1><h2 id="Controller层的单元测试"><a href="#Controller层的单元测试" class="headerlink" title="Controller层的单元测试"></a><a href="https://www.cnblogs.com/hthuang/p/6902998.html">Controller层的单元测试</a></h2><p>一般来说，controller层不含业务逻辑，不需要单元测试；但也避免不了有些controller就是包含一点业务逻辑</p><h3 id="调用请求路径测试"><a href="#调用请求路径测试" class="headerlink" title="调用请求路径测试"></a>调用请求路径测试</h3><h3 id="调用Controller方法测试"><a href="#调用Controller方法测试" class="headerlink" title="调用Controller方法测试"></a>调用Controller方法测试</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> 测试覆盖率 </tag>
            
            <tag> mockMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组类的解题总结</title>
      <link href="/2021/07/24/LeetCode/array/"/>
      <url>/2021/07/24/LeetCode/array/</url>
      
        <content type="html"><![CDATA[<h1 id="N数之和-对撞指针"><a href="#N数之和-对撞指针" class="headerlink" title="N数之和(对撞指针)"></a>N数之和(对撞指针)</h1><p>一般需要保持数组有序，首先进行排序</p><p>固定第1个数，再固定第二个数…留下最后两个游标表示最后两个数，得到他们临时的一个和与目标值比较，大了右游标左移，小了左游标右移，相等则记录结果，左右游标同时往中间靠，这个过程需要排除重复值；</p><p>注意特例的判断，可以避免不必要的遍历循环，比如三数之和，排序后，前三个最小的数之和已经大于目标值/后三个最大的数之和小于目标值 就没必要进行后续的遍历的，可以直接返回结果了</p><h1 id="最大装水量（对撞指针）"><a href="#最大装水量（对撞指针）" class="headerlink" title="最大装水量（对撞指针）"></a>最大装水量（对撞指针）</h1><p>高度取左右指针对应高度更高的；宽度取左右指针间隔距离；移动时，高度较低的指针率先往中间靠；每次得到一个装水量(高度*宽度)，最后取最大的即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求头和响应头</title>
      <link href="/2021/06/28/%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/"/>
      <url>/2021/06/28/%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><p>参考：</p><p><a href="https://www.jianshu.com/p/9a68281a3c84">https://www.jianshu.com/p/9a68281a3c84</a></p><p><a href="https://blog.csdn.net/u010256388/article/details/68491509">https://blog.csdn.net/u010256388/article/details/68491509</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shakespeare/notes/9a68281a3c84/recommendations</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.jianshu.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">sec-ch-ua</span>: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span>: ?0</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 FS</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: empty</span><br><span class="line"><span class="attribute">Referer</span>: https://www.jianshu.com/p/9a68281a3c84</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span>: xxxxxxx</span><br><span class="line"><span class="attribute">If-None-Match</span>: W/&quot;c5503ab624458a4bebfbe64638314ca0&quot;</span><br></pre></td></tr></table></figure><p>请求行+请求头+请求体</p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shakespeare/notes/9a68281a3c84/recommendations</span> HTTP/1.1</span><br></pre></td></tr></table></figure><p>依次是请求方法类型、请求URL、HTTP协议和版本</p><h2 id="请求头-1"><a href="#请求头-1" class="headerlink" title="请求头"></a>请求头</h2><p>主要是一些属性的设置</p><ul><li>host</li></ul><p>发送请求的页面的域名，主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</p><ul><li>Connection</li></ul><p>浏览器与服务器的连接类型；</p><p>e.g:</p><p><code>Connection: keep-alive</code> 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接;</p><p><code>Connection: close</code> 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭。当客户端再次发送Request，需要重新建立TCP连接</p><ul><li>Refer</li></ul><p>发送请求的页面的URI。当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的;</p><p>比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站</p><ul><li>User-Agent</li></ul><p><a href="https://blog.csdn.net/ahaotata/article/details/84523055">https://blog.csdn.net/ahaotata/article/details/84523055</a></p><p>向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识</p><ul><li>Accept</li></ul><p>告诉服务端，客户端接收什么类型的响应，希望接受的数据类型；</p><p>e.g:</p><p><code> */*</code>:接受任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> 类型的资源</p><p><code>application/json</code>:</p><h1 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h1>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP请求头 </tag>
            
            <tag> HTTP响应头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点mysql心得</title>
      <link href="/2021/06/25/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/"/>
      <url>/2021/06/25/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>1.写sql时涉及大表，或者未来会成为大表的表都需要考虑慢查询，提前根据业务建好索引，充分利用好索引</p><p>2.写涉及更新插入的业务，需要考虑事务，如果某一阶段出现异常对全局的影响是否符合预期，需不需要回滚</p><p>3.涉及临界资源（可通过多种渠道改变其状态时），应当加锁处理，保证互斥性</p><p>4.慢查询优化</p><ul><li>​    搞清楚需要获取的目标信息，当为了获取这些信息时需要不得已关联多个表时（尤其存在较大数据量的表），需要斟酌先查哪个表，一般是避免先查大表。比如A表(大表),B表(小表)，最终的结果是由A表和B表共同决定的，先查A表再查B表筛选一般来说效率要低很多，这时可以先查出B表，过滤性更高，再可通过B表一些额外的关联属性去根据A表再滤除(exist等等)</li><li>分页查询查的慢，除了分页本身的查询优化外，还需要看查总记录数的count查询语句，如果只是简单的加一层count(*)的封装一般是不合理的；一次性查出所有的记录可能确实比较慢，但是在查询一页的数据时因查count时导致慢查询进而失败确有些可惜；limit越靠前的数据查询时会比较迅速的</li><li>在做业务时需要查询数据库时，尽可能只获取自己需要的数据；写查询逻辑前思考下：我一定需要这么查么，我有必要查出这么信息么:一个很简单的事情，比如我只需要知道有没有，并不关注有多少个，此时就没必要去统计多少个的信息</li><li>关于冗余的设计，我觉得那些不会变动的信息且又需要被关联显示的时候，大可以在主表加上冗余字段，这样在查询时无需再去关联表</li></ul><h1 id="编程习惯"><a href="#编程习惯" class="headerlink" title="编程习惯"></a>编程习惯</h1><p>1.new 对象() ；代码顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Xxx xx=<span class="keyword">new</span> Xxx();</span><br><span class="line"><span class="keyword">if</span>(yyy)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xxx xx=new Xxx(); 应该放在if块后面。避免不必要的对象创建，浪费空间</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 好习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/2021/06/06/cookie/"/>
      <url>/2021/06/06/cookie/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p><a href="https://www.cnblogs.com/zhuanzhuanfe/p/8010854.html">https://www.cnblogs.com/zhuanzhuanfe/p/8010854.html</a></p><p><a href="https://www.cnblogs.com/daysme/p/8052930.html">https://www.cnblogs.com/daysme/p/8052930.html</a></p><p>简要描述：cookie的存在是为了弥补HTTP连接的无状态，由服务器产生，存在客户端(浏览器，通过小型文本文件存储 大小有限制一般是4K 与浏览器有关)，下次请求带上这个cookie，以维持连接状态；但是cookie的安全性是个弊端，一般在cookie存储敏感信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m5</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// K-V cookie键值</span></span><br><span class="line">       Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;ztt&quot;</span>);</span><br><span class="line">       <span class="comment">// 限制了cookie对HTTP请求的作用范围。特别的，该属性指示用户代理忽略那些通过&quot;非 HTTP&quot; 方式对 cookie 的访问（比如浏览器暴露给js的接口）</span></span><br><span class="line">       <span class="comment">// document.cookie是获取不到改cookie的</span></span><br><span class="line">       cookie1.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">// 正数：表示在指定秒后失效；负数：表示会话cookie,关闭浏览器即失效</span></span><br><span class="line">       cookie1.setMaxAge(<span class="number">100000</span>);</span><br><span class="line">       <span class="comment">// 可以访问此cookie的域名</span></span><br><span class="line">       cookie1.setDomain(<span class="string">&quot;baidu.com&quot;</span>);</span><br><span class="line">       <span class="comment">// 是否只能通过https来传递此条cookie true-是 false-否</span></span><br><span class="line">       cookie1.setSecure(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">// 指定与cookie关联在一起的网页 baidu.com/test路径下的页面才可以使用该cookie</span></span><br><span class="line">       cookie1.setPath(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置新的V值</span></span><br><span class="line">       cookie1.setValue(<span class="string">&quot;new&quot;</span>);</span><br><span class="line">       Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;psw&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">       response.addCookie(cookie1);</span><br><span class="line">       response.addCookie(cookie2);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>请求<a href="http://localhost:8080/login%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%B4%EF%BC%9A">http://localhost:8080/login的响应头：</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span>: 13</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">Date</span>: Thu, 03 Jun 2021 08:51:35 GMT</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=60</span><br><span class="line"><span class="attribute">Set-Cookie</span>: user=new; Max-Age=100000; Expires=Fri, 04-Jun-2021 12:38:15 GMT; Domain=baidu.com; Path=/test; Secure; HttpOnly</span><br><span class="line"><span class="attribute">Set-Cookie</span>: psw=123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA</title>
      <link href="/2021/05/29/idea/"/>
      <url>/2021/05/29/idea/</url>
      
        <content type="html"><![CDATA[<h1 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h1><p><a href="http://idea.medeming.com/jihuoma/">http://idea.medeming.com/jihuoma/</a> </p><p>下载，将txt上的激活码粘上去即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JetBrains激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven命令</title>
      <link href="/2021/05/25/maven/maven%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/05/25/maven/maven%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="清空构建产物"><a href="#清空构建产物" class="headerlink" title="清空构建产物"></a>清空构建产物</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>详细参考：<a href="https://www.cnblogs.com/hiver/p/7850954.html">https://www.cnblogs.com/hiver/p/7850954.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -Dmaven.test.skip -pl parentModule.childModule -am -Pcustom_profile</span><br></pre></td></tr></table></figure><p><code>-Dmaven.test.skip</code> 跳过测试代码</p><p><code>-pl XXX.xxx </code>  选择指定模块  父模块.子模块</p><p><code>-am</code>  同时处理选定模块所依赖的模块 </p><p><code>-Pxxxx</code> 选定构建的profile环境</p><h1 id="mvn-install"><a href="#mvn-install" class="headerlink" title="mvn install"></a>mvn install</h1><p>完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</p><h1 id="mvn-deploy"><a href="#mvn-deploy" class="headerlink" title="mvn deploy"></a>mvn deploy</h1><p>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码</title>
      <link href="/2021/05/24/%E5%85%B6%E4%BB%96/%E7%BC%96%E7%A0%81/"/>
      <url>/2021/05/24/%E5%85%B6%E4%BB%96/%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>参考：</p><p><a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html">https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html</a></p><p>1.按照何种规则将字符存储在计算机中，如’a’用什么表示，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”</p><p>2.字符，抽象的最小文本单位， 仅仅代表一个符号 ，是一个英文字母也可能是汉字亦或是一个特殊符号</p><p>3.字符集，某个符号和某个数字映射关系的一个表，不同的表有不同的映射关系</p><p>4.字符编码方式，决定一个字符的表示方式</p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>American Standard Code for Information Interchange，美国信息互换标准代码</p><p>使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符</p><p>标准 ASCII码一共规定了128个字符的编码，只占用了一个字节的后面7位，最前面的1位统一规定为0</p><h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><p>对 ASCII 的中文扩展</p><h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。</p><h2 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h2><p>又加了几千个新的少数民族的字，GBK 扩成了 GB18030</p><h2 id="UNICODE"><a href="#UNICODE" class="headerlink" title="UNICODE"></a>UNICODE</h2><p>包括了地球上所有文化、所有字母和符号的编码;在UNICODE 中，一个字符就是两个字节，不论是英文字符还是汉字，前三种支持中文的编码方式都是使用双字节表示汉字，用单字节表示英文字符</p><p>存在的问题：</p><p>第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的</p><p><a href="https://blog.csdn.net/hongsong673150343/article/details/88584753">https://blog.csdn.net/hongsong673150343/article/details/88584753</a></p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8是Unicode的实现方式之一</p><p>是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p><p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p><h2 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h2><p>一种字符代码，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截器实现</title>
      <link href="/2021/05/24/Spring/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2021/05/24/Spring/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>用于对请求进行拦截处理</p><p>详细参考：<a href="https://www.cnblogs.com/bear7/p/13390202.html">https://www.cnblogs.com/bear7/p/13390202.html</a></p><h1 id="自定义实现方式"><a href="#自定义实现方式" class="headerlink" title="自定义实现方式"></a>自定义实现方式</h1><p>HandlerInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implements HandlerInterceptor</span><br></pre></td></tr></table></figure><p>HandlerInterceptorAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends HandlerInterceptorAdapter</span><br></pre></td></tr></table></figure><p>重写 <strong>preHandler()**、 **postHandler()</strong> 、 **afterCompletion():**方法</p><h1 id="过滤器VS拦截器"><a href="#过滤器VS拦截器" class="headerlink" title="过滤器VS拦截器"></a>过滤器VS拦截器</h1><p>详细参考：<a href="https://www.cnblogs.com/panxuejun/p/7715917.html">https://www.cnblogs.com/panxuejun/p/7715917.html</a></p><p>过滤器属于sevlert规范（要早于拦截器执行）</p><p>拦截器属于Spring框架所支持的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全问题及解决</title>
      <link href="/2021/05/24/Web/web%E5%AE%89%E5%85%A8/"/>
      <url>/2021/05/24/Web/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="路径穿越攻击"><a href="#路径穿越攻击" class="headerlink" title="路径穿越攻击"></a>路径穿越攻击</h1><p>利用平台暴露的文件下载接口，加上“上层目录符号../  ..”跳至父目录，该漏洞可下载服务器上的任意文件（越权）</p><p>修复方案：</p><p>1）最终的下载路径特殊符号（.. ../等）过滤，防止跨目录下载，另项目提供的下载文件资源 最好设置一个相对独立的父目录，父目录不要设置为”/“ “/root”等</p><p>2）换文件下载策略，通过id和文件路径的对应关系来表征文件下载路径，不直接暴露文件下载的接口</p><h1 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h1><p>不能仅在前端的菜单项作权限，后端接口同样需要作权限校验，否则可通过接口工具(postman等)直接越过前端直接执行接口业务，造成意料之外的结果</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 路径穿越 </tag>
            
            <tag> 越权操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax属性配置</title>
      <link href="/2021/05/24/Web/ajax/"/>
      <url>/2021/05/24/Web/ajax/</url>
      
        <content type="html"><![CDATA[<p>详细参考：<a href="https://www.cnblogs.com/tylerdonet/p/3520862.html">https://www.cnblogs.com/tylerdonet/p/3520862.html</a></p><p>列举几个比较常用的属性：</p><h1 id="url"><a href="#url" class="headerlink" title="url"></a>url</h1><p>String类型，请求地址url</p><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>String类型，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p><h1 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h1><p>Boolean类型，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><p>Object或String类型，发送到服务器的数据</p><h1 id="contentType"><a href="#contentType" class="headerlink" title="contentType"></a>contentType</h1><p>String类型，发送数据到服务器时的内容编码类型， 内容编码类型默认为”application/x-www-form-urlencoded” </p><p>更多参考：<a href="https://www.cnblogs.com/tugenhua0707/p/8975121.html">https://www.cnblogs.com/tugenhua0707/p/8975121.html</a></p><h1 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h1><p>String类型，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p><h1 id="success"><a href="#success" class="headerlink" title="success"></a>success</h1><p>请求成功后调用的回调函数，有两个参数。<br>         (1)由服务器返回，并根据dataType参数进行处理后的数据。<br>         (2)描述状态的字符串。</p><h1 id="error"><a href="#error" class="headerlink" title="error"></a>error</h1><p>请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象</p>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解+拦截器实现权限控制</title>
      <link href="/2021/05/24/Spring/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/05/24/Spring/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>大致思路：</p><p>自定义注解+定义定制拦截器+配置拦截器+在需要的方法体上加上注解</p><p>以实现角色权限控制为例：</p><h1 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequireRoles &#123;</span><br><span class="line">    String[] value(); <span class="comment">// 存放需要角色的String数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于注解的<a href="../../java/%E6%B3%A8%E8%A7%A3/">更多介绍</a></p><h1 id="定制拦截器"><a href="#定制拦截器" class="headerlink" title="定制拦截器"></a>定制拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RolesPermissionInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler.getClass().isAssignableFrom(HandlerMethod.class)) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            RequireRoles requireRoles = handlerMethod.getMethodAnnotation(RequireRoles.class);</span><br><span class="line">            <span class="comment">// 没有相应注解表示无需角色验证</span></span><br><span class="line">            <span class="keyword">if</span> (requireRoles == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] needRoles = requireRoles.value();</span><br><span class="line">            <span class="comment">// 角色的权限验证业务</span></span><br><span class="line">            <span class="keyword">if</span> (!checkRolesPermisson(needRoles, request)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PermissionException(<span class="string">&quot;No Permission of the roles:&quot;</span> + CollUtil.newArrayList(needRoles));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于在Spring中自定义拦截器的<a href="../%E6%8B%A6%E6%88%AA%E5%99%A8/">更多介绍</a></p><h1 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h1><p>一般在spring-web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/static/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ztt.web.interceptor.RolesPermissionInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h1><p>在暴露的接口方法上使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/xxx&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequireRoles(&#123;&quot;root&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">xxxxMethod</span><span class="params">(XXXX xxxx)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring传参方式</title>
      <link href="/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/"/>
      <url>/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="非表单传参"><a href="#非表单传参" class="headerlink" title="非表单传参"></a>非表单传参</h1><h2 id="参数名一致"><a href="#参数名一致" class="headerlink" title="参数名一致"></a>参数名一致</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/regist&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m3</span><span class="params">(String username, String password, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> + username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/regist?username=zt&amp;password=psw&amp;address=hangzhou</span></span><br></pre></td></tr></table></figure><p>不传的话 参数就为null</p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p> 只能接收 URL 路径里的参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m1</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/path/idxxx</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String idx,<span class="meta">@PathVariable(&quot;key&quot;)</span> String keyx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx+<span class="string">&quot;=========&quot;</span>+keyx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/path/idK/idV</span></span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>RequestParam可以接受简单类型的属性，也可以接受对象类型。</p><p>@RequestParam有三个配置参数：</p><ul><li>required 表示是否必须，默认为 true，必须，不提供时会报错。</li><li>defaultValue 可设置请求参数的默认值。</li><li>value 为接收url的参数名（相当于key值）</li></ul><p><code>@RequestParam</code>用来处理 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded </code>编码的内容，<code>Content-Type</code>默认为该属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/regist2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;default username&quot;)</span> String username,<span class="meta">@RequestParam(defaultValue = &quot;default password&quot;)</span> String password,<span class="meta">@RequestParam(defaultValue = &quot;default address&quot;)</span> String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> + username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// http://localhost:8080/regist2?username=zt&amp;password=psw&amp;address=hangzhou</span></span><br></pre></td></tr></table></figure><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>详细参考：<a href="https://blog.csdn.net/justry_deng/article/details/80972817">https://blog.csdn.net/justry_deng/article/details/80972817</a></p><p>只能接收请求体中的参数，也就是只能是 POST 请求才有请求体，GET 请求没有请求体</p><p>使用封装的 bean 或者 JSONObject 接收（非常常用）  前端必须使用 JSON 格式的数据，Content-Type 必须为 application/json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist3&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> +user.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist4&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">m4</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;注册信息：&quot;</span> +jsonObject.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// ... getter setter</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/24/Spring/%E4%BC%A0%E5%8F%82/image-20210524164758021.png" alt="image-20210524164758021"></p><h1 id="表单（FORM）传参"><a href="#表单（FORM）传参" class="headerlink" title="表单（FORM）传参"></a>表单（FORM）传参</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p> 表单发出的 GET 请求直接通过注解 @RequestParam 进行参数接收即可 </p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p> form 表单使用 post 方法的时候，Content type 的值默认为<code> application/x-www-form-urlencoded;charset=UTF-8</code>。所以后台接收代码需要指定<code> consumes</code> 属性(用于指定处理请求的提交内容类型)</p><p><code>@RequestMapping(value = &quot;/test&quot;, method = RequestMethod.POST, consumes = &quot;application/x-www-form-urlencoded;charset=UTF-8&quot;)</code></p><p>FORM 表单发出的 POST 请求可以直接通过注解<code>@RequestParam</code>进行参数接收，</p><p>也可以使用字段对应封装的 Java Bean 对象来接收参数。注意 Java Bean 对象上不需要注解。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2021/05/24/java/%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/05/24/java/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>@Target(…) 指明注解的作用范围（类、方法…)</p><p>@Target(ElementType.TYPE) 作用接口、类、枚举、注解<br>@Target(ElementType.FIELD) 作用属性字段、枚举的常量<br>@Target(ElementType.METHOD) 作用方法<br>@Target(ElementType.PARAMETER) 作用方法参数<br>@Target(ElementType.CONSTRUCTOR) 作用构造函数<br>@Target(ElementType.LOCAL_VARIABLE)作用局部变量<br>@Target(ElementType.ANNOTATION_TYPE)作用于注解（@Retention注解中就使用该属性）<br>@Target(ElementType.PACKAGE) 作用于包<br>@Target(ElementType.TYPE_PARAMETER) 作用于类型泛型，即泛型方法、泛型类、泛型接口 （jdk1.8加入）<br>@Target(ElementType.TYPE_USE) 类型使用.可以用于标注任意类型除了 class （jdk1.8加入）</p><p>一般比较常用的是<code>ElementType.TYPE ElementType.METHOD</code>类型</p><p>@Retention(…) 表示注解存在阶段（生命周期）是保留在源码（编译期），字节码（类加载）或者运行期（JVM中运行） </p><p>一般用的多的：<code>@Retention(RetentionPolicy.RUNTIME)</code></p><p>参考：</p><p><a href="https://www.jianshu.com/p/9471d6bcf4cf">https://www.jianshu.com/p/9471d6bcf4cf</a></p><p><a href="https://blog.csdn.net/claram/article/details/90717270">https://blog.csdn.net/claram/article/details/90717270</a></p><p><a href="https://blog.csdn.net/weixin_39919527/article/details/80383292">https://blog.csdn.net/weixin_39919527/article/details/80383292</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客——(awk、sed、grep)</title>
      <link href="/2021/05/23/Linux/awk-sed-grep/"/>
      <url>/2021/05/23/Linux/awk-sed-grep/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/vanvan_/article/details/91397655">https://blog.csdn.net/vanvan_/article/details/91397655</a></p><p><code>grep</code>擅长查找功能，<code>sed</code>擅长取行和替换。<code>awk</code>擅长取列。</p><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a><code>awk</code></h1><p><a href="https://blog.csdn.net/lukabruce/article/details/86692471">https://blog.csdn.net/lukabruce/article/details/86692471</a></p><p><code>awk</code>就是把文件逐行的读入，以空格为默认分隔符（可以自定义设置）将每行切片，切开的部分再进行各种分析处理</p><p>如果文件是格式化的，即由分隔符分为多个域的，优先使用<code>awk</code>，适合按列（域）操作</p><p><code>&lt;模式/表达式&gt; &#123; &lt;动作&gt; &#125;</code> 如果匹配到了模式，就会执行后面的动作。如果省略动作，awk 默认会打印（print）输入</p><p><code>awk &#39;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#39;</code><br>第一步：运行<code>BEGIN&#123; commands &#125;</code>语句块中的语句。</p><p>第二步：从文件或标准输入(stdin)读取一行。然后运行<code>pattern&#123; commands</code> }语句块，它逐行扫描文件，从第一行到最后一行反复这个过程。直到文件所有被读取完成。</p><p>第三步：当读至输入流末尾时。运行<code>END&#123; commands &#125;</code>语句块。</p><p>BEGIN语句块在awk開始从输入流中读取行之前被运行，这是一个可选的语句块，比方变量初始化、打印输出表格的表头等语句通常能够写在BEGIN语句块中。</p><p>END语句块在awk从输入流中读取全然部的行之后即被运行。比方打印全部行的分析结果这类信息汇总都是在END语句块中完毕，它也是一个可选语句块。</p><p>pattern语句块中的通用命令是最重要的部分，它也是可选的。假设没有提供pattern语句块，则默认运行{ print }，即打印每个读取到的行。awk读取的每一行都会运行该语句块。</p><p>这三个部分缺少任何一部分都可以。</p><p><code>ls -lh | awk &#39;&#123;print $1&#125;&#39;</code>  列出当前目录和文件 打印第一列</p><ul><li><code>$0</code> 当前记录（这个变量中存放着整个行的内容）</li><li><code>$1~$n</code> 当前记录的第n个字段，字段间由FS分隔</li><li><code>FS</code> 输入字段分隔符 默认是空格或Tab</li><li><code>NF</code> 当前记录中的字段个数，就是有多少列</li><li><code>NR</code> 已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。</li><li><code>FNR</code> 当前记录数，与NR不同的是，这个值会是各个文件自己的行号</li><li><code>RS</code> 输入的记录分隔符， 默认为换行符</li><li><code>OFS</code> 输出字段分隔符， 默认也是空格</li><li><code>ORS</code> 输出的记录分隔符，默认为换行符</li><li><code>FILENAME</code> 当前输入文件的名字</li></ul><p><code>ls -l | awk &#39;&#123;sum += $5&#125; END &#123;print sum&#125;&#39;</code> 统计当前目录下所有文件大小之和</p><p>tt.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name    class    score</span><br><span class="line">a    c1    70</span><br><span class="line">b    c2    75</span><br><span class="line">c    c3    80</span><br><span class="line">d    c4    70</span><br><span class="line">e    c2    90</span><br><span class="line">f    c3    75</span><br><span class="line">g    c2    80</span><br></pre></td></tr></table></figure><p><code>awk &#39;&#123;sum[$2]+=1&#125; END &#123;for( i in sum)if(i!=&quot;class&quot;)print i&quot;\t&quot; sum[i]&#125;&#39; tt.txt</code></p><p><code>awk &#39;NR!=1&#123;sum[$3]+=1&#125; END &#123;for( i in sum) print i&quot;\t&quot; sum[i]&#125;&#39; tt.txt</code></p><p>统计每个class有多少行记录(去除首行)</p><p>要点：</p><p><code>\t</code>       制表符</p><p><code>\n</code>      换行符</p><p><code>~</code>        匹配，与==相比不是精确比较</p><p><code>!~</code>      不匹配，不精确比较</p><p><code>==</code>      等于，必须全部相等，精确比较</p><p><code>!=</code>      不等于，精确比较</p><p><code>&amp;&amp;</code>　  逻辑与</p><p><code>||</code>      逻辑或</p><p><code>+</code>        匹配时表示1个或1个以上</p><p><code>/[0-9][0-9]+/</code>   两个或两个以上数字</p><p><code>/[0-9][0-9]*/</code>    一个或一个以上数字</p><p><code>-F&#39;[:#/]&#39;</code>   定义三个分隔符</p><blockquote><p>去除重复行 保留原有顺序</p></blockquote><p><code>awk &#39;!visited[$0]++&#39; your_file &gt; deduplicated_file</code></p><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a><code>sed</code></h1><p><a href="https://linux.cn/article-10232-1.html">https://linux.cn/article-10232-1.html</a></p><p><a href="https://www.cnblogs.com/liwei0526vip/p/5644163.html">https://www.cnblogs.com/liwei0526vip/p/5644163.html</a></p><p><code>sed</code>主要以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作</p><p>命令格式：</p><p><code>sed [options] &#123;sed-commands&#125; &#123;input-file&#125;;</code></p><p>选项options</p><ul><li><code>-n</code>  等价于<code>--quiet</code>,<code>--silent</code> 使用静默模式,只打印模式匹配的行 </li><li><code>-e</code> 需要用sed对文本内容进行多种操作，则需要执行多条子命令来进行操作 </li></ul><p><code>echo -e &#39;hello world&#39; | sed -e &#39;s/hello/A/&#39; -e &#39;s/world/B/&#39;</code></p><p>等价于<code>echo -e &#39;hello world&#39; | sed &#39;s/hello/A/;s/world/B/&#39;</code> 用分号表示有多个指令</p><ul><li><code>-i</code> sed所做的修改会作用在原文件中；sed默认会把输入行读取到模式空间，简单理解就是一个内存缓冲区，sed子命令处理的内容是模式空间中的内容，而非直接处理文件内容。因此在sed修改模式空间内容之后，并非直接写入修改输入文件，而是打印输出到标准输出。如果需要修改输入文件，那么就可以指定-i选项。</li><li><code>-f</code>指定脚本文件 如果命令操作比较多的时候就会比较麻烦，这时候把多个子命令操作写入脚本文件，然后使用 <code>-f</code> 选项来指定该脚本</li><li><code>-r</code> sed命令的匹配模式支持正则表达式的，默认只能支持基本正则表达式，如果需要支持扩展正则表达式，那么需要添加-r选项。</li></ul><p><code>echo &quot;hello world&quot; | sed -r &#39;s/(hello)|(world)/A/g&#39;</code></p><blockquote><p>定址操作</p></blockquote><p>数字定址：</p><p><code>sed -i &#39;4s/hello/A/&#39; filename</code>   将第4行中hello字符串替换为A，其它行如果有hello也不会被替换</p><p><code>sed -i &#39;2-4s/hello/A/&#39; filename</code>    将第2-4行中hello字符串替换为A，其它行如果有hello也不会被替换</p><p><code>sed -i &#39;2,+4s/hello/A/&#39; filename</code> 从第2行开始，再接着往下数4行，也就是2-6行，这些行会把hello字符替换为A</p><p><code>sed -i &#39;2,~3s/hello/A/&#39; filename</code>  第4行开始，到第6行。解释6的由来，”4,~3”表示从4行开始到下一个3的倍数，这里从4开始算，那就是6了，当然9就不是了，因为是要求3的第一个超过前边数字4的倍数 </p><p><code>sed -i &#39;1~2s/hello/A/&#39; filename</code>   从第1行开始，每隔2行就把hello替换为A</p><p><code>sed -i &#39;$s/hello/A/&#39; filename</code>   把最后一行的hello替换为A</p><p><code>sed -i &#39;$!s/hello/A/&#39; filename</code>   把除了最后一行的hello替换为A 上述其他均可使用!取反</p><p>正则定址:</p><p><code>sed -i &#39;/A/d&#39; hello.txt</code> 将匹配到<code>A</code>的行删除</p><p><code>sed -i &#39;/^$/d&#39; hello.txt</code> 将空白行删除</p><p><code>sed -i &#39;/^begin/,/^end/d&#39; hello.txt</code> 匹配以begin开头的行到end开头的行之间的行，把匹配到的这些行删除</p><p>数字定址和正则定址混用：</p><p><code>sed -i &#39;1,/^end/d&#39; hello.txt</code> 匹配第1行到end开头的行之间的行，把匹配到的这些行删除 （只会删除到第一次匹配的地方而不是最后一次匹配）</p><p><code>sed -i &#39;1,/^BJ/&#123;s/BJ/BeiJing/;s/SH/ShangHai/&#125;&#39; hello.txt</code>匹配第1行到BJ开头的行之间的行，把匹配到的这些行中的BJ替换成BeiJing，SH替换成ShangHai</p><blockquote><p>基本子命令</p></blockquote><ul><li>a   表示在指定行下边插入指定行的内容 </li></ul><p><code>sed -i &#39;a append&#39; hello.txt</code> 每一行下方插入<code>append</code></p><ul><li>i   表示在指定行上边插入指定行的内容 </li></ul><p><code>sed -i &#39;i append&#39; hello.txt</code> 每一行上方插入<code>append</code></p><ul><li>c  替换行内容</li></ul><p><code>sed -i &#39;c replace&#39; hello.txt</code> 每一行替换为<code>replace</code></p><ul><li>d  删除行</li></ul><p><code>sed -i &#39;d&#39; hello.txt</code> 删除所有行</p><ul><li>y  字符替换</li><li>=  将行号打印出来</li><li>r  将指定文件内容附加在后面 类似于a</li><li><strong>s  替换子命令</strong> 用的最多</li></ul><p>基本语法：<br>[address]s/pattern/replacement/flags</p><p>replacement部分用下列字符会有特殊含义</p><p><code>&amp;</code>：用正则表达式匹配的内容进行替换</p><p><code>\n</code>：回调参数</p><p><code>\(\)</code>：保存被匹配的字符以备反向引用\n时使用，最多9个标签，标签书序从左到右</p><p>flags:</p><p><code>n</code>：可以是1-512，表示第n次出现的情况进行替换</p><p><code>g</code>：全局更改</p><p><code>p</code>：打印模式空间的内容</p><p><code>w file</code>：写入到一个文件file中</p><p><code>sed -i &#39;s/.*/111&amp;222/&#39; hello.txt</code> 每行首尾分别加上111 、222</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h1><p><a href="https://www.cnblogs.com/flyor/p/6411140.html">https://www.cnblogs.com/flyor/p/6411140.html</a></p><p>选项：</p><ul><li><code>-E</code> : 开启扩展正则表达式</li><li><code>-i</code>:  忽略大小写</li><li><code>-v</code>:  反过来，只打印没有匹配的，而匹配的反而不打印</li><li><code>-n</code>: 显示行号 </li><li><code>-w</code>:  被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker </li><li><code>-c</code>: 显示总共多少行被匹配 行数</li><li><code>-o</code>: 只显示匹配的内容</li><li><code>-A n</code>: 显示匹配到的字符串所在的行及其后n行，after</li><li><code>-B n</code>: 显示匹配到的字符串所在的行及其前n行，before </li><li><code>-C n</code>: 显示匹配到的字符串所在的行及其前后各n行，context</li></ul><p>基本命令格式：</p><p> grep [选项] [匹配规则]  文件名</p><p>e.g:</p><p><code>grep -A 1 g$ grep.txt</code> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> awk </category>
          
          <category> sed </category>
          
          <category> grep </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> awk </tag>
            
            <tag> sed </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题</title>
      <link href="/2020/08/04/next%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/08/04/next%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="修改布局风格"><a href="#修改布局风格" class="headerlink" title="修改布局风格"></a>修改布局风格</h1><p>themes/next/_config.yml 中可以修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h1 id="修改menu目录-待完善"><a href="#修改menu目录-待完善" class="headerlink" title="修改menu目录(待完善)"></a>修改menu目录(待完善)</h1><p>themes/next/_config.yml 中可以修改</p><h1 id="设置头像图片"><a href="#设置头像图片" class="headerlink" title="设置头像图片"></a>设置头像图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: &#x2F;images&#x2F;head.jpg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure><p>路径\themes\next\source\images下要有对应图片</p><h1 id="添加社交账号"><a href="#添加社交账号" class="headerlink" title="添加社交账号"></a>添加社交账号</h1><p><code>themes/next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;ztt0tian || github</span><br><span class="line">  E-Mail: whutzhaotian@gmail.com || envelope</span><br><span class="line">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || weibo</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || facebook</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure><h1 id="文章字数统计-待完善"><a href="#文章字数统计-待完善" class="headerlink" title="文章字数统计(待完善)"></a>文章字数统计(待完善)</h1><p>安插件：npm i –save hexo-wordcount</p><p>在<code>themes/next/_config.yml</code>中修改配置</p><h1 id="增加站内搜索-待完善"><a href="#增加站内搜索-待完善" class="headerlink" title="增加站内搜索(待完善)"></a>增加站内搜索(待完善)</h1><p>安插件：npm install hexo-generator-search –save</p><p>在<code>themes/next/_config.yml</code>中修改配置</p><h1 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">生活不易，求打赏~</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><p>在next/source/images中有对应图片即可</p><h1 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h1><p>参考：<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">https://blog.csdn.net/baidu_34310405/article/details/102665373</a></p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客写作 </category>
          
          <category> Hexo </category>
          
          <category> Next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2020/08/04/hexo/"/>
      <url>/2020/08/04/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="sever-command"><a href="#sever-command" class="headerlink" title="sever command"></a>sever command</h1><h1 id="服务器命令"><a href="#服务器命令" class="headerlink" title="服务器命令"></a>服务器命令</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo server Hexo  //会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s   //静态模式</span><br><span class="line">hexo server -p <span class="number">5000</span>    //更改端口</span><br><span class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>   //自定义 IP</span><br><span class="line"></span><br><span class="line">hexo clean  //清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g  //生成静态网页</span><br><span class="line">hexo d  //开始部署</span><br></pre></td></tr></table></figure><h1 id="file-watch"><a href="#file-watch" class="headerlink" title="file watch"></a>file watch</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  //使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch  //监视文件变动</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#source/_posts文件夹会新建paper.md</span></span><br><span class="line">hexo new paper</span><br><span class="line"><span class="comment"># 在source文件夹下创建一个board文件夹，以及board文件夹中的index.md</span></span><br><span class="line">hexo new page board</span><br><span class="line"><span class="comment"># 这样会在source/_draft中新建一个newpage.md文件</span></span><br><span class="line">hexo new draft newpage</span><br><span class="line"><span class="comment"># 这样会在source/_posts/java/文件夹下新建注解.md</span></span><br><span class="line">hexo new page -p java/注解.md</span><br></pre></td></tr></table></figure><p>三种layout：</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>草稿文件写的过程中，想要预览一下，那么可以使用<code>hexo server --draft</code>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中</p><h1 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h1><h2 id="md文档标题为中文时在hexo不能正常跳转"><a href="#md文档标题为中文时在hexo不能正常跳转" class="headerlink" title="md文档标题为中文时在hexo不能正常跳转"></a>md文档标题为中文时在hexo不能正常跳转</h2><p>解决：<a href="https://www.zhihu.com/question/422584701/answer/1491441321">https://www.zhihu.com/question/422584701/answer/1491441321</a></p><h2 id="关于分类、标签等菜单项"><a href="#关于分类、标签等菜单项" class="headerlink" title="关于分类、标签等菜单项"></a>关于分类、标签等菜单项</h2><p>解决：<a href="https://himmy.blog.csdn.net/article/details/93644533">https://himmy.blog.csdn.net/article/details/93644533</a></p><h2 id="特殊符号转义处理"><a href="#特殊符号转义处理" class="headerlink" title="特殊符号转义处理"></a>特殊符号转义处理</h2><p>解决：<a href="http://wxnacy.com/2018/01/12/hexo-specific-symbol/">http://wxnacy.com/2018/01/12/hexo-specific-symbol/</a></p><h1 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a>官方网址</h1><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客写作 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
